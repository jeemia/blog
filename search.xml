<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>前端需要掌握的模块笔记</title>
      <link href="/count-goblin/2021/02/04/%E5%89%8D%E7%AB%AF%E9%9C%80%E8%A6%81%E6%8E%8C%E6%8F%A1%E7%9A%84%E6%A8%A1%E5%9D%97%E7%AC%94%E8%AE%B0/"/>
      <url>/count-goblin/2021/02/04/%E5%89%8D%E7%AB%AF%E9%9C%80%E8%A6%81%E6%8E%8C%E6%8F%A1%E7%9A%84%E6%A8%A1%E5%9D%97%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\count-goblin\assets\css\APlayer.min.css"><script src="\count-goblin\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="❤️❤️Web模块"><a href="#❤️❤️Web模块" class="headerlink" title="❤️❤️Web模块"></a>❤️❤️Web模块</h3><h4 id="html基本结构"><a href="#html基本结构" class="headerlink" title="html基本结构"></a>html基本结构</h4><ol><li><code>html</code>标签是由<code>&lt;&gt;</code>包围的关键词。</li><li><code>html</code>标签通常成对出现，分为标签开头和标签结尾。</li><li>有部分标签是没有结束标签的，为单标签，单标签必须使用<code>/</code>结尾。</li><li>页面所有的内容，都在<code>html</code>标签中。</li><li><code>html</code>标签分为三部分：标签名称，标签内容，标签属性。</li><li><code>html</code>标签具有语义化，可通过标签名能够判断出该标签的内容，语义化的作用是网页结构层次更清晰，更容易被搜索引擎收录，更容易让屏幕阅读器读出网页内容。</li><li>标签的内容是在一对标签内部的内容。</li><li>标签的内容可以是其他标签。</li></ol><h4 id="标签属性"><a href="#标签属性" class="headerlink" title="标签属性"></a>标签属性</h4><ol><li><code>class</code>属性：用于定义元素的类名</li><li><code>id</code>属性：用于指定元素的唯一<code>id</code>，该属性的值在整个<code>html</code>文档中具有唯一性</li><li><code>style</code>属性：用于指定元素的行内样式，使用该属性后将会覆盖任何全局的样式设定</li><li><code>title</code>属性：用于指定元素的额外信息</li><li><code>accesskey</code>属性：用于指定激活元素的快捷键</li><li><code>tabindex</code>属性：用于指定元素在<code>tab</code>键下的次序</li><li><code>dir</code>属性：用于指定元素中内容的文本方向，属性只有<code>ltr</code>或<code>rtl</code>两种</li><li><code>lang</code>属性：用于指定元素内容的语言</li></ol><h4 id="事件属性"><a href="#事件属性" class="headerlink" title="事件属性"></a>事件属性</h4><ol><li><code>window</code>窗口事件，<code>onload</code>，在网页加载结束之后触发，<code>onunload</code>，在用户从网页离开时发生（点击跳转，页面重载，关闭浏览器窗口等）</li><li><code>form</code>表单事件，<code>onblur</code>，当元素失去焦点时触发，<code>onchange</code>，在元素的值被改变时触发，<code>onfocus</code>，当元素获得焦点时触发，<code>onreset</code>，当表单中的重置按钮被点击时触发，<code>onselect</code>，在元素中文本被选中后触发，<code>onsubmit</code>，在提交表单时触发</li><li><code>keyboard</code>键盘事件，<code>onkeydown</code>，在用户按下按键时触发，<code>onkeypress</code>，在用户按下按键后，按着按键时触发。该属性不会对所有按键生效，不生效的有，<code>alt,ctrl,shift,esc</code></li><li><code>mouse</code>鼠标事件，<code>onclick</code>，当在元素上发生鼠标点击时触发，<code>onblclick</code>，当在元素上发生鼠标双击时触发，<code>onmousedown</code>，当元素上按下鼠标按钮时触发，<code>onmousemove</code>，当鼠标指针移动到元素上时触发，<code>onmouseout</code>，当元素指针移出元素时触发，<code>onmouseup</code>，当元素上释放鼠标按钮时触发。<code>Media</code>媒体事件，<code>onabort</code>，当退出时触发，<code>onwaiting</code>，当媒体已停止播放但打算继续播放时触发。</li></ol><h4 id="文本标签"><a href="#文本标签" class="headerlink" title="文本标签"></a>文本标签</h4><ol><li>段落标签<code>&lt;p&gt;&lt;/p&gt;</code>，段落标签用来描述一段文字</li><li>标题标签<code>&lt;hx&gt;&lt;/hx&gt;</code>，标题标签用来描述一个标题，标题标签总共有六个级别，<code>&lt;h1&gt;&lt;/h1&gt;</code>标签在每个页面中通常只出现一次</li><li>强调语句标签，<code>&lt;em&gt;&lt;/em&gt;</code>，用于强调某些文字的重要性</li><li>更加强调标签，<code>&lt;strong&gt;&lt;/strong&gt;</code>和<code>&lt;em&gt;</code>标签一样，用于强调文本，但它强调的程度更强一些</li><li>无语义标签<code>&lt;span&gt;&lt;/span&gt;</code>，标签是没有语义的</li><li>短文本引用标签<code>&lt;q&gt;&lt;/q&gt;</code>，简短文字的引用</li><li>长文本引用标签<code>&lt;blockquote&gt;&lt;/blockquote&gt;</code>，定义长的文本引用</li><li>换行标签<code>&lt;br/&gt;</code></li></ol><h4 id="多媒体标签"><a href="#多媒体标签" class="headerlink" title="多媒体标签"></a>多媒体标签</h4><ol><li>链接标签，<code>&lt;a&gt;&lt;/a&gt;</code></li><li>图片标签，<code>&lt;img/&gt;</code></li><li>视频标签，<code>&lt;video&gt;&lt;/video&gt;</code></li><li>音频标签，<code>&lt;audio&gt;&lt;/audio&gt;</code></li></ol><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><ol><li>无序列表标签，<code>ul,li</code>，<code>&lt;ul&gt;&lt;/ul&gt;</code>列表定义一个无序列表，<code>&lt;li&gt;&lt;/li&gt;</code>代表无需列表中的每一个元素</li><li>有序列表，<code>ol,li</code></li><li>定义列表，<code>&lt;dl&gt;&lt;/dl&gt;</code>，定义列表通常和<code>&lt;dt&gt;&lt;/dt&gt;</code>和<code>&lt;dd&gt;&lt;/dd&gt;</code>标签一起使用</li></ol><h4 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h4><ol><li>表格标签<code>&lt;table&gt;&lt;/table&gt;</code></li><li>表格的一行<code>&lt;tr&gt;&lt;/tr&gt;</code></li><li>表格的表头<code>&lt;th&gt;&lt;/th&gt;</code></li><li>单元格<code>&lt;td&gt;&lt;/td&gt;</code></li><li>表格合并，同一行内，合并几列<code>colspan=&quot;2&quot;</code>，同一列内，合并几行<code>rowspan=&quot;3&quot;</code></li></ol><h4 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h4><ol><li>表单标签<code>&lt;form&gt;</code></li></ol><p><code>&lt;form&gt;&lt;/form&gt;</code>表单是可以把浏览者输入的数据传送到服务器端，这样服务器端程序就可以处理表单传过来的数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form method&#x3D;&quot;传送方式&quot; action&#x3D;&quot;服务器文件&quot;&gt;</span><br></pre></td></tr></table></figure><p><code>action</code>，浏览者输入的数据被传送到的地方</p><p><code>method</code>，数据传送的方式</p><ol><li>输入标签<code>&lt;input/&gt;</code></li></ol><p><code>name</code>：为文本框命名，用于提交表单，后台接收数据用。</p><p><code>value</code>：为文本输入框设置默认值。</p><p><code>type</code>：通过定义不同的<code>type</code>类型，<code>input</code>的功能有所不同。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">text单行文本输入框</span><br><span class="line">password密码输入框（密码显示为***)</span><br><span class="line">radio单选框 （checked属性用于显示选中状态）</span><br><span class="line">checkbox复选框（checked属性用于显示选中状态）</span><br><span class="line">file上传文件</span><br><span class="line">button普通按钮</span><br><span class="line">reset重置按钮（点击按钮，会触发form表单的reset事件）</span><br><span class="line">submit提交按钮（点击按钮，会吃饭form表单的submit事件）</span><br><span class="line">email专门用于输入 e-mail</span><br><span class="line">url专门用于输入 url</span><br><span class="line">number专门用于number</span><br><span class="line">range显示为滑动条，用于输入一定范围内的值</span><br><span class="line">date选取日期和时间（还包含：month、week、time、datetime、datetime-local）</span><br><span class="line">color选取颜色</span><br><span class="line"></span><br><span class="line">button&#96;按钮，下拉选择框&#96;&lt;select&gt;&lt;&#x2F;select&gt;</span><br><span class="line">&lt;option value&#x3D;&quot;提交值&quot;&gt;选项&lt;&#x2F;option&gt;是下拉选择框里面的每一个选项</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>文本域：<code>&lt;textarea&gt;&lt;/textarea&gt;</code>，当用户想输入大量文字的时候，使用文本域。<code>cols</code>，多行输入域的列数，<code>rows</code>，多行输入域的行数。</li></ol><h4 id="其他语义化标签"><a href="#其他语义化标签" class="headerlink" title="其他语义化标签"></a>其他语义化标签</h4><ol><li>盒子<code>&lt;div&gt;&lt;/div&gt;</code></li><li>网页头部<code>&lt;header&gt;&lt;/header&gt;</code>，<code>html5</code>新增语义化标签，定义网页的头部，主要用于布局，分割页面的结构</li><li>底部信息<code>&lt;footer&gt;&lt;/footer&gt;</code>，<code>html5</code>新增语义化标签，定义网页的底部，主要用于布局，分割页面的结构</li><li>导航<code>&lt;nav&gt;&lt;/nav&gt;</code>，<code>html5</code>新增语义化标签，定义一个导航，主要用于布局，分割页面的结构</li><li>文章<code>&lt;article&gt;&lt;/article&gt;</code>，<code>html5</code>新增语义化标签，定义一篇文章，主要用于布局，分割页面的结构</li><li>侧边栏<code>&lt;aside&gt;&lt;/aside&gt;</code>，语义化标签，定义主题内容外的信息，主要用于布局，分割页面的结构。</li><li>时间标签<code>&lt;time&gt;&lt;/time&gt;</code>，语义化标签，定义一个时间</li></ol><h4 id="网页结构"><a href="#网页结构" class="headerlink" title="网页结构"></a>网页结构</h4><ol><li><code>&lt;!DOCTYPE html&gt;</code> 定义文档类型，告知浏览器用哪一种标准解释<code>HTML</code></li><li><code>&lt;html&gt;&lt;/html&gt;</code>可告知浏览器其自身是一个 <code>HTML</code> 文档</li><li><code>&lt;body&gt;&lt;/body&gt;</code>标签之间的内容是网页的主要内容</li><li><code>&lt;head&gt;&lt;/head&gt;</code>标签用于定义文档的头部，它是所有头部元素的容器</li><li><code>&lt;title&gt;&lt;/title&gt;</code>元素可定义文档的标题</li><li><code>&lt;link&gt;</code>标签将<code>css</code>样式文件链接到<code>HTML</code>文件内</li><li><code>&lt;meta&gt;</code>定义文档的元数据</li></ol><h4 id="模块划分"><a href="#模块划分" class="headerlink" title="模块划分"></a>模块划分</h4><ol><li>常见的企业网站，多由头部区，展示图片区域，主题区域，底部信息区域组成</li><li>网页拆分原则: – 由上到下 - 由内到外</li></ol><h4 id="CSS代码语法"><a href="#CSS代码语法" class="headerlink" title="CSS代码语法"></a>CSS代码语法</h4><ol><li><code>CSS</code>全称为层叠样式表<code>(Cascading Style Sheets)</code>，它主要是用于定义<code>HTML</code>内容在浏览器内的显示样式，如文字大小、颜色、字体加粗等。</li><li><code>css</code>代码通常存放在<code>&lt;style&gt;&lt;/style&gt;</code>标签内</li><li><code>css</code> 样式由选择符和声明组成，而声明又由属性和值组成</li><li>选择符<code>&#123;属性:值&#125;</code></li><li>选择符：又称选择器，指明网页中要应用样式规则的元素</li></ol><h4 id="CSS-放置位置"><a href="#CSS-放置位置" class="headerlink" title="CSS 放置位置"></a>CSS 放置位置</h4><ol><li>行内样式，不建议使用</li><li>内联式样式表</li><li>外联样式表</li></ol><h4 id="CSS的继承"><a href="#CSS的继承" class="headerlink" title="CSS的继承"></a>CSS的继承</h4><ol><li><code>CSS</code>的某些样式是具有继承性的，继承是一种规则，它允许样式不仅应用于某个特定html标签元素，而且应用于其后代。</li><li>不可继承样式：<code>display、margin、border、padding、background、height、min-height、max-height、width、min-width、max-width、overflow、position、left、right、top、bottom、z-index、float、clear</code></li><li>可以继承的样式：<code>letter-spacing、word-spacing、white-space、line-height、color、font、font-family、font-size、font-style、font-variant、font-weight、text-decoration、text-transform、direction、visibility、cursor</code></li></ol><h4 id="选择器的种类"><a href="#选择器的种类" class="headerlink" title="选择器的种类"></a>选择器的种类</h4><ol><li>标签选择器:通过标签的名字，修改<code>css</code>样式</li><li>通配符选择器:选择页面中所有的元素</li><li>属性选择器</li><li>后代选择器:选择某个父元素下面所有的元素</li><li>一级子元素选则器:选择某个父元素的直接子元素，后代选择器是选择父元素的所有子孙元素，一级子元素原则器只选择第一级子元素，不会再向下查找元素</li><li><code>id</code>选择器：通过<code>id</code>查找页面中唯一的标签</li><li><code>class</code>选择器:通过特定的<code>class</code>（类）来查找页面中对应的标签，以 <code>.class</code>名称</li><li>伪类选择器:<code>:hover</code>鼠标移入某个元素;<code>:before</code>在某个元素的前面插入内容;<code>:after</code>在某个元素的后面插入内容</li><li>群组选择器:可以对多个不同的选择器设置相同的样式</li></ol><h4 id="选择器的优先级"><a href="#选择器的优先级" class="headerlink" title="选择器的优先级"></a>选择器的优先级</h4><ol><li>当有不同的选择器对同一个对象进行样式指定时，并且两个选择器有相同的属性被赋予不同的值时。</li><li>通过测算那个选择器的权重值最高，应用哪一个选择器的样式</li><li>权重计算方式:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">标签选择器：1</span><br><span class="line"></span><br><span class="line">class选择器：10</span><br><span class="line"></span><br><span class="line">id选择器：100</span><br><span class="line"></span><br><span class="line">行内样式：1000</span><br><span class="line"></span><br><span class="line">!important 最高级别，提高样式权重，拥有最高级别</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="背景样式"><a href="#背景样式" class="headerlink" title="背景样式"></a>背景样式</h4><ol><li>背景颜色<code>background-color</code></li><li>背景图片<code>background-image</code></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">background-image:url(bg01.jpg);</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>背景图片位置<code>background-position</code></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">background-position:10px 100px;</span><br><span class="line"></span><br><span class="line">// 代表坐标x，y轴</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>背景图片重复<code>background-repeat</code></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">background-repeat:no-repeat</span><br><span class="line"></span><br><span class="line">// no-repeat 设置图像不重复，常用</span><br><span class="line"></span><br><span class="line">// round 自动缩放直到适应并填充满整个容器</span><br><span class="line"></span><br><span class="line">// space 以相同的间距平铺且填充满整个容器</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>背景图片定位<code>background-attachment</code></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">background-attachment:fixed</span><br><span class="line"></span><br><span class="line">// 背景图像是否固定或者随着页面的其余部分滚动</span><br><span class="line"></span><br><span class="line">// background-attachment的值可以是scroll（跟随滚动），fixed（固定）</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li><code>background</code>缩写</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">background:#ff0000 url(bg01.jpg) no-repeat fixed center</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="字体样式"><a href="#字体样式" class="headerlink" title="字体样式"></a>字体样式</h4><ol><li>字体族<code>font-family</code></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">font-family:&quot;微软雅黑&quot;,&quot;黑体&quot;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>字体大小<code>font-size</code></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">font-size:12px;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>网页默认字体大小是<code>16px</code></p></blockquote><ol><li>字体粗细<code>font-weight</code></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">font-weight:400;</span><br><span class="line"></span><br><span class="line">normal（默认）</span><br><span class="line">bold（加粗）</span><br><span class="line">bolder（相当于<span class="tag">&lt;<span class="name">strong</span>&gt;</span>和<span class="tag">&lt;<span class="name">b</span>&gt;</span>标签）</span><br><span class="line">lighter （常规）</span><br><span class="line">100 ~ 900 整百（400=normal，700=bold）</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>字体颜色<code>color</code></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">颜色的英文单词color:red;</span><br><span class="line"></span><br><span class="line">十六进制色：color: #FFFF00;</span><br><span class="line"></span><br><span class="line">RGB(红绿蓝)color:rgb(255,255,0)</span><br><span class="line"></span><br><span class="line">RGBA（红绿蓝透明度）A是透明度在0~1之间取值。color:rgba(255,255,0,0.5)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>字体斜体<code>font-style</code></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">font-style:italic</span><br><span class="line"></span><br><span class="line">normal 文本正常显示</span><br><span class="line"></span><br><span class="line">italic 文本斜体显示</span><br><span class="line"></span><br><span class="line">oblique 文本倾斜显示</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="文本属性"><a href="#文本属性" class="headerlink" title="文本属性"></a>文本属性</h4><ol><li>行高<code>line-height</code></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">line-height:50px;</span><br></pre></td></tr></table></figure><p>可以将父元素的高度撑起来</p><ol><li>文本水平对齐方式<code>text-align</code></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">left 左对齐</span><br><span class="line">center 文字居中</span><br><span class="line">right 右对齐</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>文本所在行高的垂直对齐方式<code>vertical-align</code></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">baseline 默认</span><br><span class="line"></span><br><span class="line">sub 垂直对齐文本的下标，和<span class="tag">&lt;<span class="name">sub</span>&gt;</span>标签一样的效果</span><br><span class="line"></span><br><span class="line">super 垂直对齐文本的上标，和<span class="tag">&lt;<span class="name">sup</span>&gt;</span>标签一样的效果</span><br><span class="line"></span><br><span class="line">top 对象的顶端与所在容器的顶端对齐</span><br><span class="line"></span><br><span class="line">text-top 对象的顶端与所在行文字顶端对齐</span><br><span class="line"></span><br><span class="line">middle 元素对象基于基线垂直对齐</span><br><span class="line"></span><br><span class="line">bottom 对象的底端与所在行的文字底部对齐</span><br><span class="line"></span><br><span class="line">text-bottom 对象的底端与所在行文字的底端对齐</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>文本缩进<code>text-indent</code></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">text-indent:2em;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>通常用在段落开始位置的首行缩进</p></blockquote><ol><li>字母之间的间距<code>letter-spacing</code></li><li>单词之间间距<code>word-spacing</code></li><li>文本的大小写<code>text-transform</code></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">capitalize 文本中的每个单词以大写字母开头。</span><br><span class="line"></span><br><span class="line">uppercase 定义仅有大写字母。</span><br><span class="line"></span><br><span class="line">lowercase 定义仅有小写字母。</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>文本的装饰<code>text-decoration</code></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">none 默认。</span><br><span class="line">underline 下划线。</span><br><span class="line">overline 上划线。</span><br><span class="line">line-through 中线。</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>自动换行<code>word-wrap</code></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">word-wrap: break-word;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="基本样式"><a href="#基本样式" class="headerlink" title="基本样式"></a>基本样式</h4><ol><li>宽度<code>width</code></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">width:200px;</span><br><span class="line">定义元素的宽度</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>高度<code>height</code></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">height:300px</span><br><span class="line">元素默认没有高度</span><br><span class="line">需要设置高度</span><br><span class="line">可以不定义高度，让元素的内容将元素撑高</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>鼠标样式<code>cursor</code></li></ol><p>定义鼠标的样式<code>cursor:pointer</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">default默认</span><br><span class="line">pointer小手形状</span><br><span class="line">move移动形状</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>透明度<code>opacity</code></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">opacity:0.3</span><br><span class="line"></span><br><span class="line">透明度的值0~1之间的数字，0代表透明，1代表完全不透明</span><br><span class="line"></span><br><span class="line">透明的元素，只是看不到了，但是还占据着文档流</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>可见性<code>visibility</code></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">visibility:hidden;</span><br><span class="line"></span><br><span class="line">visible 元素可见</span><br><span class="line"></span><br><span class="line">hidden 元素不可见</span><br><span class="line"></span><br><span class="line">collapse 当在表格元素中使用时，此值可删除一行或一列，不会影响表格的布局。</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>溢出隐藏 <code>overflow</code></li></ol><blockquote><p>设置当对象的内容超过其指定高度及宽度时如何显示内容</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">visible 默认值，内容不会被修剪，会呈现在元素框之外。</span><br><span class="line">hidden 内容会被修剪，并且其余内容是不可见的。</span><br><span class="line">scroll 内容会被修剪，但是浏览器会显示滚动条以便查看其余的内容。</span><br><span class="line">auto 如果内容被修剪，则浏览器会显示滚动条以便查看其余的内容。</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>边框颜色<code>outline</code></li></ol><p><code>input</code>文本输入框自带边框，且样式丑陋，我们可以通过<code>outline</code>修改边框</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">outline</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">outline</span><span class="selector-pseudo">:none</span>清除边框</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="样式重置"><a href="#样式重置" class="headerlink" title="样式重置"></a>样式重置</h4><p>早期的网页没有<code>css</code>样式，为了界面美观，很多元素自带<code>margin、padding</code>等样式，但这些样式在不同浏览器解析的值都不一样，需要将<code>css</code>样式重置，保证在不同浏览器显示一致。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">清除元素的margin和padding</span><br><span class="line">去掉自带的列表符</span><br><span class="line">去掉自带的下划线</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="盒模型样式"><a href="#盒模型样式" class="headerlink" title="盒模型样式"></a>盒模型样式</h4><ol><li>块状元素、内联元素和内联块状元素。</li></ol><p>块级元素:</p><ul><li>每个块级元素都从新的一行开始，并且其后的元素也另起一行。</li><li>元素的高度、宽度、行高以及顶和底边距都可设置。</li><li>元素宽度在不设置的情况下，是它本身父容器的100%，除非设定一个宽度。</li></ul><p>行内元素:</p><ul><li>和其他元素都在一行上</li><li>元素的高度、宽度、行高及顶部和底部边距不可设置</li><li>元素的宽度就是它包含的文字或图片的宽度，不可改变。</li></ul><p>行内块状元素:</p><ul><li>和其他元素都在一行上</li><li>元素的高度、宽度、行高以及顶和底边距都可设置。</li></ul><ol><li>元素分类转换<code>display</code></li></ol><p><code>block</code>：将元素转换为块级元素</p><p><code>inline</code>：将元素装换为行级元素</p><p><code>inline-block</code>：将元素转换为内联块元素</p><p><code>none</code>: 将元素隐藏</p><ol><li>描边<code>border</code></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">border:2px solid #f00;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>线条的样式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dashed（虚线）| dotted（点线）| solid（实线）。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>css</code>样式中允许只为一个方向的边框设置样式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">下描边<span class="selector-tag">border-bottom</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-tag">red</span>;</span><br><span class="line"></span><br><span class="line">上描边<span class="selector-tag">border-top</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-tag">red</span>;</span><br><span class="line"></span><br><span class="line">右描边<span class="selector-tag">border-right</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-tag">red</span>;</span><br><span class="line"></span><br><span class="line">左描边<span class="selector-tag">border-left</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-tag">red</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>间距<code>margin</code></li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">margin</span>:<span class="number">20px</span> <span class="number">10px</span> <span class="number">15px</span> <span class="number">30px</span>;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>内填充<code>padding</code></li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">padding</span><span class="selector-pseudo">:10px</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="浮动float"><a href="#浮动float" class="headerlink" title="浮动float"></a>浮动float</h4><ol><li>浮动原理</li></ol><ul><li>浮动使元素脱离文档普通流，漂浮在普通流之上的。</li><li>浮动元素依然按照其在普通流的位置上出现，然后尽可能的根据设置的浮动方向向左或者向右浮动，直到浮动元素的外边缘遇到包含框或者另一个浮动元素为止，且允许文本和内联元素环绕它。</li><li>浮动会产生块级框（相当于设置了<code>display:block</code>），而不管该元素本身是什么。</li></ul><ol><li>清除浮动带来的影响</li></ol><p><code>clear</code> 清除浮动：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">none</span> : 不清除（默认值）。</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">left</span> : 不允许左边有浮动对象</span><br><span class="line"><span class="selector-tag">right</span> : 不允许右边有浮动对象</span><br><span class="line"><span class="selector-tag">both</span> : 不允许两边有浮动对象</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>利用伪类实现清除浮动</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearFix</span> &#123;</span><br><span class="line">  content=&quot;&quot;;</span><br><span class="line">  <span class="selector-tag">display</span><span class="selector-pseudo">:block</span>;</span><br><span class="line">  <span class="selector-tag">width</span><span class="selector-pseudo">:0</span>;</span><br><span class="line">  <span class="selector-tag">height</span><span class="selector-pseudo">:0</span>;</span><br><span class="line">  <span class="selector-tag">clear</span><span class="selector-pseudo">:both</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="定位position"><a href="#定位position" class="headerlink" title="定位position"></a>定位position</h4><ol><li>定位功能可以让布局变的更加自由。</li><li>层模型–绝对定位（相对于父类）</li></ol><p>绝对定位使元素的位置与文档流无关，因此不占据空间。这一点与相对定位不同，相对定位实际上被看作普通流定位模型的一部分，因为元素的位置相对于它在普通流中的位置。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#box_relative</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如下图所示：</p><p><img src= "/count-goblin/img/loading.gif" data-lazy-src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e718c9fcfcc84d07b053b791e2185c6d~tplv-k3u1fbpfcp-watermark.image" alt="img"></p><blockquote><p>如果想为元素设置层模型中的绝对定位，需要设置<code>position:absolute</code>(绝对定位)，这条语句的作用将元素从文档流中拖出来，然后使用<code>left、right、top、bottom</code>属性相对于其最接近的一个具有定位属性的父包含块进行绝对定位。如果不存在这样的包含块，则相对于<code>body</code>元素，即相对于浏览器窗口。</p></blockquote><ol><li>层模型–相对定位（相对于原位置）</li></ol><p>相对定位是一个非常容易掌握的概念。如果对一个元素进行相对定位，它将出现在它所在的位置上。然后，可以通过设置垂直或水平位置，让这个元素“相对于”它的起点进行移动。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#box_relative</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如下图所示：</p><p><img src= "/count-goblin/img/loading.gif" data-lazy-src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fba199eb32924bcc83eea558677634b0~tplv-k3u1fbpfcp-watermark.image" alt="img"></p><blockquote><p>如果想为元素设置层模型中的相对定位，需要设置<code>position:relative</code>（相对定位），它通过<code>left、right、top、bottom</code>属性确定元素在正常文档流中的偏移位置。相对定位完成的过程是首先按<code>static(float)</code>方式生成一个元素(并且元素像层一样浮动了起来)，然后相对于原位置移动，移动的方向和幅度由<code>left、right、top、bottom</code>属性确定，偏移前的位置保留不动。</p></blockquote><ol><li>层模型–固定定位（相对于网页窗口）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">position:fixed</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>与<code>absolute</code>定位类型类似，但它的相对移动的坐标是视图（屏幕内的网页窗口）本身。由于视图本身是固定的，它不会随浏览器窗口的滚动条滚动而变化，除非你在屏幕中移动浏览器窗口的屏幕位置，或改变浏览器窗口的显示大小，因此固定定位的元素会始终位于浏览器窗口内视图的某个位置，不会受文档流动影响，这与<code>background-attachment:fixed</code>属性功能相同。</p></blockquote><h4 id="浏览器默认样式"><a href="#浏览器默认样式" class="headerlink" title="浏览器默认样式"></a>浏览器默认样式</h4><ol><li>页边距</li></ol><p><code>IE</code>默认为<code>10px</code>，通过<code>body</code>的<code>margin</code>属性设置</p><p>要清除页边距一定要清除这两个属性值</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123; <span class="attribute">margin</span>:<span class="number">0</span>; <span class="attribute">padding</span>:<span class="number">0</span>;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>段间距</li></ol><p><code>IE</code>默认为<code>19px</code>，通过<code>p</code>的<code>margin-top</code>属性设置</p><p><code>p</code>默认为块状显示，要清除段间距，一般可以设置</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123; <span class="attribute">margin-top</span>:<span class="number">0</span>; <span class="attribute">margin-bottom</span>:<span class="number">0</span>;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="❤️❤️html5"><a href="#❤️❤️html5" class="headerlink" title="❤️❤️html5"></a>❤️❤️html5</h3><h4 id="HTML5-的优势"><a href="#HTML5-的优势" class="headerlink" title="HTML5 的优势"></a>HTML5 的优势</h4><ol><li>解决跨浏览器，跨平台问题</li><li>增强了 <code>web</code> 的应用程序</li></ol><h4 id="HTML5-废弃元素"><a href="#HTML5-废弃元素" class="headerlink" title="HTML5 废弃元素"></a>HTML5 废弃元素</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">frame frameset noframes</span><br><span class="line">acronym applet dir</span><br><span class="line">basefont big center font strike tt</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="HTML5-新增元素"><a href="#HTML5-新增元素" class="headerlink" title="HTML5 新增元素"></a>HTML5 新增元素</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span>用于定义文档或节的页眉</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span>用于定义文档或节的页脚</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">article</span>&gt;</span>用于定义文档内的文章</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span>用于定义文档中的一个区域（或节）</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">aside</span>&gt;</span>用于定义与当前页面或当前文章的内容几乎无关的附属信息</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">figure</span>&gt;</span>用于定义一段独立的引用，经常与说明(caption)<span class="tag">&lt;<span class="name">figcaption</span>&gt;</span>配合使用，通常用在主文中的图片，代码，表格等。</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">figcaption</span>&gt;</span>用于表示是与其相关联的引用的说明/标题，用于描述其父节点<span class="tag">&lt;<span class="name">figure</span>&gt;</span>元素里的其他数据。</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hgroup</span>&gt;</span>用于对多个<span class="tag">&lt;<span class="name">h1</span>&gt;</span>~<span class="tag">&lt;<span class="name">h6</span>&gt;</span>元素进行组合</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span>&gt;</span>用于定义页面上的导航链接部分</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mark</span>&gt;</span>用于定义高亮文本</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">time</span>&gt;</span>用于显示被标注的内容是日期或时间（24小时制）</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">meter</span>&gt;</span>用于表示一个已知最大值和最小值的计数器</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">progress</span>&gt;</span>用于表示一个进度条</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span>&gt;</span>定义声音，比如音乐或其他音频流</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span>&gt;</span>定义视频，比如电影片段或其他视频流</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="HTML5-表单相关元素和属性"><a href="#HTML5-表单相关元素和属性" class="headerlink" title="HTML5 表单相关元素和属性"></a>HTML5 表单相关元素和属性</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">input新增type类型</span><br><span class="line"></span><br><span class="line">color用来创建一个允 许用户使用颜色选择器，或输入兼容 CSS 语法的颜色代码的区域</span><br><span class="line"></span><br><span class="line">time生成一个时间选择器</span><br><span class="line"></span><br><span class="line">datetime生成一个 UTC 的日期时间选择器</span><br><span class="line"></span><br><span class="line">datetime-local生成一个本地化的日期时间选择器</span><br><span class="line"></span><br><span class="line">date显示一个日期输入区域，可同时使用日期选择器，结果值包括年、月、日，不包括时间。</span><br><span class="line"></span><br><span class="line">month生成一个月份选择器，它结果值包括年份和月份， 但不包括日期</span><br><span class="line"></span><br><span class="line">week生成一个选择的几周的选择器</span><br><span class="line"></span><br><span class="line">email生成一个 E-mail 输入框</span><br><span class="line"></span><br><span class="line">number生成一个只能输入数字的输入框</span><br><span class="line"></span><br><span class="line">range生成一个拖动条，通过拖动条，使得用户只能输入指定范围，指定步长的值</span><br><span class="line"></span><br><span class="line">search生成一个专门用于输入搜索关键字的文本框</span><br><span class="line"></span><br><span class="line">tel生成一个只能输入电话号码的文本框</span><br><span class="line"></span><br><span class="line">url生成一个 URL 输入框</span><br><span class="line"></span><br><span class="line">HTML5 input新增属性</span><br><span class="line"></span><br><span class="line">placeholder主要用在文本框，规定可描述输入字段预期值的简短的提示信息</span><br><span class="line"></span><br><span class="line">autocomplete为了完成表单的快速输入，一般浏览器提供了自动补全的功能选择</span><br><span class="line"></span><br><span class="line">autofocus当为某个表单控件增加该属性后，当浏览器打开这个页面， 这个表单控件会自动获得焦点</span><br><span class="line"></span><br><span class="line">list为文本框指定一个可用的选项列表，当用户在文本框中输 入信息时，会根据输入的字符，自动显示下拉列表提示，供用户从中选择</span><br><span class="line"></span><br><span class="line">pattern用于验证表单输入的内容，通常 HTML5 的 type 属性，比如 email、tel、 number、url 等，已经自带了简单的数据格式验证功能了，加上 pattern 属性后， 验证会更加高效</span><br><span class="line"></span><br><span class="line">novalidate当提交表单时不对其进行验证</span><br><span class="line"></span><br><span class="line">required必需在提交之前填写输入字段</span><br><span class="line"></span><br><span class="line">spellcheck拼写检查，为<span class="tag">&lt;<span class="name">input</span>&gt;</span>、<span class="tag">&lt;<span class="name">textarea</span>&gt;</span>等元素新增属性</span><br><span class="line"></span><br><span class="line">formenctype规定在发送到服务器之前应该如何对表单数据进行编码</span><br><span class="line"></span><br><span class="line">formtarget带有两个提交按钮的表单，会提交到不同的目标窗口</span><br><span class="line"></span><br><span class="line">multiple一次上传多个文件</span><br><span class="line"></span><br><span class="line">maxlength wrap<span class="tag">&lt;<span class="name">textarea</span>&gt;</span>新增<span class="tag">&lt;<span class="name">br</span> /&gt;</span>maxlength：用于规定文本区域最大字符数。<span class="tag">&lt;<span class="name">br</span> /&gt;</span>wrap：是否包含换号符（soft/ hard）</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="❤️❤️css3"><a href="#❤️❤️css3" class="headerlink" title="❤️❤️css3"></a>❤️❤️css3</h3><h4 id="CSS3-新增选择器"><a href="#CSS3-新增选择器" class="headerlink" title="CSS3 新增选择器"></a>CSS3 新增选择器</h4><ol><li>兄弟选择器</li></ol><p><code>元素 1 ~ 元素 2</code>    第1个元素之后，所有的元素2都会被选择，且这些元素和第一个元素拥有同一个父元素（两个元素之间不一定要相邻）。</p><ol><li>属性选择器</li></ol><ul><li><code>E[attribute^=value]</code>    用于选取带有以指定值开头的属性值的元素</li><li><code>E[attribute$=value]</code>    用于选取属性值以指定值结尾的元素</li><li><code>E[attribute*=value]</code>    用于选取属性值中包含指定值的元素，位置不限，也不限制整个单词</li></ul><ol><li>伪类选择器</li></ol><ul><li><code>:root</code>    选择文档的根元素，HTML 里，永远是<code>&lt;html&gt;</code>元素</li><li><code>:last-child</code>    向元素添加样式，且该元素是它的父元素的最后一个子元素</li><li><code>:nth-child(n)</code>    向元素添加样式，且该元素是它的父元素的第 n 个子元素</li><li><code>:nth-last-child(n)</code>    向元素添加样式，且该元素是它的父元素的倒数第 n 个子 元素</li><li><code>:only-child</code>    向元素添加样式，且该元素是它的父元素的唯一子元素</li><li><code>:first-of-type</code>    向元素添加样式，且该元素是同级同类型元素中第一个元 素</li><li><code>:last-of-type</code>    向元素添加样式，且该元素是同级同类型元素中最后一个 元素</li><li><code>:nth-of-type(n)</code>    向元素添加样式，且该元素是同级同类型元素中第 n 个元 素</li><li><code>:nth-last-of-type(n)</code>    向元素添加样式，且该元素是同级同类型元素中倒数第 n 个元素</li><li><code>:only-of-type</code>    向元素添加样式，且该元素是同级同类型元素中唯一的元素</li><li><code>:empty</code>    向没有子元素（包括文本内容）的元素添加样式</li></ul><ol><li>伪元素选择器</li></ol><ul><li><code>:enabled</code>    向当前处于可用状态的元素添加样式，通常用于定义表单的样式或者超链接的样式</li><li><code>:disabled</code>    向当前处于不可用状态的元素添加样式，通常用于定义表单的 样式或者超链接的样式</li><li><code>:checked</code>    向当前处于选中状态的元素添加样式</li><li><code>:not(selector)</code>    向不是 <code>selector</code> 元素的元素添加样式</li><li><code>:target</code>    向正在访问的锚点目标元素添加样式</li><li><code>::selection</code>    向用户当前选取内容所在的元素添加样式</li></ul><h4 id="CSS3-新增属性"><a href="#CSS3-新增属性" class="headerlink" title="CSS3 新增属性"></a>CSS3 新增属性</h4><ol><li>新增背景属性</li></ol><ul><li><code>background-clip</code>    设置背景覆盖范围    <code>border-box/paddingbox/content-box</code></li><li><code>background-origin</code>    设置背景覆盖的起点    <code>border-box/paddingbox/content-box</code></li><li><code>background-size</code>    设置背景的大小    <code>cover/contain/长度/百分比</code></li></ul><ol><li>新增的字体文本相关属性</li></ol><ul><li><code>text-overflow</code>    设置当文本溢出元素框时处理方式    <code>clip/ellipsis</code></li><li><code>word-wrap</code>    规定单词的换行方式    <code>normal/break-word</code></li><li><code>word-break</code>    规定自动换行的方式    <code>normal/break-all/keep-all</code></li></ul><ol><li>新增盒模型属性</li></ol><ul><li><code>box-shadow</code>    阴影    <code>h-shadow v-shadow &lt;br /&gt;blur spread color inset</code></li><li><code>resize</code>    调整尺寸    <code>none/both/horizontal</code></li><li><code>outline-offset</code>    轮廓的偏移量    <code>length/inherit</code></li></ul><h4 id="新增变形动画属性"><a href="#新增变形动画属性" class="headerlink" title="新增变形动画属性"></a>新增变形动画属性</h4><ol><li><code>transform</code></li></ol><ul><li><code>translate(x,y)</code></li><li><code>rotate(angle)</code></li><li><code>scale(x,y)</code></li><li><code>skew(angleX ,angleY)</code></li></ul><ol><li><code>transform-origin</code></li></ol><p>表示元素旋转的中心点，默认值为 <code>50% 50%。</code></p><ul><li>第一个值表示<strong>元素旋转中心点的水平位置</strong>，它还可以赋值 <code>left、right、center</code>、长度、百分比</li><li>第二个值表示<strong>元素旋转中心点的垂直位置</strong>，它还可以赋值 <code>top、bottom、 center</code>、长度、百分比。</li></ul><h4 id="3D-变形属性"><a href="#3D-变形属性" class="headerlink" title="3D 变形属性"></a>3D 变形属性</h4><ol><li><code>transform 3D</code>函数</li></ol><p><code>transform</code> 增加了三个变形函数：</p><ul><li><code>rotateX</code>：表示元素沿着 <code>x</code> 轴旋转。</li><li><code>rotateY</code>：表示元素沿着 <code>y</code> 轴旋转。</li><li><code>rotateZ</code>：表示元素沿着 <code>z</code> 轴旋转。</li></ul><ol><li><code>transform-style</code>用来设置嵌套的子元素在 <code>3D</code> 空间中显示效果。</li><li><code>perspective</code>设置成透视效果，透视效果为近大远小。</li><li><code>perspective-origin</code>设置 <code>3D</code> 元素所基于的 <code>x</code> 轴和 <code>y</code> 轴，改变 <code>3D</code> 元素的底部位置，该属性取值同 <code>transform-origin</code>，默认值为 <code>50% 50%。</code></li><li><code>backface-visibility</code>用来设置当元素背面面向屏幕时是否可见，通常用于设置 不希望用户看到旋转元素的背面。</li></ol><p>它的属性值有<code>visible</code>（背面可见，默认值）、 <code>hidden</code>（背面不可见）两个。</p><h4 id="CSS3-的过渡属性"><a href="#CSS3-的过渡属性" class="headerlink" title="CSS3 的过渡属性"></a>CSS3 的过渡属性</h4><ul><li><code>transition-delay</code>    设置过渡的延迟时间</li><li><code>transition-duration</code>    设置过渡的过渡时间</li><li><code>transition-timing-function</code>    设置过渡的时间曲线</li><li><code>transition-property</code>    设置哪条 <code>CSS</code> 使用过渡</li><li><code>transition</code>    一条声明设置 所有过渡属性</li></ul><h4 id="CSS3-的动画属性"><a href="#CSS3-的动画属性" class="headerlink" title="CSS3 的动画属性"></a>CSS3 的动画属性</h4><ol><li><code>animation</code></li></ol><ul><li><code>@keyframes</code>    定义动画选择器</li><li><code>animation-name</code>    使用<code>@keyframes</code> 定义的动画</li><li><code>animation-delay</code>    设置动画的持续动画时间</li><li><code>animation-timing-function</code>    设置动画的时间曲线</li><li><code>animation-iteration-count</code>    设置动画播放次数</li><li><code>animation-direction</code>    设置动画反向播放</li><li><code>animation-play-state</code>    设置动画播放状态</li><li><code>transition</code>    一条声明设置所有动画属性</li></ul><h4 id="CSS3-新增多列属性"><a href="#CSS3-新增多列属性" class="headerlink" title="CSS3 新增多列属性"></a>CSS3 新增多列属性</h4><ul><li><code>column-count</code>    设置元素应该被分隔的列数</li><li><code>column-width</code>    设置列的宽度</li><li><code>columns</code>    一条声明设置列宽和列数 <code>column</code></li><li><code>column-gap</code>    设置列之间的间隔</li><li><code>column-span</code>    设置元素应该横跨的列数</li><li><code>column-rule-style</code>    设置列之间间隔的样式</li><li><code>column-rule-color</code>    设置列之间间隔的颜色</li><li><code>column-rule-width</code>    设置列之间间隔的宽度</li><li><code>column-rule</code>    一条声明设置列之间间 隔所有属性</li></ul><h4 id="CSS3新增单位"><a href="#CSS3新增单位" class="headerlink" title="CSS3新增单位"></a>CSS3新增单位</h4><p><code>px、em、rem、vh、 vw和%</code> 移动端长度单位</p><blockquote><p>使用CSS单位<code>px、em、rem、vh、 vw</code>等实现页面布局。</p></blockquote><ul><li><code>px</code>：绝对单位，页面按精确像素展示</li><li><code>em</code>：相对单位，基准点为父节点字体的大小，如果自身定义了<code>font-size</code>按自身来计算（浏览器默认字体是<code>16px</code>），整个页面内<code>1em</code>不是一个固定的值。</li></ul><p><code>em</code>会根据父级元素的大小而变化，但是如果嵌套了多个元素，要计算它的大小，是很容易出错的，这样就引申出了<code>rem</code>。</p><ul><li><code>rem</code>：相对单位，可理解为<code>”root em”</code>, 相对根节点<code>html</code>的字体大小来计算，<code>CSS3</code>新加属性。</li><li><code>%</code>：<code>%</code> 百分比，相对长度单位，相对于父元素的百分比值</li><li><code>vw、vh、vmin、vmax</code> 主要用于页面视口大小布局</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vw：viewpoint width&#96;，视窗宽度，&#96;1vw&#96;等于视窗宽度的&#96;1%。</span><br><span class="line">vh：viewpoint height&#96;，视窗高度，&#96;1vh&#96;等于视窗高度的&#96;1%。</span><br></pre></td></tr></table></figure><ul><li><code>vmin：vw</code>和<code>vh</code>中较小的那个。</li><li><code>vmax：vw</code>和<code>vh</code>中较大的那个。</li></ul><h4 id="弹性盒模型"><a href="#弹性盒模型" class="headerlink" title="弹性盒模型"></a>弹性盒模型</h4><p>弹性盒模型的语法基础概念</p><blockquote><p>任何一个容器都可以指定弹性布局</p></blockquote><h3 id="❤️❤️JavaScript"><a href="#❤️❤️JavaScript" class="headerlink" title="❤️❤️JavaScript"></a>❤️❤️JavaScript</h3><h4 id="JavaScript基础"><a href="#JavaScript基础" class="headerlink" title="JavaScript基础"></a>JavaScript基础</h4><ol><li>外部引入<code>js</code>文件：通过<code>&lt;script src=&quot;main.js&quot;&gt;&lt;/script&gt;</code></li><li>关键词</li></ol><p><img src= "/count-goblin/img/loading.gif" data-lazy-src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0b623e0b564f49cfac60dbf303df882f~tplv-k3u1fbpfcp-watermark.image" alt="img"></p><ol><li>变量名大小写敏感</li><li>命名规范</li></ol><h4 id="JavaScript数据类型"><a href="#JavaScript数据类型" class="headerlink" title="JavaScript数据类型"></a>JavaScript数据类型</h4><ol><li>字符串<code>(String)</code></li><li>数字<code>（Number）</code></li><li>布尔值<code>（Boolean）</code></li><li>未定义<code>（Undefined）</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//undefined有两种结果</span></span><br><span class="line"><span class="comment">//1、真的没定义</span></span><br><span class="line">alert(<span class="keyword">typeof</span> dada); <span class="comment">//undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2、定义了，但是没有放东西进去</span></span><br><span class="line"><span class="keyword">var</span> dada;</span><br><span class="line">alert(dada); <span class="comment">//undefined</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><code>undefined</code>，表示未定义或只声明未给值的变量</p></blockquote><ol><li>对象<code>（Object）</code></li></ol><p><code>js</code>中内置了如下的对象：</p><ul><li><code>Object</code>    是所有JS对象的超类(基类），JS中的所有对象都是继承自Object对象的</li><li><code>Array</code>    数组对象 定义数组属性和方法</li><li><code>Number</code>    数字对象</li><li><code>Boolean</code>    布尔对象 布尔值相关</li><li><code>Error</code>    错误对象 处理程序错误</li><li><code>Function</code> 函数对象 定义函数属性和方法</li><li><code>Math</code>    数学对象</li><li><code>Date</code>    日期对象</li><li><code>RegExp</code>    对象正则表达式对象 定义文本匹配与筛选规则</li><li><code>String</code>    字符串对象 定义字符串属性和方法</li></ul><h4 id="算术运算"><a href="#算术运算" class="headerlink" title="算术运算"></a>算术运算</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var y &#x3D; 3;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src= "/count-goblin/img/loading.gif" data-lazy-src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dd946ecb9b09459db81fd3fdabc0cd50~tplv-k3u1fbpfcp-watermark.image" alt="img"></p><h4 id="强制转换"><a href="#强制转换" class="headerlink" title="强制转换"></a>强制转换</h4><ol><li>字符串转数字<code>parseInt() parseFloat() isNaN()</code></li><li>数字转为字符串<code>toString()</code></li></ol><h4 id="赋值运算"><a href="#赋值运算" class="headerlink" title="赋值运算"></a>赋值运算</h4><ol><li>复合的赋值运算符 <code>+=  -=  *=  /=  %=</code></li></ol><h4 id="关系运算"><a href="#关系运算" class="headerlink" title="关系运算"></a>关系运算</h4><ol><li>关系运算：<code>&gt; &lt; &lt;= &gt;= != == === ==和=== !=和!==</code></li></ol><h4 id="“-”、“-”、“-”有什么区别？"><a href="#“-”、“-”、“-”有什么区别？" class="headerlink" title="“=”、“==”、“===”有什么区别？"></a><code>“=”、“==”、“===”</code>有什么区别？</h4><ol><li><code>=</code> 是赋值符号</li><li><code>==</code> 忽略数据类型的判断 是否相等</li><li><code>===</code> 数值和数据类型都要相等才判断为相等</li></ol><h4 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h4><ul><li>逻辑与<code>&amp;&amp;</code></li><li>逻辑或 <code>||</code></li><li>逻辑非 <code>!</code></li><li>复合逻辑表达式</li></ul><h4 id="三元运算"><a href="#三元运算" class="headerlink" title="三元运算"></a>三元运算</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">条件运算符？：</span><br><span class="line"></span><br><span class="line">三元运算符：(比较表达式)？结果1:结果2</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="分支循环"><a href="#分支循环" class="headerlink" title="分支循环"></a>分支循环</h4><blockquote><p>程序运行的三大结构：<strong>顺序结构、选择结构、循环结构</strong></p></blockquote><ul><li>单分支选择：<code>if</code>语句</li><li>双分支选择：<code>if-else</code>语句</li><li>多分支语句：<code>if-else if-else</code> 语句</li></ul><h4 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h4><p>语法格式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(num)&#123; <span class="comment">//表达式</span></span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="comment">//执行代码块1</span></span><br><span class="line">    <span class="keyword">break</span>;  <span class="comment">//中断执行，跳出</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="keyword">default</span>:  <span class="comment">//默认，其他都不是的情况下执行</span></span><br><span class="line">  <span class="comment">//执行代码块</span></span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//强调：break非常重要，如果不加break的话，程序会一直继续往下执行；</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="while"><a href="#while" class="headerlink" title="while"></a>while</h4><p>语法格式:</p><blockquote><p><code>while</code>循环的特点：不知道具体执行的次数时，使用最合适</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(条件表达式)&#123;</span><br><span class="line">     <span class="comment">//要重复执行的代码段 - 循环体</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="do-while"><a href="#do-while" class="headerlink" title="do-while"></a>do-while</h4><p>语法格式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">  <span class="comment">//循环体</span></span><br><span class="line">&#125;<span class="keyword">while</span>(循环条件判断);</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><code>do-while</code>是先执行循环体，再检测循环条件。</li><li><code>do-while</code>能保证循环体至少执行一次。</li><li>其他循环无法保证循环至少执行一次。</li></ul><h4 id="for"><a href="#for" class="headerlink" title="for"></a>for</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="number">1</span>循环变量初始化；<span class="number">2</span>循环条件判断；<span class="number">4</span>循环变量的修改)&#123;</span><br><span class="line">  <span class="number">3</span>循环体</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="break和continue"><a href="#break和continue" class="headerlink" title="break和continue"></a>break和continue</h4><ol><li><code>break</code> 退出循环</li><li><code>continue</code> 跳过本次循环，继续下一次循环</li></ol><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><ol><li>数组定义</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>字面量方式定义</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var arr &#x3D; [&quot;1&quot;,&quot;2&quot;];</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>向数组赋值</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">arr[<span class="number">0</span>] = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">arr[<span class="number">1</span>] = <span class="string">&quot;2&quot;</span>;</span><br><span class="line">alert(arr[<span class="number">0</span>]+<span class="string">&quot;,&quot;</span>+arr[<span class="number">1</span>]);</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>数组索引</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arr[<span class="number">0</span>]+<span class="string">&quot;,&quot;</span>+arr[<span class="number">1</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>数组长度</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//语法</span></span><br><span class="line">arr.length</span><br><span class="line"></span><br><span class="line"><span class="comment">//最后一个元素的索引</span></span><br><span class="line">arr.length-<span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="数组方法"><a href="#数组方法" class="headerlink" title="数组方法"></a>数组方法</h4><ol><li><code>indexOf</code></li></ol><p>数组可以通过<code>indexOf()</code>来搜索一个指定的元素的位置，如未找到返回 <code>-1</code></p><ol><li><code>concat</code></li></ol><p><code>concat()</code>方法把当前的 数组 和 另一个 数组连接起来，并返回一个新的 数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> newArr = arr1.concat(arr2,<span class="string">&quot;dada&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li><code>push和pop</code></li></ol><p><code>push()</code>向数组的末尾添加若干元素，<code>pop()</code> 则把 数组的最后一个元素删除掉</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">arr.push(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"></span><br><span class="line">arr.pop();</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"></span><br><span class="line"><span class="comment">//空数组继续pop不会报错，而是返回undefined</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li><code>unshift和shift</code></li></ol><p><code>unshift()</code> 向数组前面添加若干元素，<code>shift()</code> 则把数组的第一个元素删除掉</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr.unshift(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>);</span><br><span class="line">arr.shift();</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li><code>slice</code></li></ol><p><code>slice()</code> 截取数组的部分元素，然后返回一个新的数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(arr.slice(<span class="number">0</span>,<span class="number">3</span>)); <span class="comment">//从索引0开始，到索引3结束，但不包括3</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr.slice(<span class="number">3</span>));  <span class="comment">//从索引3开始到结束</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>如果不给<code>slice()</code>传递任何参数，就会从头到尾截取所有元素。利用这一点，可以很容易的复制一份新的数组</p></blockquote><ol><li><code>sort</code></li></ol><p><code>sort()</code> 可以对当前数组排序</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;a&quot;</span>];</span><br><span class="line">arr.sort();</span><br><span class="line">arr;<span class="comment">//[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li><code>reverse</code></li></ol><p><code>reverse()</code> 把整个数组的元素给掉个个</p><ol><li><code>join</code></li></ol><p><code>join()</code> 方法把数组的每个元素用指定的字符串连接起来</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>];</span><br><span class="line">arr.join(<span class="string">&quot;-&quot;</span>); <span class="comment">//&quot;a-b-c&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li><code>splice</code></li></ol><p>可以从指定的索引开始删除若干元素，然后再从该位置添加若干元素</p><h4 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>],<span class="string">&quot;dadaqianduan&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> x = arr[<span class="number">1</span>][<span class="number">1</span>]; <span class="comment">//b</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><ol><li>字符串属性<code>length</code>-字符串的长度属性</li><li><code>slice()</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">slice(start[,end])，start--开始索引 end--结束索引</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li><code>substr()</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">substr(start[,length])，start：开始，取length个字符</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li><code>split()</code></li></ol><p><code>split([separator[,limit]])</code>，按条件分割字符串，返回数组</p><ol><li><code>indexOf()</code></li></ol><p>在父串中首次出现的位置，从<code>0</code>开始！没有返回<code>-1</code></p><ol><li><code>lastIndexOf()</code></li></ol><p>倒序查找</p><ol><li><code>charAt(index)</code></li></ol><p><code>charAt(index)</code> 指定索引的字符</p><ol><li><code>toLowerCase()</code></li></ol><p>转小写</p><ol><li><code>toUpperCase()</code></li></ol><p>转大写</p><h3 id="❤️❤️正则表达式"><a href="#❤️❤️正则表达式" class="headerlink" title="❤️❤️正则表达式"></a>❤️❤️正则表达式</h3><h4 id="创建正则表达式"><a href="#创建正则表达式" class="headerlink" title="创建正则表达式"></a>创建正则表达式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;i&quot;</span>);</span><br><span class="line"><span class="comment">// 将匹配字母a，第二个参数i,表示匹配时不分大小写</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="正则方法"><a href="#正则方法" class="headerlink" title="正则方法"></a>正则方法</h4><ol><li><code>test</code>方法</li></ol><p>检索字符串中指定的值。</p><ol><li><code>exec</code>方法</li></ol><p>该方法用于<strong>检索字符串中的正则表达式的匹配</strong>，该函数<strong>返回一个数组</strong>，其中存放匹配的结果。如果未找到匹配，则返回值为 <code>null</code>。</p><h4 id="支持正则的-String方法"><a href="#支持正则的-String方法" class="headerlink" title="支持正则的 String方法"></a>支持正则的 String方法</h4><p><img src= "/count-goblin/img/loading.gif" data-lazy-src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3b14cdc619cb4c54bcb465661206338d~tplv-k3u1fbpfcp-watermark.image" alt="img"></p><h3 id="❤️❤️js对象"><a href="#❤️❤️js对象" class="headerlink" title="❤️❤️js对象"></a>❤️❤️js对象</h3><h4 id="定义对象"><a href="#定义对象" class="headerlink" title="定义对象"></a>定义对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用new运算符</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//字面量</span></span><br><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">    name:<span class="string">&quot;dadaqianduan&quot;</span>，</span><br><span class="line">    age:<span class="number">12</span>,</span><br><span class="line">    sex:<span class="string">&quot;男&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="对象的数据访问"><a href="#对象的数据访问" class="headerlink" title="对象的数据访问"></a>对象的数据访问</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用.语法</span></span><br><span class="line">obj.name</span><br><span class="line"></span><br><span class="line"><span class="comment">//用[]语法</span></span><br><span class="line">obj[<span class="string">&quot;name&quot;</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h4><p><code>json(JavaScript Object Notation)</code>，是一种轻量级的数据交换格式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> man = &#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>:<span class="string">&quot;dadaqianduan&quot;</span>,</span><br><span class="line">  <span class="string">&quot;age&quot;</span>:<span class="number">12</span>,</span><br><span class="line"> <span class="string">&quot;sex&quot;</span>:<span class="string">&quot;男&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h4><ul><li><code>Object</code>    是所有JS对象的超类(基类），JS中的所有对象都是继承自Object对象的</li><li><code>Array</code>    数组对象</li><li><code>Number</code>    数字对象</li><li><code>Boolean</code>    布尔对象</li><li><code>Error</code>    错误对象</li><li><code>Function</code>    函数对象</li><li><code>Math</code>    数学对象</li><li><code>Date</code>    日期对象</li><li><code>RegExp</code>    对象正则表达式对象</li><li><code>String</code>    字符串对象</li></ul><h4 id="Math-方法"><a href="#Math-方法" class="headerlink" title="Math 方法"></a>Math 方法</h4><ul><li><code>abs()</code>    绝对值 （去除正负）</li><li><code>random()</code>    随机数，<code>0-1</code>之间的随机数，<code>1</code>不会出现</li><li><code>round()</code>    四舍五入</li><li><code>floor(x)</code>    下舍入(向下取整)</li><li><code>ceil(x)</code>    上舍入(向上取整)</li><li><code>max(x,y)</code>    <code>x 和 y</code> 中的最大值</li><li><code>min(x,y)</code>    <code>x 和 y</code> 中的最小值</li><li><code>cos(x)</code>    <code>x</code>的余弦</li><li><code>sin(x)</code>    <code>x</code>的正弦</li><li><code>sqrt(x)</code>    返回<code>x</code>的平方根</li><li><code>pow(3,4)</code>    返回<code>3</code>的<code>4</code>次方</li></ul><h4 id="Date-方法"><a href="#Date-方法" class="headerlink" title="Date 方法"></a>Date 方法</h4><ul><li><code>getFullYear()</code>    返回 年（4位）</li><li><code>getMouth()</code>    返回 月（0–11）</li><li><code>getDate()</code>    返回 日期</li><li><code>getDay()</code> 返回 星期 （0-6）</li><li><code>getHours()</code>    返回 小时</li><li><code>getMinutes()</code>    返回 分钟</li><li><code>getSeconds()</code>    返回秒</li><li><code>getTime()</code>    返回1970年1月1日午夜到指定日期（字符串）的毫秒数</li><li><code>setFullYear()</code>    设置 年份</li><li><code>setMouth()</code>    设置 月</li><li><code>setDate()</code>    设置 天</li><li><code>setHours()</code>    设置小时</li><li><code>setMinutes()</code>    设置 分钟</li><li><code>setSeconds()</code>    设置 秒</li><li><code>setTime()</code>    使用毫秒的形式设置时间对象</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断闰年</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">runYear</span>(<span class="params">year</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(year%<span class="number">4</span>==<span class="number">0</span> &amp;&amp; year%<span class="number">100</span>!=<span class="number">0</span> || year%<span class="number">400</span>==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="❤️❤️面向对象是一种编程思想"><a href="#❤️❤️面向对象是一种编程思想" class="headerlink" title="❤️❤️面向对象是一种编程思想"></a>❤️❤️面向对象是一种编程思想</h3><ol><li>类是一个抽象的概念</li><li>对象：具体的事物</li><li>类是对象的抽象，对象是类的具体实例</li><li>类不占用内存，对象占用内存空间</li><li>对象的访问 声明对象</li><li>遍历对象 – <code>for in</code> 循环</li></ol><h4 id="定义对象-1"><a href="#定义对象-1" class="headerlink" title="定义对象"></a>定义对象</h4><ol><li>字面量创建</li><li>工厂模式</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 工厂模式中的函数，首字母大写</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">n,c</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        name:n,</span><br><span class="line">        color:c,</span><br><span class="line">        say:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          alert(<span class="string">&quot;dadaqianduan&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>构造函数</li></ol><blockquote><p><code>Javascript</code>提供了一个构造函数<code>（Constructor）</code>模式。</p></blockquote><p>所谓”构造函数”，其实就是一个普通函数，但是内部使用了<code>this</code>变量。</p><p>对构造函数使用<code>new</code>运算符，就能生成实例，并且<code>this</code>变量会绑定在实例对象上。</p><p>构造函数首字母大写</p><p>构造函数中的<code>this</code>，指向的 实例化的对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">n,c</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name=n;</span><br><span class="line">  <span class="built_in">this</span>.color=c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>生成实例对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cat1 = <span class="keyword">new</span> Cat(<span class="string">&quot;dadaqianduan&quot;</span>,<span class="string">&quot;黄色&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自动含有一个constructor属性，指向它们的构造函数</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>实例：自动含有一个<code>constructor</code>属性，指向它们的构造函数</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alert(cat1.constructor == Cat); <span class="comment">//true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li><code>Javascript</code>还提供了一个<code>instanceof</code>运算符</li></ol><blockquote><p>验证 原型对象 与 实例对象 之间的关系。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> txt = <span class="string">&#x27;dadaqianduan&#x27;</span>;</span><br><span class="line">alert(txt <span class="keyword">instanceof</span> <span class="built_in">String</span>); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">123123</span>;</span><br><span class="line">alert(age <span class="keyword">instanceof</span> <span class="built_in">Number</span>); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> res = <span class="regexp">/\d/</span>;</span><br><span class="line">alert(res <span class="keyword">instanceof</span> <span class="built_in">RegExp</span>); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line">alert(arr <span class="keyword">instanceof</span> <span class="built_in">Array</span>); <span class="comment">//true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="原型和原型链v"><a href="#原型和原型链v" class="headerlink" title="原型和原型链v"></a>原型和原型链v</h4><blockquote><p>构造函数都有一个<code>prototype</code>属性，指向 另一个对象 。这个对象的 所有<strong>属性和方法</strong>，都会被构造函数的实例继承。</p></blockquote><p>所有的函数都是 <code>Function</code> 的实例。</p><p>在构造函数上都有一个 原型 属性<code>prototype，prototype</code>也是一个对象；这个对象上有一个 <code>constructor</code> 属性，该属性指向的就是构造函数。</p><p>实例对象上有一个<code>_proto_</code>属性，该属性也指向原型对象，该属性不是标准属性，不可以用在编程中，该属性用于浏览器内部使用。</p><blockquote><p>constructor</p></blockquote><ol><li><code>constructor</code>是构造函数 创建的实例的属性，该属性的作用是 指向 创建当前对象的 构造函数。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">son.constructor == parent; <span class="comment">// true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>每个原型都有一个<code>constructor</code>属性，指向该关联的构造函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Person===Person.prototype.constructor)  <span class="comment">//true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>关系图：</p><p>![img](data:image/svg+xml;utf8,<?xml version="1.0"?><svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="800" height="600"></svg>)</p><blockquote><p>区分一下普通对象和函数对象</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> f2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> f3 = <span class="keyword">new</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o1 = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> o2 = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"><span class="keyword">var</span> o3 = <span class="keyword">new</span> f1();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="built_in">Object</span>); <span class="comment">//function</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="built_in">Function</span>);<span class="comment">//function</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> f1) <span class="comment">//function</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> f2) <span class="comment">// function</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> f3) <span class="comment">//function</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> o1) <span class="comment">//object</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> o2) <span class="comment">//object</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> o3)<span class="comment">// object</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>在<code>JavaScript</code>中，原型是一个对象，原型的作用是 实现对象的继承。</li><li>在<code>JavaScript</code>中的所有函数对象中，都存在一个属性，<code>prototype</code>，该属性对应当前对象的原型。</li><li>所有的<code>JavaScript</code>对象，都存在一个<code>_proto_</code>属性，<code>_proto_</code>属性指向实例对象的构造函数的原型。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person(); <span class="comment">// 实例对象</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(p._proto_ === Person.prototype); <span class="comment">// true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><code>p</code>是实例对象, <code>Person</code>是<code>p</code>的构造函数。 <code>p</code>的<code>_proto_</code>属性 指向 构造函数 <code>Person</code>的原型。</p></blockquote><p><code>js</code>是如何通过原型进行继承的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> parent = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line"> <span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">parent.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> son = <span class="keyword">new</span> parent(<span class="string">&quot;dadaqianduan&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(son.getName()); <span class="comment">// dadaqianduan</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">son&#96;继承了&#96;parent&#96;的原型中的函数属性&#96;getName</span><br></pre></td></tr></table></figure></blockquote><h4 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h4><blockquote><p>除了<code>Object</code>的<code>prototype</code>的原型是<code>null</code>外，所有的对象 和 原型 都有自己的原型，对象的原型 指向 原型对象。</p></blockquote><p>在层级多的关系中，多个原型层层相连 则 构成了 原型链。</p><p>在查找一个对象的属性时，如当前对象找不到该属性，就会沿着原型链一直往上查找，直到找到为止，如果到了原型链顶端，没找到，则返回<code>undefined</code></p><h4 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h4><ol><li>所有引用类型都有一个<code>__proto__</code>属性</li><li>所有函数都有一个<code>prototype</code>属性</li><li>所有引用类型的<code>__proto__</code>属性指向它构造函数的<code>prototype</code></li></ol><p>构造函数和实例原型之间的关系：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person&#96;（构造函数） 的 &#96;prototype&#96; 指向 &#96;Person.prototype</span><br></pre></td></tr></table></figure><p><img src= "/count-goblin/img/loading.gif" data-lazy-src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e50469264bb4404188f29b77a5f22038~tplv-k3u1fbpfcp-watermark.image" alt="img"></p><ol><li><code>__proto__</code></li></ol><p>每个对象，除<code>null</code>外，都有的属性叫<code>__proto__</code>，这个属性会指向该对象的原型。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="built_in">console</span>.log(person.__proto__ === Person.prototype); <span class="comment">// true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>关系图：</p><p><img src= "/count-goblin/img/loading.gif" data-lazy-src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/23255f9ef0574581ac2aedfd9818a14d~tplv-k3u1fbpfcp-watermark.image" alt="img"></p><p>关系图：</p><p><img src= "/count-goblin/img/loading.gif" data-lazy-src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ab1fb1c948614eafb198d64d5035761a~tplv-k3u1fbpfcp-watermark.image" alt="img"></p><p>关系图：</p><p><img src= "/count-goblin/img/loading.gif" data-lazy-src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1f7f24592ebc45f19406e29e9bbcaca0~tplv-k3u1fbpfcp-watermark.image" alt="img"></p><blockquote><p>梳理：</p></blockquote><p>写一个构造函数<code>Person</code>，一般构造函数区别与普通函数要求首字母大写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">function Person()&#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><code>prototype</code>原型</p></blockquote><p>原型 是 一个对象，在原型<code>prototype</code> 上定义的属性，通过“继承”，实现 实例 也有这个属性。</p><p>继承 是在 <code>new</code>操作符内部实现的。</p><blockquote><p>构造函数 内部 有个 <code>prototype</code>的属性，通过这个属性就能访问到 原型。</p></blockquote><p><code>Person</code>是构造函数，<code>Person.prototype</code>是原型。</p><ol><li>实例</li></ol><p>有构造函数，可以在原型上创建可继承的属性，通过<code>new</code>操作符创建实例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">person = <span class="keyword">new</span> Person()</span><br><span class="line"></span><br><span class="line">da = person <span class="keyword">instanceof</span> Person <span class="comment">// 检查person是否是Person的实例</span></span><br><span class="line"></span><br><span class="line">da <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.name = <span class="string">&#x27;dadaqianduan.cn&#x27;</span></span><br><span class="line"></span><br><span class="line">person = <span class="keyword">new</span> Person()</span><br><span class="line"></span><br><span class="line">da = person.name <span class="comment">// 实例继承的属性</span></span><br><span class="line"></span><br><span class="line">da <span class="comment">// &#x27;dadaqianduan.cn&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li><code>proto</code></li></ol><p>实例通过<code>_proto_</code>访问到原型。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Person.prototype.name = <span class="string">&#x27;dadaqianduan.cn&#x27;</span></span><br><span class="line"></span><br><span class="line">person = <span class="keyword">new</span> Person()</span><br><span class="line"></span><br><span class="line">da = person.__proto__ === Person.prototype</span><br><span class="line"></span><br><span class="line">da <span class="comment">// true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li><code>constructor</code>构造函数</li></ol><blockquote><p>原型也可以通过<code>constructor</code>访问到构造函数</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Person.prototype.name = <span class="string">&#x27;dadaqianduan.cn&#x27;</span></span><br><span class="line">person = <span class="keyword">new</span> Person</span><br><span class="line"></span><br><span class="line">da = Person.prototype.constructor === Person</span><br><span class="line">da <span class="comment">// true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>小结</p></blockquote><ol><li>所有引用类型（函数，数组，对象）都拥有<code>__proto__</code>属性。</li><li>所有函数拥有<code>prototype</code>属性。</li><li>每个实例对象(<code>Object</code>)都有一个私有属性，为<code>__proto__</code>指向它的构造函数的原型对象(<code>prototype</code>)。该原型对象也有一个自己的原型对象<code>__proto__</code>，层层向上直到一个对象的原型对象为<code>null</code>，<code>null</code> 没有原型，并作为这个原型链中的最后一个环节。</li></ol><h3 id="❤️❤️常用的JavaScript设计模式"><a href="#❤️❤️常用的JavaScript设计模式" class="headerlink" title="❤️❤️常用的JavaScript设计模式"></a>❤️❤️常用的JavaScript设计模式</h3><p>百度百科：</p><p>　　设计模式<code>（Design pattern）</code>是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。</p><p>　　使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性。 毫无疑问，设计模式于己于他人于系统都是多赢的；设计模式使代码编制真正工程化；设计模式是软件工程的基石脉络，如同大厦的结构一样。</p><h4 id="单体模式"><a href="#单体模式" class="headerlink" title="单体模式"></a>单体模式</h4><blockquote><p>单体是一个用来划分 命名空间并将一批相关的属性和方法组织在一起的对象，如果它可以被实例化，那么它只能被实例化一次。</p></blockquote><p>特点：</p><p>（1）可以来划分<strong>命名空间</strong>，从而清除全局变量所带来的危险。</p><p>（2）利用分支技术来来封装浏览器之间的差异。</p><p>（3）可以把代码组织的更为一体，便于阅读和维护。</p><h4 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h4><p>工厂模式的定义：</p><blockquote><p>提供创建对象的接口，意思就是根据领导（调用者）的指示（参数），生产相应的产品（对象）。</p></blockquote><ol><li>创建一个对象常常需要复杂的过程，所以不适合在一个复杂的对象中。</li><li>创建对象可能会导致大量的重复代码，也可能提供不了足够级别的抽象。</li></ol><p>工厂就是把成员对象的创建工作转交给一个外部对象，好处在于消除对象之间的耦合(也就是相互影响)。</p><blockquote><p>分类：</p></blockquote><p><strong>简单工厂模式</strong>：使用一个类，通常为单体，来生成实例。</p><p><strong>复杂工厂模式定义</strong>：将其成员对象的实列化推到子类中，子类可以重写父类接口方法以便创建的时候指定自己的对象类型。</p><p>父类只对创建过程中的一般性问题进行处理，这些处理会被子类继承，子类之间是相互独立的，具体的业务逻辑会放在子类中进行编写。</p><blockquote><p>应用场景：</p></blockquote><p>以下几种情景下工厂模式特别有用：</p><p>（1）对象的构建十分复杂；</p><p>（2）需要依赖具体环境创建不同实例；</p><p>（3）处理大量具有相同属性的小对象。</p><h4 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h4><p>单例模式定义了一个对象的创建过程，此对象只有一个单独的实例，并提供一个访问它的全局访问点。也可以说单例就是保证一个类只有一个实例，实现的方法一般是先判断实例存在与否，如果存在直接返回，如果不存在就创建了再返回，这就确保了一个类只有一个实例对象。</p><p>使用闭包方式来实现单例:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> single = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> unique;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getInstance</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　　　<span class="comment">// 如果该实例存在，则直接返回，否则就对其实例化</span></span><br><span class="line">        <span class="keyword">if</span>( unique === <span class="literal">undefined</span> )&#123;</span><br><span class="line">            unique = <span class="keyword">new</span> Construct();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> unique;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// ... 生成单例的构造函数的代码</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        getInstance : getInstance</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><code>unique</code>是返回对象的引用，而 <code>getInstance</code>是静态方法获得实例。<code>Construct</code> 是创建实例的构造函数。</p></blockquote><p>可以通过 <code>single.getInstance()</code> 来获取到单例，并且每次调用<strong>均获取到同一个单例</strong>。这就是 <strong>单例模式</strong> 所实现的效果。</p><blockquote><p>应用场景：</p></blockquote><ol><li>单例模式是一种常用的模式，有一些对象我们往往只需要一个，比如全局缓存、浏览器的<code>window</code>对象。</li><li>借助单例模式，可以把代码组织的更为一致，方便阅读与维护。</li></ol><h3 id="❤️❤️函数"><a href="#❤️❤️函数" class="headerlink" title="❤️❤️函数"></a>❤️❤️函数</h3><h4 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用关键字function 定义函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义函数，吃饭</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dada</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;点餐&quot;</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;拿筷子&quot;</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;吃东西&quot;</span>)；</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="局部变量和全局变量"><a href="#局部变量和全局变量" class="headerlink" title="局部变量和全局变量"></a>局部变量和全局变量</h4><ol><li>变量的作用域</li></ol><ul><li>函数体内的变量：<strong>局部变量</strong>，仅在函数体内可以使用</li><li>函数体外的变量：<strong>全局变量</strong>，对全局可见</li></ul><ol><li>局部变量</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">da</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> dadada = <span class="string">&quot;dada&quot;</span>；<span class="comment">//局部变量</span></span><br><span class="line">  alert(dadada);</span><br><span class="line">&#125;</span><br><span class="line">da(); <span class="comment">//调用</span></span><br><span class="line">alert(dadada); <span class="comment">//报错访问不到，函数体外对dadada不可见</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>全局变量</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> da = <span class="string">&quot;我是全局变量&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">home</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> da = <span class="string">&quot;我是局部变量&quot;</span>;</span><br><span class="line">  alert(da);</span><br><span class="line">&#125;</span><br><span class="line">home();</span><br><span class="line"></span><br><span class="line">-----------------------</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a=<span class="number">3</span>;  <span class="comment">//全局</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">da</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert(a); <span class="comment">//3</span></span><br><span class="line">  <span class="keyword">var</span> b=<span class="number">5</span>;</span><br><span class="line">  alert(b);<span class="comment">//5</span></span><br><span class="line">&#125;</span><br><span class="line">da();</span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">//报错，访问不到</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>典型错误，不使用<code>var</code>声明的变量也是全局变量（不建议这样用）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dada</span>(<span class="params"></span>)</span>&#123;         </span><br><span class="line">da = <span class="string">&quot;123&quot;</span>;  <span class="comment">//全局变量         </span></span><br><span class="line">&#125;         </span><br><span class="line">dada();         </span><br><span class="line">alert(da);         </span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><p><code>return</code>的含义</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//理解返回值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getNum</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">2</span>; <span class="comment">//return的作用，将函数的结果返回给当前函数名</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> result = getNum(); <span class="comment">//如果希望返回值保存，就放在变量中；</span></span><br><span class="line"><span class="built_in">console</span>.log(result);  <span class="comment">//2</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>return</code>使用方法</p><ul><li><code>return</code>只能返回一个数据</li><li>如果函数中没有<code>return</code>，则返回<code>undefined</code></li></ul><p><code>return</code>可以用来结束一个函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;helloweb&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;我还会执行吗？&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">Fun();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(i == <span class="number">3</span>)&#123; <span class="comment">//循环3次就return</span></span><br><span class="line">    <span class="keyword">break</span>;   </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;谁最帅！&quot;</span>)； <span class="comment">//打印3次</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;看return会不会执行我&quot;</span>； <span class="comment">//return不执行，break执行</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用函数表达式定义函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//say本质上是一个指向函数对象的变量，我们称为函数变量</span></span><br><span class="line"><span class="keyword">var</span> say = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">&#125;；</span><br><span class="line">say();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> oBtn = <span class="built_in">document</span>.getElementById(<span class="string">&quot;box&quot;</span>);</span><br><span class="line">oBth.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert(<span class="string">&quot;你点击我啦&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="自运行函数"><a href="#自运行函数" class="headerlink" title="自运行函数"></a>自运行函数</h4><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">//这里是代码</span></span><br><span class="line">&#125;</span><br><span class="line">fn(); <span class="comment">//运行fn函数</span></span><br><span class="line"></span><br><span class="line">----------------------</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">//这里是代码</span></span><br><span class="line">&#125;</span><br><span class="line">fn(); <span class="comment">//运行fn函数</span></span><br><span class="line"></span><br><span class="line">---------------------</span><br><span class="line"></span><br><span class="line"><span class="comment">//(fn)() 等价于 fn()</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">//这里是代码</span></span><br><span class="line">&#125;)()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h4><p>闭包 <code>(closure)</code>有权访问另外<strong>一个函数作用域中的变量</strong>的函数。</p><p>创建闭包的常见方式有：</p><ul><li>在一个函数内部创建另外一个函数，并且把这个函数<code>return</code>出去。</li><li>用函数为元素绑定事件，当事件发生时，还可以操作该函数中的变量。</li></ul><blockquote><p>特性</p></blockquote><ol><li>可以读取其它函数内部的变量</li><li>让这些变量的值始终保持在内存中</li></ol><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式1----函数内部return一个函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a=<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        a++;</span><br><span class="line">        <span class="built_in">console</span>.log(a);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b=run();</span><br><span class="line"><span class="comment">//alert(b);   //b是一个函数</span></span><br><span class="line"></span><br><span class="line">b();<span class="comment">//可以访问另外一个作用域中变量的函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方式2--函数内部为绑定事件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addClick</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> txt=<span class="string">&quot;abcd&quot;</span>;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;box&#x27;</span>).onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(txt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">addClick();</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式3--函数内部将变量作为回调函数的参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">play</span>(<span class="params">num,fn</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(num&gt;<span class="number">10</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> fn &amp;&amp; fn(num);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ss=play(<span class="number">20</span>,<span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n+<span class="number">1</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(ss);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="❤️❤️BOM"><a href="#❤️❤️BOM" class="headerlink" title="❤️❤️BOM"></a>❤️❤️BOM</h3><h4 id="BOM概述"><a href="#BOM概述" class="headerlink" title="BOM概述"></a>BOM概述</h4><p><code>BOM（browser object model）</code>浏览器对象模型</p><p><code>BOM</code>提供了<strong>独立于内容而与浏览器窗口进行交互的对象</strong>、载入页面的相关信息，其核心对象是<code>window</code>对象</p><p><code>BOM</code> 没有相关标准，每个浏览器都定义了自己的属性，并且，都有其自己对<code>BOM</code>的实现方式</p><p><code>W3C</code>虽然没有为<code>BOM</code>统一制定标准,但是其中的窗口对象、导航对象等,因功能趋同,实际上已经成为默认的标准</p><h4 id="window方法"><a href="#window方法" class="headerlink" title="window方法"></a>window方法</h4><ul><li><code>alert()</code>    提示框</li><li><code>confirm()</code>    带有确认 取消 按钮的提示框</li><li><code>prompt()</code>    带有可输入内容的文本域的提示框</li><li><code>setInterval()</code>    间隔定时器，可按照指定的周期（以毫秒计）来调用函数或计算表达式</li><li><code>setTimeout()</code>    超时定时器，在指定的毫秒数后调用函数</li><li><code>clearInterval()</code>    清除间隔定时器</li><li><code>clearTimeout()</code>    清除超时定时器</li><li><code>requestAnimationFrame</code>    帧定时器</li></ul><h4 id="frames-框架集"><a href="#frames-框架集" class="headerlink" title="frames [ ] 框架集"></a><code>frames [ ]</code> 框架集</h4><p>把浏览器窗口分成几个窗框，每个窗框同时取得多个<code>URL</code>地址，显示不同网页内容。</p><h4 id="history-历史记录"><a href="#history-历史记录" class="headerlink" title="history 历史记录"></a>history 历史记录</h4><ul><li><code>window.history.go(1)</code> 前进（跳转）</li><li><code>window.history.go(-1)</code> 后退（跳转）</li><li><code>window.history.forward()</code> 前进</li><li><code>window.history.back()</code> 后退</li></ul><h4 id="location-定位"><a href="#location-定位" class="headerlink" title="location 定位"></a>location 定位</h4><ul><li><code>window.location.href=&#39;http://www.baidu.com/&#39;</code> 页面跳转</li><li><code>window.location.reload()</code> 页面重载</li></ul><h4 id="navigator-导航"><a href="#navigator-导航" class="headerlink" title="navigator 导航"></a>navigator 导航</h4><p><code>window.navigator.userAgent</code> 浏览器类型、版本、操作系统类型、浏览器引擎类型等信息</p><h4 id="screen-屏幕"><a href="#screen-屏幕" class="headerlink" title="screen 屏幕"></a>screen 屏幕</h4><p><code>window.screen.width</code> 返回当前屏幕宽度(分辨率值) <code>window.screen.height</code> 返回当前屏幕高度(分辨率值)</p><h4 id="document-文档"><a href="#document-文档" class="headerlink" title="document 文档"></a>document 文档</h4><p><code>window</code>的<code>document</code>的属性，代表所有<code>html</code>的元素，这部分是<code>js</code>主要操作的部分，因此这部分必须规范，才能进行统一开发。因此，<code>W3C</code>将这部分进行了规范—<code>DOM</code>标准。</p><h3 id="❤️❤️DOM"><a href="#❤️❤️DOM" class="headerlink" title="❤️❤️DOM"></a>❤️❤️DOM</h3><p><code>DOM（document object model ）</code>文档对象模型，定义了表示和修改文档所需的对象、行为和属性，以及这些对象之间的关系。</p><h4 id="DOM对象方法"><a href="#DOM对象方法" class="headerlink" title="DOM对象方法"></a>DOM对象方法</h4><ul><li><code>getElementById(id）</code>    通过<code>id</code>获取<code>DOM</code>对象（对象）</li><li><code>getElementsByTagName(tag)</code>    通过标签获取<code>DOM</code>对象（“类似数组”对象）</li><li><code>getElementsByName(name)</code>    通过<code>name</code>获取<code>DOM</code>对象（“类似数组”对象）</li><li><code>getElementsByClassName(class)</code>    通过<code>class</code>获取<code>DOM</code>对象（IE8以下不支持）</li></ul><h4 id="操作DOM间的关系"><a href="#操作DOM间的关系" class="headerlink" title="操作DOM间的关系"></a>操作DOM间的关系</h4><ul><li><code>createElement(tag)</code>    创建元素</li><li><code>removeChild(对象)</code>    删除元素</li><li><code>appendChild(对象)</code>    插入元素</li><li><code>replaceChild(替换对象，被替换对象)</code>    替换元素</li><li><code>insertBefore(对象，目标对象)</code>    前部插入</li></ul><blockquote><p><code>appendChild replaceChild insertBefore</code> 都具有移动对象的功能</p></blockquote><p>节点属性:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">父节点parentNode</span><br><span class="line">第一级所以子节点childNodes</span><br><span class="line">第一个子节点firstChild</span><br><span class="line">最后一个子节点lastChild</span><br><span class="line">前一个兄弟节点previousSbiling</span><br><span class="line">后一个兄弟节点nextSibling</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>克隆节点:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cloneNode( 布尔值 ) </span><br><span class="line"></span><br><span class="line"><span class="literal">true</span>：复制本节点以及所有子节点 </span><br><span class="line"><span class="literal">false</span>：只复制节点本身</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="DOM节点属性"><a href="#DOM节点属性" class="headerlink" title="DOM节点属性"></a>DOM节点属性</h4><ul><li><code>setAttribute(&quot;属性名&quot;,属性值)</code> 设置属性</li><li><code>getAttribute( 属性名 )</code> 获取属性</li><li><code>removeAttribute( 属性名 )</code> 删除属性:</li><li><code>hasAttributes(属性名)</code> 判断属性是否存在（返回<code>ture/false</code>）</li></ul><h3 id="❤️❤️事件"><a href="#❤️❤️事件" class="headerlink" title="❤️❤️事件"></a>❤️❤️事件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> oDiv=<span class="built_in">document</span>.getElementById(<span class="string">&#x27;box&#x27;</span>);</span><br><span class="line">oDiv.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;   </span><br><span class="line">alert(<span class="string">&#x27;hello world&#x27;</span>); </span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li><code>addEventListener( )</code> 增加事件监听</li><li><code>removeEventListener( )</code> 删除事件监听</li></ol><h4 id="事件分类"><a href="#事件分类" class="headerlink" title="事件分类"></a>事件分类</h4><ul><li><code>window</code>事件</li></ul><ol><li><code>onload</code> 加载（某个页面或图像被完成）</li><li><code>onunload</code> 用户退出页面</li><li><code>onresize</code> 窗口或框架被调整尺寸</li><li><code>onscroll</code> 滚动条事件</li></ol><ul><li>鼠标事件</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">onclick 鼠标点击</span><br><span class="line">ondblclick 鼠标双击</span><br><span class="line">onmousedown 鼠标按键按下</span><br><span class="line">onmouseup 鼠标按键被松开</span><br><span class="line">onmouseout 鼠标从某元素移开</span><br><span class="line">onmouseover 鼠标被移到某元素之上</span><br><span class="line">onmouseenter 鼠标进入某元素</span><br><span class="line">onmouseleave 鼠标离开某元素</span><br><span class="line">onmousemove 鼠标移动</span><br><span class="line">oncontextmenu 右键菜单</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>input事件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">onblur 元素失去焦点。</span><br><span class="line">onfocus 元素获得焦点。input输入框</span><br><span class="line">onchange 内容改变时触发。</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>键盘事件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">onkeydown 按键按下</span><br><span class="line">onkeypress 按键按下并释放</span><br><span class="line">onkeyup 按键释放</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>form事件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">onreset 表单重置（重置按钮）</span><br><span class="line">onsubmit 表单提交(form内有text被聚焦，直接回车可触发onsubmit)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h4><p>获取事件数据，不同的事件会有不同数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">oDiv.onclick=<span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</span><br><span class="line"> <span class="comment">//ev就是事件对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h4><ol><li>对象的默认行为</li><li>阻止默认行为：<code>event.preventDefaut()</code></li></ol><h4 id="事件流-1"><a href="#事件流-1" class="headerlink" title="事件流"></a>事件流</h4><p>事件流方向：<code>捕获 → 事件目标→冒泡</code></p><ol><li>事件捕获</li><li>事件目标</li><li>事件冒泡 与 阻止事件冒泡</li></ol><h4 id="事件目标"><a href="#事件目标" class="headerlink" title="事件目标"></a>事件目标</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ev.targrt</span><br><span class="line">ev.target.nodeName</span><br><span class="line">ev.target.tagName</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="事件委派-delegate"><a href="#事件委派-delegate" class="headerlink" title="事件委派(delegate)"></a>事件委派<code>(delegate)</code></h4><blockquote><p>原理: 将事件绑定在父级上，利用事件冒泡原理，通过判断事件的“目标元素”来触发父级上绑定的事件</p></blockquote><p>作用</p><ul><li>不用分别为子元素绑定事件</li><li>为未知元素绑定事件</li></ul><h4 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h4><blockquote><p>可以为一个元素，同时绑定多个事件</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">obj.addEventListener(事件，回调函数，冒泡/捕获) ;</span><br><span class="line">btn.addEventListener(<span class="string">&quot;click&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123; <span class="comment">//ev 事件对象</span></span><br><span class="line"> alert(<span class="string">&#x27;dadaqianduan&#x27;</span>);</span><br><span class="line">&#125;,<span class="literal">false</span>)   <span class="comment">//false 冒泡阶段</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="❤️❤️jQuery"><a href="#❤️❤️jQuery" class="headerlink" title="❤️❤️jQuery"></a>❤️❤️jQuery</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">一款轻量级的js库</span><br><span class="line">丰富的DOM选择器</span><br><span class="line">简单的事件操作</span><br><span class="line">重新封装方法，让操作DOM属性更简单</span><br><span class="line">链式操作</span><br><span class="line">丰富的动画效果</span><br><span class="line">Ajax操作支持</span><br><span class="line">浏览器兼容</span><br><span class="line">插件扩展开发，可扩展性强</span><br><span class="line"></span><br><span class="line">不能向后兼容</span><br><span class="line">插件兼容性</span><br><span class="line">多个插件冲突</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="jQuery-选择器"><a href="#jQuery-选择器" class="headerlink" title="jQuery 选择器"></a>jQuery 选择器</h4><ul><li><code>id</code>选择器</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;#box&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><code>class</code>选择器</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;.box&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>标记选择器</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;p&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><code>*</code> 代表所有标签</li></ul><h4 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h4><ul><li><code>[attribute]</code> 匹配包含给定属性的元素</li><li><code>[attribute=value]</code>  匹配给定的属性是某个特定值的元素</li><li><code>[attribute!=value]</code> 匹配给定的属性不是某个特定值的元素</li><li><code>[attribute^=value]</code>  匹配给定的属性是以某些值开始的元素</li><li><code>[attribute$=value]</code>  配给定的属性是以某些值结尾的元素</li><li><code>[attribute*=value]</code>  匹配给定的属性是以包含某些值的元素</li></ul><h4 id="位置选择器"><a href="#位置选择器" class="headerlink" title="位置选择器"></a>位置选择器</h4><p><code>:first</code>匹配第一个元素</p><p><code>:last</code>获取最后一个元素</p><p><code>:not</code> 去除所有与给定选择器匹配的元素</p><p><code>:even</code> 匹配所有索引值为偶数的元素，从 0 开始计数</p><p><code>:odd</code> 匹配所有索引值为奇数的元素，从 0 开始计数</p><p><code>:eq</code> 匹配一个给定索引值的元素</p><p><code>:gt</code> 匹配所有大于给定索引值的元素</p><p><code>:lt</code> 匹配所有小于给定索引值的元素</p><h4 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;选择器1 选择器2 ……&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="子代选择器"><a href="#子代选择器" class="headerlink" title="子代选择器"></a>子代选择器</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;选择器1&gt;选择器2&gt;……&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="选择器对象"><a href="#选择器对象" class="headerlink" title="选择器对象"></a>选择器对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;选择器&quot;</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">index</span>)</span>&#123;<span class="built_in">this</span>&#125;) 选择器对象的遍历</span><br><span class="line">$(<span class="string">&quot;选择器&quot;</span>).find() 找前面选择器匹配到的元素的子元素</span><br><span class="line">$(<span class="string">&quot;选择器&quot;</span>).not() 在前面选择器匹配到的元素中去除某个或某多个</span><br><span class="line">$(<span class="string">&quot;选择器&quot;</span>).add() 在前面选择器中在追加节点</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="子元素"><a href="#子元素" class="headerlink" title="子元素"></a>子元素</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:first-child</span> 匹配第一个子元素</span><br><span class="line"><span class="selector-pseudo">:last-child</span> 匹配最后一个子元素</span><br><span class="line"><span class="selector-pseudo">:first-of-type</span> 选择所有相同的元素名称的第一个兄弟元素</span><br><span class="line"><span class="selector-pseudo">:last-of-type</span> 选择所有相同的元素名称的最后一个兄弟元素</span><br><span class="line"></span><br><span class="line"><span class="selector-pseudo">:nth-child</span> 匹配其父元素下的第<span class="selector-tag">N</span>个子或奇偶元素</span><br><span class="line"><span class="selector-pseudo">:nth-last-child()</span> 选择所有他们父元素的第<span class="selector-tag">n</span>个子元素。计数从最后一个元素开始到第一个</span><br><span class="line"><span class="selector-pseudo">:nth-last-of-type()</span> 选择的所有他们的父级元素的第<span class="selector-tag">n</span>个子元素，计数从最后一个元素到第一个</span><br><span class="line"><span class="selector-pseudo">:nth-of-type()</span> 选择同属于一个父元素之下，并且标签名相同的子元素中的第<span class="selector-tag">n</span>个</span><br><span class="line"></span><br><span class="line"><span class="selector-pseudo">:only-child</span> 如果某个元素是父元素中唯一的子元素，那将会被匹配</span><br><span class="line"><span class="selector-pseudo">:only-of-type</span> 选择所有没有兄弟元素，且具有相同的元素名称的元素。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>表单</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">:input 匹配所有 input, textarea, select 和 button 元素</span><br><span class="line">:text 匹配所有的单行文本框</span><br><span class="line">:password 匹配所有密码框</span><br><span class="line">:radio 匹配所有单选按钮</span><br><span class="line"></span><br><span class="line">:checkbox 匹配所有复选框</span><br><span class="line">:submit 匹配所有提交按钮</span><br><span class="line">:image 匹配所有图像域</span><br><span class="line">:reset 匹配所有重置按钮</span><br><span class="line"></span><br><span class="line">:button 匹配所有按钮</span><br><span class="line">:file 匹配所有文件域</span><br><span class="line">:hidden 匹配所有隐藏域</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>表单对象属性</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:enabled</span> 匹配所有可用元素</span><br><span class="line"><span class="selector-pseudo">:disabled</span> 匹配所有禁用元素</span><br><span class="line"></span><br><span class="line"><span class="selector-pseudo">:checked</span> 匹配所有选中的被选中元素</span><br><span class="line"><span class="selector-pseudo">:selected</span> 匹配所有选中的<span class="selector-tag">option</span>元素</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="DOM操作"><a href="#DOM操作" class="headerlink" title="DOM操作"></a>DOM操作</h4><ol><li>查找获取</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text() - 设置或返回所选元素的文本内容</span><br><span class="line">html() - 设置或返回所选元素的内容</span><br><span class="line">val() - 设置或返回表单字段的值</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>内部插入</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">append() 向每个匹配的元素内部追加内容</span><br><span class="line">appendTo() 把所有匹配的元素追加到另一个指定的元素集合中</span><br><span class="line"></span><br><span class="line">prepend() 向每个匹配的元素内部前置内容</span><br><span class="line">prependTo() 把所有匹配的元素前置到另一个、指定的元素集合中</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>外部插入</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">after() 在每个匹配的元素之后插入内容</span><br><span class="line">before() 在每个匹配的元素之前插入内容</span><br><span class="line"></span><br><span class="line">insertAfter() 把所有匹配的元素插入到另一个、指定的元素集合的后面</span><br><span class="line">insertBefore() 把所有匹配的元素插入到另一个、指定的元素集合的前面</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>包裹</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wrap() 把所有匹配的元素用其他元素的结构化标记包裹起来</span><br><span class="line">unwrap() 这个方法将移出元素的父元素。</span><br><span class="line"></span><br><span class="line">wrapAll() 将所有匹配的元素用单个元素包裹起来</span><br><span class="line">wrapInner() 将每一个匹配的元素的子内容(包括文本节点)用一个HTML结构包裹起来</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>替换</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">replaceWith() 将所有匹配的元素替换成指定的HTML或DOM元素</span><br><span class="line">replaceAll() 用匹配的元素替换掉所有 selector匹配到的元素</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>删除</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">empty() 删除匹配的元素集合中所有的子节点</span><br><span class="line">remove() 从DOM中删除所有匹配的元素</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>克隆</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">clone() 克隆匹配的DOM元素并且选中这些克隆的副本</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="JQuery-事件"><a href="#JQuery-事件" class="headerlink" title="JQuery 事件"></a>JQuery 事件</h4><p>页面载入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//简写方式</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>事件绑定</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;#box&quot;</span>).on(<span class="string">&quot;click&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">/**/</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;#box&quot;</span>).off(<span class="string">&quot;click,mousemove&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="容器适应"><a href="#容器适应" class="headerlink" title="容器适应"></a>容器适应</h4><p>获取元素的宽高有以下几种方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(选择器).width() | innerWidth() | outerWidth()</span><br><span class="line">$(选择器).height() | innerHeight() | outerHeight()</span><br><span class="line"></span><br><span class="line">innerWidth()和innerHeight()是指元素里面内容的宽高加上内边距的宽高；</span><br><span class="line">outerWidth()和outerHeight()是指元素里面内容的宽高加上内边距的宽高和边框；</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>获取窗口的宽高的方法如下：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">window</span>).width()</span><br><span class="line">$(<span class="built_in">window</span>).height()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="标签样式操作"><a href="#标签样式操作" class="headerlink" title="标签样式操作"></a>标签样式操作</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$(选择器).css (样式属性名[,值])方法设置或返回被选元素的一个或多个样式 属性</span><br><span class="line"></span><br><span class="line">$(选择器).addClass(类别名)增加类别样式</span><br><span class="line"></span><br><span class="line">$(选择器).removeClass(类别名)去除类别样式</span><br><span class="line"></span><br><span class="line">$(选择器).toggleClass(类别名)交替使用类别样式：有这个类别样式就去除，没有就追加；</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="滑动"><a href="#滑动" class="headerlink" title="滑动"></a>滑动</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">show() 显示元素</span><br><span class="line">hide() 隐藏元素</span><br><span class="line"></span><br><span class="line">slidDown() 向下滑动显示</span><br><span class="line">slideUp() 向上滑动收起隐藏</span><br><span class="line">slideToggle() 交替滑动状态</span><br><span class="line"></span><br><span class="line">fadeIn() 淡入</span><br><span class="line">fadeOut() 淡出</span><br><span class="line">fadeTo() 动画到指定透明度</span><br><span class="line">fadeToggle() 交替淡出、淡入状态</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="自定义动画"><a href="#自定义动画" class="headerlink" title="自定义动画"></a>自定义动画</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">animate() 自定义动画</span><br><span class="line"></span><br><span class="line">stop() 停止所有在指定元素上正在运行的动画</span><br><span class="line"></span><br><span class="line">delay() 设置一个延时来推迟执行队列中之后的项目</span><br><span class="line"></span><br><span class="line">finish() 停止当前正在运行的动画，删除所有排队的动画，并完成匹配元素所有的动画</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="❤️❤️AJAX"><a href="#❤️❤️AJAX" class="headerlink" title="❤️❤️AJAX"></a>❤️❤️AJAX</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$.ajax()</span><br><span class="line"></span><br><span class="line">$.get() 通过远程 HTTP GET 请求载入信息</span><br><span class="line"></span><br><span class="line">$.post() 通过远程 HTTP POST 请求载入信息</span><br><span class="line"></span><br><span class="line">$.getJSON() 通过 HTTP GET 请求载入 <span class="built_in">JSON</span> 数据</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h4><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AJAX &#x3D; 异步 JavaScript 和 XML</span><br></pre></td></tr></table></figure><p>在浏览器中输入<code>url</code>地址请求服务器时，是通过<code>Ajax</code>发送<code>http</code>请求给服务器，服务的响应结果也是先返回给<code>Ajax</code>，先<code>Ajax</code>处理之后在返回给浏览器显示在页面。</p></blockquote><h4 id="XMLHttpRequest对象"><a href="#XMLHttpRequest对象" class="headerlink" title="XMLHttpRequest对象"></a>XMLHttpRequest对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一步：</span></span><br><span class="line">xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二步</span></span><br><span class="line">xhr.open(<span class="string">&quot;post&quot;</span>,<span class="string">&quot;test.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//第三步：</span></span><br><span class="line">xhr.setRequestHeader(<span class="string">&quot;Content-type&quot;</span>,<span class="string">&quot;application/x-www-form-urlencoded&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//第四步：</span></span><br><span class="line">xhr.send(<span class="string">&quot;a=1&amp;b=2&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//第五步：</span></span><br><span class="line">xhr.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(xhr.status==<span class="number">200</span> &amp;&amp; xhr.readyState==<span class="number">4</span>)&#123;</span><br><span class="line">         <span class="keyword">var</span> result=xhr.responseText;<span class="comment">//获取到结果</span></span><br><span class="line">alert(result);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="XML和HTML的区别"><a href="#XML和HTML的区别" class="headerlink" title="XML和HTML的区别"></a>XML和HTML的区别</h4><p><img src= "/count-goblin/img/loading.gif" data-lazy-src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d0bfea5388f34bc0af9ac65d13e78d98~tplv-k3u1fbpfcp-watermark.image" alt="img"></p><h4 id="get-和post"><a href="#get-和post" class="headerlink" title="get() 和post()"></a>get() 和post()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$.get(url,data,callback,dataType)</span><br><span class="line">$.post(url,data,callback,dataType)</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><code>AJAX</code>工作原理</p></blockquote><p><code>Ajax</code>的基本格式如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">url:<span class="string">&#x27;请求的资源&#x27;</span>,</span><br><span class="line">type:<span class="string">&#x27;请求方式get|post&#x27;</span>,</span><br><span class="line">data:<span class="string">&#x27;发送数据 名=值&amp;名=值&#x27;</span>,</span><br><span class="line">dataType:<span class="string">&#x27;回传值的类型&#x27;</span>,</span><br><span class="line">success:<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123; res接收返回值</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="❤️❤️HTTP"><a href="#❤️❤️HTTP" class="headerlink" title="❤️❤️HTTP"></a>❤️❤️HTTP</h3><p><code>HTTP</code>（超文本传输协议）是一种通信协议，它允许将超文本标记语言(<code>HTML</code>)文档从<code>Web</code>服务器传送到客户端的浏览器。</p><h4 id="HTTP消息结构"><a href="#HTTP消息结构" class="headerlink" title="HTTP消息结构"></a>HTTP消息结构</h4><ul><li><code>request line</code></li></ul><p>请求行：第一行必须是请求行，用来说明请求类型、要访问的资源以及使用的<code>HTTP</code>版本。</p><ul><li><code>header</code></li></ul><p>请求头：用来说明服务器要使用的附加信息。</p><ul><li><code>blank line</code></li></ul><p>空白行：请求头部与请求体之间必须有一个空白行，必不可少</p><ul><li><code>body</code></li></ul><p>请求体：也叫请求正文，可以添加任意的其他数据</p><p>状态行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Host接受请求的服务器地址，可以是：IP：端口 或 域名</span><br><span class="line">User-Agent发送请求的应用程序名称（浏览器信息）</span><br><span class="line">Connection指定与连接相关的属性，如：Connection:Keep-Alive</span><br><span class="line">Accept-Charset客户端可以接受的编码格式</span><br><span class="line">Accept-Encoding客户端可以接受的数据压缩格式</span><br><span class="line">Accept-Language客户端可以接受的语言</span><br><span class="line">referer当前请求来自哪个链接（防盗连）</span><br><span class="line">content-type请求的文件类型</span><br><span class="line">cookie该网站相关的会话信息</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="url请求过程"><a href="#url请求过程" class="headerlink" title="url请求过程"></a>url请求过程</h4><ol><li>首先客户端与服务器需要建立连接。</li><li>建立连接后，客户端发送一个请求给服务器，请求方式的格式为：统一资源标识符（<code>URL</code>）、协议版本号，客户端信息和可能的内容。</li><li>服务器接到请求后，给予相应的响应信息，其格式为<strong>一个状态行</strong>，包括信息的<strong>协议版本号、一个成功或错误的代码</strong>（<code>status Code</code>状态码），后边<strong>服务器信息</strong>、<strong>实体信息</strong>和可能的内容。</li><li>客户端接收完, 服务器所返回的信息后，与服务器断开连接。</li></ol><blockquote><p>如果在以上过程中的某一步出现错误，那么产生错误的信息将返回到客户端。对于用户来说，这些过程是由<code>HTTP</code>自己完成的，用户只要用鼠标点击，等待信息显示就可以了。</p></blockquote><h3 id="❤️❤️预加载"><a href="#❤️❤️预加载" class="headerlink" title="❤️❤️预加载"></a>❤️❤️预加载</h3><p>预加载：将所有所需的资源提前请求加载到本地，后面在需要使用就直接从缓存中存取资源</p><ol><li>使用<code>image</code>对象</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display:none&quot;</span>/&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>使用<code>image</code>对象</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> image = <span class="keyword">new</span> Image();</span><br><span class="line">image.src=<span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>使用<code>XMLHttpRequest</code>对象</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">xmlhttprequest.onreadystatechange=callback;</span><br><span class="line">xmlhttprequest.onprogress=progressCallback;</span><br><span class="line"></span><br><span class="line">xmlhttprequest.open(<span class="string">&quot;GET&quot;</span>,<span class="attr">http</span>:<span class="comment">//xx.jpg,true);</span></span><br><span class="line"></span><br><span class="line">xmlhttprequest.send();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(xmlhttprequest.readyState=<span class="number">4</span> &amp;&amp; xmlhttprequest.status==<span class="number">200</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> responseText=xmlhttprequest.responseText;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;Request was unsuccessful&quot;</span> + xmlhttprequest.status);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">progressCallback</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">  c=e||event;</span><br><span class="line">  <span class="keyword">if</span>(e.lengthComputable)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Received&quot;</span>+e.loaded+<span class="string">&quot;of&quot;</span>+e.total+<span class="string">&quot;bytes&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="❤️❤️懒加载"><a href="#❤️❤️懒加载" class="headerlink" title="❤️❤️懒加载"></a>❤️❤️懒加载</h3><p>首屏加载，技术上显示要用的技术就是图片懒加载，即到可视区域再加载。</p><h3 id="❤️❤️性能优化"><a href="#❤️❤️性能优化" class="headerlink" title="❤️❤️性能优化"></a>❤️❤️性能优化</h3><h4 id="JavaScript代码优化"><a href="#JavaScript代码优化" class="headerlink" title="JavaScript代码优化"></a>JavaScript代码优化</h4><ol><li>代码与结构分离</li><li>样式与结构的分离</li><li>数据与代码分离</li></ol><ul><li><code>AMD：Asynchronous Module Definition</code>，即异步模块加载机制。</li><li><code>CMD:Common Module Definition</code>，即通用模块定义规范</li><li>导出<code>（export）</code>与导入<code>（import）</code>两个模块</li></ul><h4 id="提升文件加载速度"><a href="#提升文件加载速度" class="headerlink" title="提升文件加载速度"></a>提升文件加载速度</h4><ol><li>合并<code>JavaScript</code>代码，尽可能少的使用<code>script</code>标签。</li><li>无堵塞加载<code>JavaScript</code>。</li><li>动态创建<code>script</code>标签来加载</li></ol><h3 id="❤️❤️webpack"><a href="#❤️❤️webpack" class="headerlink" title="❤️❤️webpack"></a>❤️❤️webpack</h3><p><code>webpack</code>是一个<code>module bundler</code>（模块构建工具），由于 <code>JavaScript</code> 应用程序的复杂性不断增加，构建工具已成为 <code>web</code> 开发中不可或缺的一部分。它帮助我们去打包、编译和管理项目需要的众多资源文件和依赖库。</p><p><code>webpack</code>支持<code>CommonJS</code>、<code>AMD和ES6</code>模块系统，并且兼容多种<code>JS</code>书写规范，可以处理模块间的依赖关系，所以具有更强大的<code>JS</code>模块化的功能，它能压缩图片，对<code>CSS、js</code>文件进行语法检查、压缩、编译打包。</p><h4 id="webpack的特点"><a href="#webpack的特点" class="headerlink" title="webpack的特点"></a>webpack的特点</h4><ol><li>可以很好的用于单页应用</li><li>同时支持 <code>require()</code> 和 <code>import</code> 模块语法</li><li>允许非常前沿的 <code>code splitting</code>（代码分割） 特性</li><li>热加载可以让 <code>React、Vue.js</code> 和其它类似框架的本地开发更快</li><li>它是目前最受欢迎的构建工具</li></ol><h4 id="webpack的缺点"><a href="#webpack的缺点" class="headerlink" title="webpack的缺点"></a>webpack的缺点</h4><ol><li>不适合 <code>web</code> 开发的初学者</li><li>对于 <code>CSS</code>、图片和其它非 <code>JS</code> 资源文件时，需要先混淆处理</li><li>文档不够完善</li><li>变化很大，不同版本的使用方法存在较大差异</li></ol><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ol><li>全局安装：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//安装全局webpack</span></span><br><span class="line">npm install webpack -g</span><br><span class="line"></span><br><span class="line"><span class="comment">//安装全局webpack-cli</span></span><br><span class="line">npm install webpack-cli -g</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="webpack基本应用"><a href="#webpack基本应用" class="headerlink" title="webpack基本应用"></a>webpack基本应用</h4><blockquote><p><code>SPA（single page web application）</code> 单页应用程序，是<code>webpack</code>打包的典型应用</p></blockquote><p>示例，主要的几个部分组成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">index.html主文件</span><br><span class="line">JS文件可能有多个JS文件，可通过webpack合并打包为一个文件</span><br><span class="line">CSS文件可能有多个CSS文件，可通过webpack合并打包为一个文件</span><br><span class="line">图片可通过webpack压缩优化</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//a.js</span></span><br><span class="line"><span class="keyword">var</span> run=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//node CommonJS模块</span></span><br><span class="line"><span class="comment">//module.exports.run=run;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6语法</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;run&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//b.js</span></span><br><span class="line"><span class="keyword">var</span> play=<span class="function"><span class="keyword">function</span>(<span class="params">arg</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arg);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//node CommonJS模块</span></span><br><span class="line"><span class="comment">//module.exports.play=play;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6语法</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;play&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="comment">//node CommonJS 引入js模块</span></span><br><span class="line"><span class="comment">//var a=require(&quot;./a.js&quot;);</span></span><br><span class="line"><span class="comment">//var b=require(&quot;./b.js&quot;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6 引入js模块</span></span><br><span class="line"><span class="keyword">import</span> a <span class="keyword">from</span> <span class="string">&quot;./a.js&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> b <span class="keyword">from</span> <span class="string">&quot;./b.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> txt = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">a.run();</span><br><span class="line">b.play(txt);</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dist&#96;文件夹（存放打包后的文件，可以先不创建，打包时可以自动创建）-&#96;dis,dist,bulit</span><br></pre></td></tr></table></figure><p>打包：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">webpack --mode development</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="配置文件入门"><a href="#配置文件入门" class="headerlink" title="配置文件入门"></a>配置文件入门</h4><p>默认的配置文件名为：<code>webpack.config.js</code></p><blockquote><p>核心概念</p></blockquote><p>一个配置文件的基本结构如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//配置项</span></span><br><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">    <span class="comment">//入口  </span></span><br><span class="line">    entry:<span class="string">&quot;.....&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出配置     </span></span><br><span class="line">    output:&#123;......&#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//模块    </span></span><br><span class="line">    <span class="built_in">module</span>: &#123;......&#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//解析         </span></span><br><span class="line">    resolve：&#123;......&#125;,        </span><br><span class="line"></span><br><span class="line">    <span class="comment">//插件（数组）</span></span><br><span class="line">    plugins:[......],</span><br><span class="line"></span><br><span class="line">    <span class="comment">//开发服务器    </span></span><br><span class="line">    devServer:&#123;......&#125;  </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">entry入口 定义入口文件，默认入口文件：./src/index.js</span><br><span class="line">output输出 定义出口文件，默认出口文件：./dist/main.js</span><br><span class="line">resolve解析 路径映射、省略后缀名等</span><br><span class="line"><span class="built_in">module</span>模块 定义不同loader，让 webpack 能够处理非 JavaScript 模块</span><br><span class="line">plugins插件 扩展webpack功能</span><br><span class="line">devServer开发服务器 用于配置webpack-dev-server选项</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>设置配置文件自动完成：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack是基于node构建的，只支持CommonJS模块</span></span><br><span class="line"><span class="built_in">module</span>.exports=&#123;  </span><br><span class="line">    <span class="comment">//入口配置</span></span><br><span class="line">    entry:<span class="string">&#x27;./src/js/main.js&#x27;</span>,  </span><br><span class="line"></span><br><span class="line">    <span class="comment">//出口配置</span></span><br><span class="line">    output:&#123;  </span><br><span class="line">        path:__dirname +<span class="string">&#x27;/dist&#x27;</span>, <span class="comment">//输出目录  __dirname:本文件所在硬盘路径（node全局变量）</span></span><br><span class="line">        filename:<span class="string">&#x27;js/main.js&#x27;</span> <span class="comment">//文件名称（可以有子目录）</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>修改<code>webpack.json</code>文件</p><p>在<code>webpack.json</code>中的<code>&quot;scripts&quot;</code>下增加：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;  </span><br><span class="line">    <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;webpack --mode development&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build&quot;</span>: <span class="string">&quot;webpack --mode production&quot;</span>  </span><br><span class="line">  &#125;,  </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行打包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="❤️❤️entry-和-output"><a href="#❤️❤️entry-和-output" class="headerlink" title="❤️❤️entry 和 output"></a>❤️❤️entry 和 output</h3><ol><li><code>entry</code> 入口配置 是指页面中的入口文件。也就是打包从哪个文件开始。默认入口文件：<code>./src/index.js</code></li><li><code>output</code> 出口配置 是指生成的文件输出到哪个地方去，默认出口文件：<code>./dist/main.js</code>，主要有以下属性：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">path输出路径</span><br><span class="line">filename输出文件名</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//入口</span></span><br><span class="line">entry: &#123;   </span><br><span class="line">    index: <span class="string">&#x27;./src/js/main.js&#x27;</span>,  </span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line">output: &#123;</span><br><span class="line">path: __dirname + <span class="string">&quot;/dist&quot;</span>,<span class="comment">//打包后的文件存放的地方</span></span><br><span class="line">filename:<span class="string">&quot;main.js&quot;</span><span class="comment">//打包后输出的文件名</span></span><br><span class="line">&#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="module"><a href="#module" class="headerlink" title="module"></a>module</h4><p><code>webpack</code> 只能打包<code>js</code>文件（只理解 <code>JavaScript</code>语法），无法识别其他语法的文件，如果要让<code>webpack</code>打包其他文件，首先需要让<code>webpack</code>识别不同文件，这就需要特别的模块，这种模块统称为<code>loader</code>。</p><p><code>loader</code>分类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">转换编译script-loader，babel-loader，ts-loader，coffee-loader</span><br><span class="line">处理样式style-loader，css-loader，less-loader，sass-loader，postcss-loader</span><br><span class="line">处理文件raw--loader，url-loader，file-loader</span><br><span class="line">处理数据csv-loader，xml-loader</span><br><span class="line">处理模板语言html-loader，pug-loader，jade-loader，markdown-loader</span><br><span class="line">清理和测试mocha-loader，eslint-loader</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>常用<code>loader</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">css-loader解析css语句</span><br><span class="line">style-loader将css-loader解析后的文本，添加&lt;style&gt;标签</span><br><span class="line"></span><br><span class="line">babel-loader将ES6+、JSX语法转成ES5低版本语法</span><br><span class="line"></span><br><span class="line">url-loader</span><br><span class="line"></span><br><span class="line">url-loader对未设置或者小于limit byte设置的图片以base64的格式进行转换 </span><br><span class="line">对于大于limit byte的图片用file-loader进行解析</span><br><span class="line"></span><br><span class="line">file-loader</span><br><span class="line"></span><br><span class="line">解析项目中的url引入（包括img的src和background的url） </span><br><span class="line">修改打包后文件引用路径，使之指向正确的文件</span><br><span class="line"></span><br><span class="line">less-loaderless编译器</span><br><span class="line"></span><br><span class="line">vue-loader</span><br><span class="line"></span><br><span class="line">Vue也推出了自己的vue-loader，可以方便的打包 .vue文件 的代码</span><br><span class="line">在vue-cli（快速构建单页应用的脚手架）中得到应用。</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">css loader</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="keyword">import</span> a <span class="keyword">from</span> <span class="string">&quot;./a.js&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> b <span class="keyword">from</span> <span class="string">&quot;./b.js&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> txt = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">a.run();</span><br><span class="line">b.play(txt);</span><br><span class="line"></span><br><span class="line"><span class="comment">//打包css文件</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./style.css&quot;</span>;  <span class="comment">//注意：是相对路径</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>安装<code>loader</code>（<code>loader</code>也是依赖包，需要安装）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install css-loader --save-dev</span><br><span class="line">npm install style-loader --save-dev</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在<code>module</code>中定义<code>ccs</code>模块相关的配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">        &#123;</span><br><span class="line">            test: <span class="regexp">/.css$/</span>, <span class="comment">//正则</span></span><br><span class="line">            <span class="comment">//把css添加到html的style标签里(style-loader要先加载)</span></span><br><span class="line">            loader: [<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>],  <span class="comment">//loader或者use</span></span><br><span class="line">            exclude: <span class="regexp">/node_modules/</span>, <span class="comment">//正则 排除node_modules目录</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">babel loader</span><br></pre></td></tr></table></figure><p><code>babel</code>是一个 <code>js</code> 编译器，它通过语法转换器支持最新版本的 <code>JavaScript</code> （包括<code>JSX、TypeScript</code>等新语法）。 这些插件允许你立刻使用新语法，无需等待浏览器支持。</p></blockquote><p>使用<code>Babel</code>首先要配置 <code>.babelrc</code> 文件，该文件用来设置转码规则和插件（<code>json</code>格式），存放在项目的根目录下。</p><p><code>tips</code>：在<code>linux</code>系统中，<code>rc</code>结尾的文件通常代表运行时自动加载的文件、配置等等。</p><p>在<code>.babelrc</code>配置文件中，主要是对预设(<code>presets</code>) 和 插件(<code>plugins</code>) 进行配置。<code>.babelrc</code>配置文件一般为如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="string">&quot;presets&quot;</span>: [</span><br><span class="line">     [<span class="string">&quot;env&quot;</span>,&#123;<span class="string">&quot;modules&quot;</span>:<span class="literal">false</span>&#125;] <span class="comment">//modules是配置项</span></span><br><span class="line">   ],  </span><br><span class="line"><span class="string">&quot;plugins&quot;</span>: [</span><br><span class="line">[ <span class="string">&quot;transform-runtime&quot;</span>,&#123;<span class="string">&quot;polyfill&quot;</span>:<span class="literal">false</span>&#125;]  <span class="comment">//polyfill是配置项</span></span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>预设 对<code>js</code>最新的语法糖进行编译，并不负责转译新增的<code>api</code>和全局对象。</p></blockquote><blockquote><p>插件 控制如何转换代码，<code>babel</code>默认只转换新的<code>js</code>语法，而不转换新的<code>API</code></p></blockquote><h4 id="plugins"><a href="#plugins" class="headerlink" title="plugins"></a>plugins</h4><p>插件（<code>plugins</code>）可以扩展<code>webpack</code>的功能，<code>loader</code>不能做的处理都能交给<code>plugin</code>来做。</p><p>如：<code>HtmlWebpackPlugin</code> 插件简化了<code>HTML</code>文件的创建，可以通过模板文件，生成一个<code>HTML</code>文件</p><h4 id="resolve"><a href="#resolve" class="headerlink" title="resolve"></a>resolve</h4><p><code>resolve</code>（译：解析）配置<code>webpack</code>如何寻找模块对应的文件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">alias（译：别名）通过别名将原来导入路径映射成一个新的导入路径</span><br><span class="line">extensions（译：扩展）数组 导入模块时，可以省略的文件后缀名</span><br><span class="line"></span><br><span class="line">resolve: &#123;</span><br><span class="line">    alias: &#123;</span><br><span class="line">        <span class="string">&quot;@&quot;</span>: path.join(__dirname,<span class="string">&quot;./src&quot;</span>) <span class="comment">//将项目根目录下的src目录，映射为 @</span></span><br><span class="line">    &#125;,</span><br><span class="line">    extensions:[<span class="string">&quot;.js&quot;</span>, <span class="string">&quot;.json&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其他配置项示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">devtool是否生成以及如何生成sourcemap</span><br><span class="line">devserver开启一个本地开发服务器</span><br><span class="line">watch监听文件变化并自动打包</span><br><span class="line">watchoption用来定制watch模式的选项</span><br><span class="line">performance打包后命令行如何展示性能提示，如果超过某个大小是警告还是报错</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="webpack-dev-server"><a href="#webpack-dev-server" class="headerlink" title="webpack-dev-server"></a>webpack-dev-server</h4><blockquote><p><code>webpack-dev-server</code>是一个小型的<code>web</code>服务器，可以自动监视项目文件的变化，自动刷新浏览器，其<code>HMR</code>（<code>Hot Module Replacement</code> 热模块替换）方式只替换更新的部分，而不是重载页面，大大提高了刷新效率。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">需要本地安装 webpack和webpack-cli</span><br><span class="line">npm install webpack --save-dev</span><br><span class="line">npm install webpack-cli --save-dev</span><br><span class="line">npm install webpack-dev-server --save-dev</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>webpack.config.js</code>配置文件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> path=<span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//HtmlWebpackPlugin插件</span></span><br><span class="line"><span class="keyword">let</span> HtmlWebpackPlugin=<span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> htmlPlugin=<span class="keyword">new</span> HtmlWebpackPlugin(&#123;  </span><br><span class="line">    filename:<span class="string">&quot;index.html&quot;</span>, <span class="comment">//生成的新文件</span></span><br><span class="line">    template:__dirname+<span class="string">&quot;/src/index_temp.html&quot;</span>,  <span class="comment">//模板文件</span></span><br><span class="line">    minify:&#123; <span class="comment">//压缩</span></span><br><span class="line">        removeComments:<span class="literal">true</span>,  <span class="comment">//刪除注释</span></span><br><span class="line">        collapseWhitespace:<span class="literal">true</span>  <span class="comment">//合并空格</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置项</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">//输入</span></span><br><span class="line">    entry:<span class="string">&#x27;./src/js/main.js&#x27;</span>,<span class="comment">//主入口文件</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">    output: &#123;</span><br><span class="line">        path: __dirname + <span class="string">&quot;/dist&quot;</span>,<span class="comment">//打包后的文件存放的地方</span></span><br><span class="line">        filename:<span class="string">&quot;main.js&quot;</span><span class="comment">//打包后输出的文件名</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//模块</span></span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/.css$/</span>, <span class="comment">//正则 解析css文件</span></span><br><span class="line">                <span class="comment">//把css添加到html的style标签里(style-loader要先加载)</span></span><br><span class="line">                use: [<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>],</span><br><span class="line">                exclude: <span class="regexp">/node_modules/</span>, <span class="comment">//正则 必须要写exclude！！</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        use: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>, <span class="comment">//正则 必须要写exclude！！</span></span><br><span class="line">    &#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//插件</span></span><br><span class="line">    plugins:[</span><br><span class="line">        htmlPlugin        </span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    <span class="comment">//解析</span></span><br><span class="line">    resolve: &#123;</span><br><span class="line">        alias: &#123;</span><br><span class="line">            <span class="string">&quot;@&quot;</span>: path.join(__dirname,<span class="string">&quot;./src&quot;</span>) <span class="comment">//将项目根目录下的src目录，映射为 &quot;@&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        extensions:[<span class="string">&#x27;.js&#x27;</span>, <span class="string">&#x27;.json&#x27;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//开发服务器</span></span><br><span class="line">    devServer: &#123;</span><br><span class="line">        inline:<span class="literal">true</span>,<span class="comment">//支持dev-server自动刷新</span></span><br><span class="line">        port:<span class="string">&quot;8080&quot;</span>,<span class="comment">//端口</span></span><br><span class="line">        open:<span class="literal">true</span>,<span class="comment">//自动打开默认浏览器</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>webpack-dev-serve.cmd</code>是定义在<code>.bin</code>目录中的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;webpack-dev-server --hot&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build&quot;</span>: <span class="string">&quot;webpack --mode production&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm start</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="❤️❤️vue"><a href="#❤️❤️vue" class="headerlink" title="❤️❤️vue"></a>❤️❤️vue</h3><h4 id="MVC模式"><a href="#MVC模式" class="headerlink" title="MVC模式"></a>MVC模式</h4><p><code>MVC</code>模式是移动最广泛的软件架构之一，把应用程序强制性地划分为三部分：模型（<code>Model</code>）、视图（<code>View</code>）和控制器（<code>Controller</code>）。</p><h4 id="MVVM模式"><a href="#MVVM模式" class="headerlink" title="MVVM模式"></a>MVVM模式</h4><p><code>MVVM</code>模式是把<code>MVC</code>模式的<code>Controller改成ViewModel</code>。<code>View</code>的变化会自动更新<code>ViewModel，ViewModel</code>的变化也会自动同步到<code>View</code>上显示。</p><h4 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h4><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">el 把 Vue 实例挂载到DOM元素上，通过id绑定html元素</span><br><span class="line">data 数据对象，Vue实例的数据（注意：数据不要与methods中的方法重名）</span><br><span class="line">methods 事件对象，包含事件所要触发的函数（注意：方法名不要与data中的数据重名）</span><br><span class="line">computed 计算属性</span><br><span class="line">watch 监听器</span><br><span class="line">directives 自定义指令</span><br><span class="line">钩子（hook）函数（8个） hook（钩子）函数，不同生命周期引发的动作</span><br><span class="line">路由钩子函数（3个） 路由组件在不同状态时触发</span><br><span class="line">components 组件容器</span><br><span class="line">template 定义模板，可以是字符串，也可以是”#“选择器</span><br><span class="line">props 用于接收来自父组件的数据</span><br><span class="line">router 路由</span><br><span class="line">store vuex 状态</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="实例属性-方法"><a href="#实例属性-方法" class="headerlink" title="实例属性/方法"></a>实例属性/方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">vm.$elVue 实例使用的根 DOM 元素</span><br><span class="line">vm.$dataVue的data配置项</span><br><span class="line">vm.$options用于当前 Vue 实例的初始化选项</span><br><span class="line"></span><br><span class="line">vm.$props当前组件接收到的 props 对象</span><br><span class="line">vm.$parent父实例（如果当前实例有的话）</span><br><span class="line"></span><br><span class="line">vm.$root当前组件树的根 Vue 实例</span><br><span class="line">vm.$children当前实例的直接子组件</span><br><span class="line"></span><br><span class="line">vm.$refs原生DOM元素或子组件注册引用信息</span><br><span class="line">vm.$slots用来访问被插槽分发的内容</span><br><span class="line"></span><br><span class="line">vm.$router全局路由（vue-router插件）</span><br><span class="line">vm.$storevuex 状态对象（vuex插件）</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">vm.$emit()子组件可以使用 $emit 触发父组件的自定义事件</span><br><span class="line">vm.$set()Vue.set的别名</span><br><span class="line"></span><br><span class="line">设置对象的属性， 这个方法主要用于避开 Vue 不能检测属性被添加的限制</span><br><span class="line"></span><br><span class="line">vm.$watch侦听数据变化</span><br><span class="line"></span><br><span class="line">vm.$on()监听当前实例上的自定义事件。事件可以由vm.$emit触发。回调函数会接收所有传入事件触发函数的额外参数。</span><br><span class="line"></span><br><span class="line">vm.$mount可以使用 vm.$mount() 手动挂载（Vue 实例化时没有 el 选项）</span><br><span class="line"></span><br><span class="line">vm.$destroy完全销毁一个实例。清理它与其它实例的连接，解绑它的全部指令及事件监听器。</span><br><span class="line"></span><br><span class="line">触发 beforeDestroy 和 destroyed 的钩子。</span><br><span class="line"></span><br><span class="line">属性绑定指令</span><br><span class="line"></span><br><span class="line">v-bind动态改变dom标签上的属性&lt;br &#x2F;&gt;v-bind :class&#x3D;&quot;&quot; 简写 :class&#x3D;&quot;&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><p>4个阶段：<code>创建→挂载→更新→销毁</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">beforeCreate实例创建前</span><br><span class="line"></span><br><span class="line">created实例创建后初始化数据（Ajax数据请求，获取Vuex状态、路由切换等）</span><br><span class="line"></span><br><span class="line">beforeMount载入前</span><br><span class="line"></span><br><span class="line">mounted载入后需要操作DOM时（应用第三方插件等）</span><br><span class="line"></span><br><span class="line">beforeUpdate更新前</span><br><span class="line"></span><br><span class="line">updated更新后通过事件修改数据、v-model引发数据变化、AJAX异步更新数据</span><br><span class="line"></span><br><span class="line">beforeDestroy实例销毁前</span><br><span class="line"></span><br><span class="line">destroyed实例销毁后切换路由（组件将被销毁）</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h4><blockquote><p>多次访问计算属性会立即返回之前的计算结果，而不必再次执行函数。</p></blockquote><blockquote><p>计算属性具有缓存</p></blockquote><h4 id="数组的更新检查"><a href="#数组的更新检查" class="headerlink" title="数组的更新检查"></a>数组的更新检查</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">push()、pop()、shift()、unshift()</span><br><span class="line">splice()、sort()、reverse()</span><br><span class="line"></span><br><span class="line">变异方法，可触发视图更新</span><br><span class="line"></span><br><span class="line">filter(), concat() 和 slice()</span><br><span class="line"></span><br><span class="line">非变异方法，不触发视图更新</span><br><span class="line">它们可以返回新数组，用新数组替换旧数组，就可以刷新视图</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="事件对象-1"><a href="#事件对象-1" class="headerlink" title="事件对象"></a>事件对象</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">event.type触发的事件类型</span><br><span class="line">event.target触发事件的HTML元素</span><br><span class="line">event.preventDefault( )阻止事件的默认行为</span><br><span class="line">event.stopPropagation( )阻止事件冒泡</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Vue组件"><a href="#Vue组件" class="headerlink" title="Vue组件"></a>Vue组件</h4><ol><li>创建组件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myTemp=&#123;</span><br><span class="line">template:<span class="string">&#x27;#temp&#x27;</span>, <span class="comment">//模板id</span></span><br><span class="line">data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">//必须为函数(闭包)</span></span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="comment">//必须有return，返回值为对象&#123;&#125;</span></span><br><span class="line">        title:<span class="string">&quot;dadaqianduan&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>注册组件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在components配置项中注册组件</span></span><br><span class="line"><span class="keyword">let</span> app=<span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="string">&quot;#box&quot;</span>,</span><br><span class="line">    components：&#123;myTemp&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局注册组件，还可以使用Vue.component方法（仅限全局注册，不建议使用）</span></span><br><span class="line">Vue.component(<span class="string">&#x27;myTemp&#x27;</span>，MyTemp）；</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>使用组件</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--在Vue实例中使用组件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;box&#x27;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--组件名如果用驼峰定义，改为短横线命名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-temp</span>&gt;</span><span class="tag">&lt;/<span class="name">my-temp</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>事件通信</li></ol><ul><li>父子组件之间的数据操作，是通过<code>props</code>属性和<code>$emit()</code>方法来实现的</li></ul><h4 id="路由使用"><a href="#路由使用" class="headerlink" title="路由使用"></a>路由使用</h4><blockquote><p>定义路由包括路由路径（<code>path</code>）、路由名称（<code>name</code>）、路由组件对象（<code>component</code>）</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">&#x27;/&#x27;</span>,        <span class="comment">// 路由路径 </span></span><br><span class="line">      name: <span class="string">&#x27;home&#x27;</span>,     <span class="comment">// 路由名称</span></span><br><span class="line">      component: Home   <span class="comment">// 路由组件对象 </span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">&#x27;/users&#x27;</span>,</span><br><span class="line">      name: <span class="string">&#x27;Users&#x27;</span>,</span><br><span class="line">      component: UserComponent</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">      name: <span class="string">&#x27;about&#x27;</span>,  </span><br><span class="line">      component: <span class="function">() =&gt;</span> <span class="keyword">import</span>( <span class="string">&#x27;./views/About.vue&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>动态路由</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">routes: [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&#x27;/users/:username/post/:postid&#x27;</span>,</span><br><span class="line">    name: <span class="string">&#x27;Users&#x27;</span>,</span><br><span class="line">    component: UserComponent,</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">/user/:username</span><br><span class="line">/user/tom</span><br><span class="line">&#123;<span class="attr">username</span>:<span class="string">&#x27;tom&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">/user/:username/post/:postId</span><br><span class="line">/user/tom/post/<span class="number">3</span></span><br><span class="line">&#123;<span class="attr">username</span>:<span class="string">&#x27;tom&#x27;</span>,<span class="attr">postId</span>:<span class="string">&#x27;3&#x27;</span>&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="路由导航"><a href="#路由导航" class="headerlink" title="路由导航"></a>路由导航</h4><ol><li>路由导航守卫</li></ol><p>什么是路由导航守卫可以简单理解为路由组件的生命周期回调函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 路由导航守卫</span></span><br><span class="line"><span class="comment">// 作用：在第一次进入当前路由组件之前被调用</span></span><br><span class="line"><span class="comment">// 使用场景：获取ajax数据</span></span><br><span class="line"><span class="function"><span class="title">beforeRouteEnter</span>(<span class="params">to, <span class="keyword">from</span>, next</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// to：表示要进入的路由组件</span></span><br><span class="line">    <span class="comment">// from：表示将要离开的路由组件</span></span><br><span class="line">    <span class="comment">// next：表示后续操作函数</span></span><br><span class="line">    <span class="comment">// 此时还未进入到组件中，故不能使用this获取当前组件的实例</span></span><br><span class="line">    next(<span class="function"><span class="keyword">function</span>(<span class="params">app</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 进入到当前组件后，才执行的回调</span></span><br><span class="line">        <span class="comment">// 此时回调参数 app 表示当前组件的实例对象</span></span><br><span class="line">        axios.get(<span class="string">&#x27;/users/&#x27;</span> + app.id).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            app.user = res.data.data;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">beforeRouteUpdate</span>(<span class="params">to, <span class="keyword">from</span>, next</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 此时，可以使用this表示当前组件对象</span></span><br><span class="line">    <span class="keyword">const</span> app = <span class="built_in">this</span>;</span><br><span class="line">    <span class="comment">// 发送ajax请求</span></span><br><span class="line">    <span class="comment">// this表示切换前的状态</span></span><br><span class="line">    <span class="comment">// to表示要切换到的路由对象 route</span></span><br><span class="line">    axios.get(<span class="string">&#x27;/users/&#x27;</span> + to.params.id).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        app.user = res.data.data;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 执行后续</span></span><br><span class="line">    next();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>编程式路由导航</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">    <span class="function"><span class="title">login</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(登陆成功)&#123;</span><br><span class="line">        <span class="comment">//实现页面跳转</span></span><br><span class="line">        <span class="built_in">this</span>.$router.push(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>push()</li></ol><blockquote><p>跳转到指定的路由地址， 并把当前地址写入到history中，参数可以是字符串路径或描述地址信息的对象</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">字符串router.push(&#39;home&#39;)</span><br><span class="line">对象router.push(&#123;path:&#39;home&#39;&#125;)</span><br><span class="line">命名的路由router.push(&#123;name:user,params:&#123;userId:1&#125;&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li><code>replace( )</code>：跳转到指定路由，它不会向 <code>history</code> 添加新记录，而是替换掉当前的 <code>history</code> 记录。</li><li>全局路由导航守卫</li></ol><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局路由导航守卫</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;  </span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">children: [</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        component: 路由名</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">&quot;路径名&quot;</span>,</span><br><span class="line">        component: 路由名</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="命名视图"><a href="#命名视图" class="headerlink" title="命名视图"></a>命名视图</h4><blockquote><p>使用<code>&lt;router-view&gt;</code> 可以使用 <code>name</code> 属性为其设置名称，即命名路由的视图简称命名视图。</p></blockquote><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-view&#x2F;&gt; </span><br><span class="line">&lt;router-view name&#x3D;&quot;content&quot;&gt;&lt;&#x2F;router-view&gt; </span><br><span class="line">import About from &#39;.&#x2F;views&#x2F;About.vue&#39;;</span><br><span class="line">routes: [  </span><br><span class="line">&#123;</span><br><span class="line">  path: &quot;&#x2F;about&quot;,</span><br><span class="line">  name: &quot;about&quot;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    default: About,</span><br><span class="line">    content: UserComponent</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>本文转自作者：魔王哪吒<br>链接：<a href="https://juejin.cn/post/6925197705832562696">https://juejin.cn/post/6925197705832562696</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rxjs 异步编程数据流</title>
      <link href="/count-goblin/2021/01/28/Rxjs%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E6%95%B0%E6%8D%AE%E6%B5%81/"/>
      <url>/count-goblin/2021/01/28/Rxjs%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E6%95%B0%E6%8D%AE%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\count-goblin\assets\css\APlayer.min.css"><script src="\count-goblin\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>Rxjs是针对异步数据流编程的工具，或者是响应式扩展编程，我们学习过Angular的小伙伴都知道，在angular中引入Rxjs的目的就是为了异步的可控和简化</p></blockquote><h3 id="首先先看看我们组件如何从服务中获取数据"><a href="#首先先看看我们组件如何从服务中获取数据" class="headerlink" title="首先先看看我们组件如何从服务中获取数据"></a>首先先看看我们组件如何从服务中获取数据</h3><p>开始之前，我们先定义一个asynchronousProgramming的服务，供组件调用；</p><h3 id="1、同步获取"><a href="#1、同步获取" class="headerlink" title="1、同步获取"></a>1、同步获取</h3><p>首先在服务中定义一个方法，过一秒返回一个数据，然后在组件中直接调用，看看是否能不能获取到数据；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一步</span></span><br><span class="line"><span class="function"><span class="title">getDate</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 第二步</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 第四步</span></span><br><span class="line">      <span class="keyword">const</span> userName = <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line">    &#125;, <span class="number">1500</span>);</span><br><span class="line">    <span class="comment">// 第三步 ，执行到此处时，后面没有程序可以执行，直接跳出，所以外界获取时会报undefined</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>在组件中调用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 1、同步 直接获取数据，无法获取，显示undefined</span><br><span class="line">const data1 &#x3D; this.asynchronousProgramming.getDate();</span><br><span class="line">console.log(data1);</span><br></pre></td></tr></table></figure><p><img src= "/count-goblin/img/loading.gif" data-lazy-src="https://pic4.zhimg.com/v2-03e4d37efe653fca73b7c33ceec7471b_b.png" alt="img"></p><p>同步方法获取数据</p><h3 id="2、回调获取"><a href="#2、回调获取" class="headerlink" title="2、回调获取"></a>2、回调获取</h3><p>回调获取就是直接在同步获取的基础上，增加一个回调方法即可；操作方便也比较简单</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 通过回调解决</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="title">getDataByCallBack</span>(<span class="params">res</span>)</span> &#123; <span class="comment">// res就是回调方法</span></span><br><span class="line">   <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">     <span class="keyword">const</span> userName = <span class="string">&#x27;张三--通过回调获取&#x27;</span>;</span><br><span class="line">     res(userName);</span><br><span class="line">   &#125;, <span class="number">1500</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>在组件中调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2、通过回调函数获取</span></span><br><span class="line">   <span class="built_in">this</span>.asynchronousProgramming.getDataByCallBack(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(res);</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure><p><img src= "/count-goblin/img/loading.gif" data-lazy-src="https://pic3.zhimg.com/v2-f6349ef9cebe8fcd4fb7a9ddad1a4fe6_b.png" alt="img"></p><p>回调方法回去数据</p><h3 id="3、异步方法（Promise）"><a href="#3、异步方法（Promise）" class="headerlink" title="3、异步方法（Promise）"></a>3、异步方法（Promise）</h3><p>那Promise我们在平时的开发中或多或少也会使用到；</p><p>在服务中定义：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过异步解决</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="title">getDataByAsyn</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> userName = <span class="string">&#x27;张三--通过异步获取--promise&#x27;</span>;</span><br><span class="line">      resolve(userName);</span><br><span class="line">    &#125;, <span class="number">1500</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在组建中调用<strong>getDataByAsyn</strong>方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3、通过异步方法--promise获取</span></span><br><span class="line">   <span class="built_in">this</span>.asynchronousProgramming.getDataByAsyn().then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(res);</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure><p><img src= "/count-goblin/img/loading.gif" data-lazy-src="https://pic2.zhimg.com/v2-eb19bd12c8aae56b63352e22080f80f9_b.png" alt="img"></p><p>Promise获取数据</p><h3 id="4、异步方法（Rxjs）"><a href="#4、异步方法（Rxjs）" class="headerlink" title="4、异步方法（Rxjs）"></a>4、异步方法（Rxjs）</h3><p>那这部分就是这边文章的主角了，首先在服务中引入rxjs的Observable对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123;Observable, pipe&#125; from &#39;rxjs&#39;;</span><br></pre></td></tr></table></figure><p>然后定义一个Rxjs获取数据的方法，协防和Promise真的是太像了，但是它比Promise的功能更强大，强大之处后面陆续说道：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   *  通过rxjs异步获取</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="title">getDateByRxjs</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Observable(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> userName = <span class="string">&#x27;张三--通过异步获取--Rxjs&#x27;</span>;</span><br><span class="line">        res.next(userName);</span><br><span class="line">      &#125;, <span class="number">1500</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>在组件中调用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 4、通过异步方法-rxjs获取</span></span><br><span class="line">    <span class="keyword">const</span> data3 = <span class="built_in">this</span>.asynchronousProgramming.getDateByRxjs();</span><br><span class="line">    data3.subscribe(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123; <span class="comment">// 订阅</span></span><br><span class="line">      <span class="built_in">console</span>.log(res);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>大家可能也注意到了，在Promise中我们是你通过.then()获取异步数据，而在Rxjs中，我们是通过返回的Observable对象（data3）的subscribe来订阅数据，看看结果：</p><p><img src= "/count-goblin/img/loading.gif" data-lazy-src="https://pic2.zhimg.com/v2-0201751cbd3490d027ae0c9552b4aab1_b.png" alt="img"></p><p>Rxjs获取异步数据</p><p>前面也说了Rxjs逼Promise强大，那么强在哪里？下面我们写几个例子看看：</p><p>西面我们来实现这样的一个功能，就是每个一秒，打印一次，主要是根据定时器*<em>setInterval**</em>来实现，先看看Promise能不能实现：*</p><p><strong>（1）、Promise实现</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  通过rxjs异步获取</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="title">getDateByPromiseAdd</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> num = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      num++;</span><br><span class="line">      <span class="keyword">const</span> count = <span class="string">&#x27;次数&#x27;</span> + num;</span><br><span class="line">      resolve(count);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在组件中调用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过Promise来实现累加</span></span><br><span class="line">   <span class="built_in">this</span>.asynchronousProgramming.getDateByPromiseAdd().then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(res);</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure><p><img src= "/count-goblin/img/loading.gif" data-lazy-src="https://pic1.zhimg.com/v2-7a05f2f768f6df7fac76197037065f4c_b.png" alt="img"></p><p>从上图可以看出，值打印了一次，说明，Promise无法实现累加的操作；</p><p><strong>（2）、Rxjs实现</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 应用rxjs中的管道对数据进行处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="title">getDateByRxjsHandle</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> num = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Observable(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      num++;</span><br><span class="line">      <span class="keyword">const</span> userName = <span class="string">&#x27;张三--通过异步获取--Rxjs--累加器&#x27;</span> + num;</span><br><span class="line">      res.next(userName);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">    <span class="comment">// 过10秒后取消订阅</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      res.unsubscribe();</span><br><span class="line">    &#125;, <span class="number">10000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在组件中调用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 5、通过异步方法-rxjs获取--累加</span></span><br><span class="line">    <span class="keyword">const</span> data4 = <span class="built_in">this</span>.asynchronousProgramming.getDateByRxjsHandle();</span><br><span class="line">    data4.subscribe(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(res);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>看下结果：</p><p><img src= "/count-goblin/img/loading.gif" data-lazy-src="https://pic3.zhimg.com/v2-a10707347fcf7338bfeaf076445735b2_b.gif" alt="img"></p><p>大家可能注意到了，为什么值打印了十次，原因也就是我在十秒后取消了订阅，所以就不再打印了： 实现代码是：</p><p><img src= "/count-goblin/img/loading.gif" data-lazy-src="https://pic1.zhimg.com/v2-c68ff45a34a8298b7d744f0772a3e6bc_b.png" alt="img"></p><p>取消订阅</p><p>其实在Rxjs中也有很多方法来处理修饰数据，比如我们会用到管道之类的；</p><p>就针对累加器，对于返回的数据进行一下操作；下面就集合处理下： 1、返回偶数</p><p>2、返回的偶数乘以他本身</p><p>3、在第二部操作的基础上只拿去三个结果</p><p>4、将拿去的3个结果封装成数组</p><p>下面就用代码来实现以上四个操作：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 6、通过rxjs管道修饰结果</span></span><br><span class="line">    <span class="keyword">const</span> data5 = <span class="built_in">this</span>.asynchronousProgramming.getDataByRxjsPipe();</span><br><span class="line">    data5.pipe(</span><br><span class="line">      <span class="comment">// 返回偶数 2,4,6,8,10.......</span></span><br><span class="line">      filter(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (data % <span class="number">2</span> === <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;),</span><br><span class="line">      <span class="comment">// 返回结果乘以他自己 4,16,36,64.....</span></span><br><span class="line">      map(<span class="function"><span class="params">value</span> =&gt;</span> value * value),</span><br><span class="line">      <span class="comment">// 只返回三个结果 4,16,36</span></span><br><span class="line">      take(<span class="number">3</span>),</span><br><span class="line">      <span class="comment">// 将结果封装为数组 [4,16,36]</span></span><br><span class="line">      toArray()</span><br><span class="line">    )</span><br><span class="line">      .subscribe(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res);</span><br><span class="line">      &#125;);</span><br></pre></td></tr></table></figure><p><img src= "/count-goblin/img/loading.gif" data-lazy-src="https://pic2.zhimg.com/v2-4d7f7bf570f12dad1bb9ebff4267fa4d_b.png" alt="img"></p><p>打印结果和我们预期是一样的；</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rxjs javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「前端」JavaScript中函数的定义方法</title>
      <link href="/count-goblin/2021/01/27/%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89/"/>
      <url>/count-goblin/2021/01/27/%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\count-goblin\assets\css\APlayer.min.css"><script src="\count-goblin\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="「前端」JavaScript中函数的定义方法"><a href="#「前端」JavaScript中函数的定义方法" class="headerlink" title="「前端」JavaScript中函数的定义方法"></a>「前端」JavaScript中函数的定义方法</h1><p>函数时我们在日常开发过程中经常使用的工具，它的定义方法大概就是两种：函数声明和函数表达式</p><p>[TOC]</p><h2 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h2><h3 id="函数表达式"><a href="#函数表达式" class="headerlink" title="函数表达式"></a>函数表达式</h3><p>函数表达式是 JavaScript 中的一个既强大又容易令人困惑的特性。函数表达式有几种不同的语法形式。下面是最常见的一 种形式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> functionName = <span class="function"><span class="keyword">function</span>(<span class="params">arg0, arg1, arg2</span>)</span>&#123;</span><br><span class="line"> <span class="comment">//函数体</span></span><br><span class="line">&#125;; </span><br></pre></td></tr></table></figure><p>举个栗子：</p><p>示例1：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;<span class="keyword">return</span> a * b&#125;;<span class="comment">// 返回入参之积</span></span><br></pre></td></tr></table></figure><p>示例2：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  *  防止SQL注入,校验查询条件输入字段不能包含sql关键字</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">var</span> antiSql = <span class="function"><span class="keyword">function</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">const</span> reg = <span class="regexp">/select|update|delete|exec|count|&#x27;|&quot;|=|;|&gt;|&lt;|%/i</span>;</span><br><span class="line">   <span class="keyword">if</span> (str) &#123;</span><br><span class="line">     <span class="keyword">if</span> (reg.test(str)) &#123;  <span class="comment">// 存在输入sql关键字的情况，根据情况判断是否进行提示并阻止查询</span></span><br><span class="line">       <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><blockquote><p>这种形式看起来好像是常规的变量赋值语句，即创建一个函数并将它赋值给变量 <strong><em>functionName</em></strong>。 这种情况下创建的函数叫做匿名函数（anonymous function），因为 function 关键字后面没有标识符。 （匿名函数有时候也叫**<em>拉姆达函数**</em>。）匿名函数的 name 属性是空字符串。</p></blockquote><p>函数表达式与其他表达式一样，在使用前必须先赋值。以下代码会导致错误。</p><p>示例3：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">getNowDate(); <span class="comment">// 报错，因为此时函数还不存在</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 转换日期格式:yyyyMMdd</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> getNowDate = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> value = <span class="keyword">new</span> <span class="built_in">Date</span>(); <span class="comment">// 获取当前时间</span></span><br><span class="line">  <span class="keyword">const</span> year = value.getFullYear(); <span class="comment">// 获取当前年</span></span><br><span class="line">  <span class="keyword">const</span> mouth = (value.getMonth() + <span class="number">1</span>) &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + (value.getMonth() + <span class="number">1</span>) : (value.getMonth() + <span class="number">1</span>); <span class="comment">// 获取当前月份</span></span><br><span class="line">  <span class="keyword">const</span> date = value.getDate() &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + value.getDate() : value.getDate(); <span class="comment">// 获取当前日</span></span><br><span class="line">  <span class="keyword">return</span> (year + <span class="string">&#x27;&#x27;</span> + mouth + <span class="string">&#x27;&#x27;</span> + date); <span class="comment">// 返回yyyy MM dd格式日期</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="自调用函数"><a href="#自调用函数" class="headerlink" title="自调用函数"></a>自调用函数</h4><p>函数表达式可以 “自调用”。自调用表达式会自动调用。如果表达式后面紧跟 () ，则会自动调用。不能自调用声明的函数。</p><p>通过添加括号，来说明它是一个函数表达式：</p><p>示例:4：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="string">&quot;Hello!!&quot;</span>;      <span class="comment">// 我将调用自己</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><hr><h3 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h3><blockquote><p>首先是 function 关键字，然后是函数的名字，这就是指定函数名的方式。Firefox、Safari、Chrome 和 Opera 都给函数定义了一个非标准的 name 属性，通过这个属性可以访问到给函数指定的名字。这个 属性的值永远等于跟在 function 关键字后面的标识符；</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//只在 Firefox、Safari、Chrome 和 Opera 有效</span></span><br><span class="line">alert(functionName.name); <span class="comment">//&quot;functionName&quot; </span></span><br></pre></td></tr></table></figure><p>函数定义栗子：</p><p>示例5：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 业务类别 返回变成下拉框的值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">listToLabelvalue</span>(<span class="params">data: any = [], label, value</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">const</span> tempArr = [];</span><br><span class="line">   <span class="keyword">if</span> (data) &#123;</span><br><span class="line">     data.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">       <span class="keyword">const</span> tempObj = &#123;</span><br><span class="line">         <span class="string">&#x27;value&#x27;</span>: item[value],</span><br><span class="line">         <span class="string">&#x27;label&#x27;</span>: item[label]</span><br><span class="line">       &#125;;</span><br><span class="line">       tempArr.push(tempObj);</span><br><span class="line">     &#125;);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> tempArr;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>示例6：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *删除session指定值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>  <span class="title">clearSession</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> session = <span class="built_in">window</span>.sessionStorage;</span><br><span class="line">    session.removeItem(key); <span class="comment">// 删除session指定值</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><blockquote><p>关于函数声明，它的一个重要特征就是**<em>函数声明提升（function declaration hoisting）**</em>，意思是在执行代码之前会先读取函数声明。这就意味着可以把函数声明放在调用它的语句后面。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sayHi(); <span class="comment">// 不会报错</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> alert(<span class="string">&quot;Hi!&quot;</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>函数提升也是区别函数声明和函数表达式的重要标准，理解这一点，再看一个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代码运行结果并不是你想设计的</span></span><br><span class="line"><span class="keyword">if</span>(condition)&#123;</span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> alert(<span class="string">&quot;Hi!&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> alert(<span class="string">&quot;Yo!&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><blockquote><p>表面上看，以上代码表示在 condition 为 true 时，使用一个 <strong><em>sayHi()</em></strong>的定义；否则，就使用另 一个定义。实际上，这在  <strong>*ECMAScript  *</strong>中属于无效语法，JavaScript 引擎会尝试修正错误，将其转换为合 理的状态。但问题是浏览器尝试修正错误的做法并不一致。大多数浏览器会返回第二个声明，忽略  <strong>*condition *</strong>；Firefox 会在 <strong>* condition  *</strong>为 true 时返回第一个声明。因此这种使用方式很危险，不应该 出现在你的代码中。不过，如果是使用函数表达式，那就没有什么问题了</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可以这样做</span></span><br><span class="line"><span class="keyword">var</span> sayHi;</span><br><span class="line"><span class="keyword">if</span>(condition)&#123;</span><br><span class="line"> sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> alert(<span class="string">&quot;Hi!&quot;</span>);</span><br><span class="line"> &#125;;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"> sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> alert(<span class="string">&quot;Yo!&quot;</span>);</span><br><span class="line"> &#125;;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><hr><p>JavaScript中，函数可以作为一个值，也可以参与表达式：</p><p>示例7：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = myFunction(<span class="number">4</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>示例8：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = myFunction(<span class="number">4</span>, <span class="number">3</span>) * <span class="number">2</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「前端」手写Promise</title>
      <link href="/count-goblin/2021/01/27/%E6%89%8B%E5%86%99Promise/"/>
      <url>/count-goblin/2021/01/27/%E6%89%8B%E5%86%99Promise/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\count-goblin\assets\css\APlayer.min.css"><script src="\count-goblin\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="一、引言"><a href="#一、引言" class="headerlink" title="一、引言"></a>一、引言</h3><blockquote><p>Promise是处理异步编码的一个解决方案，在Promise出现以前，异步代码的编写都是通过回调函数来处理的，回调函数本身没有任何问题，只是当多次异步回调有逻辑关系时就会变得复杂：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line">fs.readFile(<span class="string">&#x27;1.doc&#x27;</span>, <span class="function">(<span class="params">err,res</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.readFile(<span class="string">&#x27;2.doc&#x27;</span>, <span class="function">(<span class="params">err,res</span>) =&gt;</span> &#123;</span><br><span class="line">        fs.readFile(<span class="string">&#x27;3.doc&#x27;</span>, <span class="function">(<span class="params">err,res</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 可能还有后续代码...</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>​    不过Promise的横空出世就有效的解决了这一问题，也就是回调地狱问题；</p><p>​    而手写Promise也是最近几年面试很容易考到的问题，下面收集了简易版的Promise和合乎<a href="https://promisesaplus.com/">Promises/A+规范</a>的Promise，仅供参考！</p><h3 id="二、简易版"><a href="#二、简易版" class="headerlink" title="二、简易版"></a>二、简易版</h3><h4 id="1、首先定义constructor"><a href="#1、首先定义constructor" class="headerlink" title="1、首先定义constructor"></a>1、首先定义constructor</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">fn</span>)</span> &#123;</span><br><span class="line">        <span class="comment">// 定义Promise的三种状态</span></span><br><span class="line">        <span class="built_in">this</span>.statusObj = &#123;</span><br><span class="line">            PENDING: <span class="string">&#x27;PENDING&#x27;</span>,</span><br><span class="line">            RESOLVED: <span class="string">&#x27;RESOLVED&#x27;</span>,</span><br><span class="line">            REJECTED: <span class="string">&#x27;REJECTED&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.value = <span class="literal">null</span>;<span class="comment">// 定义传递给then的value</span></span><br><span class="line">        <span class="built_in">this</span>.status = <span class="built_in">this</span>.statusObj.PENDING; <span class="comment">// 设置当前Promise的状态</span></span><br><span class="line">        <span class="built_in">this</span>.resolvedCallBacks = []; <span class="comment">// 定义Promise成功状态的回调函数集合</span></span><br><span class="line">        <span class="built_in">this</span>.rejectedCallBacks = []; <span class="comment">// 定义Promise失败状态的回调函数集合</span></span><br><span class="line">        MyPromise.that = <span class="built_in">this</span>; <span class="comment">// 为静态方法定义其内部可以使用的指向实例的that</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 执行new Promise() 内传入的方法</span></span><br><span class="line">            fn(MyPromise.resolve, MyPromise.reject);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            MyPromise.reject(<span class="built_in">this</span>.value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="2、完善resolve、reject、then方法"><a href="#2、完善resolve、reject、then方法" class="headerlink" title="2、完善resolve、reject、then方法"></a>2、完善resolve、reject、then方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 静态resolve方法，MyPromise实例不可访问;</span></span><br><span class="line"><span class="comment"> * 支持类MyPromise访问，例：MyPromise.resolve(&#x27;success&#x27;).then(e=&gt;e)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>value </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="function"><span class="title">resolve</span>(<span class="params">value</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> that = MyPromise.that; <span class="comment">// 由于静态方法内的this访问的是类还不是实例，所以使用这种办法访问对象实例</span></span><br><span class="line">    <span class="keyword">const</span> f = that <span class="keyword">instanceof</span> MyPromise; <span class="comment">// 确认是否是MyPromise实例访问resolve</span></span><br><span class="line">    <span class="comment">// MyPromise 实例访问resolve,如果访问成功 状态改变、值改变</span></span><br><span class="line">    <span class="keyword">if</span> (f &amp;&amp; that.status === that.statusObj.PENDING) &#123;</span><br><span class="line">        that.status = that.statusObj.RESOLVED;</span><br><span class="line">        that.value = value;</span><br><span class="line">        that.resolvedCallBacks.map(<span class="function"><span class="params">cb</span> =&gt;</span> that.value = cb(that.value));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// MyPromise 类访问resolve</span></span><br><span class="line">    <span class="keyword">if</span> (!f) &#123;</span><br><span class="line">        <span class="keyword">const</span> obj = <span class="keyword">new</span> MyPromise();</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Object</span>.assign(obj, &#123;</span><br><span class="line">            status: obj.statusObj.RESOLVED,</span><br><span class="line">            value</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    那么resolve方法就和resolve方法差不多</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 静态resolve方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>value </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="function"><span class="title">reject</span>(<span class="params">value</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> that = MyPromise.that;</span><br><span class="line">    <span class="keyword">const</span> f = that <span class="keyword">instanceof</span> MyPromise;</span><br><span class="line">    <span class="keyword">if</span> (f &amp;&amp; that.status === that.statusObj.REJECTED) &#123;</span><br><span class="line">        that.status = that.statusObj.REJECTED;</span><br><span class="line">        that.value = value;</span><br><span class="line">        that.rejectedCallBacks.map(<span class="function"><span class="params">cb</span> =&gt;</span> that.value = cb(that.value));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!f) &#123;</span><br><span class="line">        <span class="keyword">const</span> obj = <span class="keyword">new</span> MyPromise();</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Object</span>.assign(obj, &#123;</span><br><span class="line">            status: that.statusObj.REJECTED,</span><br><span class="line">            value</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后是then方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * MyPromise 原型上的then方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>onFulfilled </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>onRejected </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="title">then</span>(<span class="params">onFulfilled, onRejected</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; PENDING, RESOLVED, REJECTED &#125; = <span class="built_in">this</span>.statusObj;</span><br><span class="line">    <span class="keyword">const</span> f = <span class="keyword">typeof</span> onFulfilled == <span class="string">&#x27;function&#x27;</span> ? onFulfilled : <span class="function"><span class="params">c</span> =&gt;</span> c</span><br><span class="line">    <span class="keyword">const</span> r = <span class="keyword">typeof</span> onRejected == <span class="string">&#x27;function&#x27;</span> ? onRejected : <span class="function"><span class="params">c</span> =&gt;</span> &#123; <span class="keyword">throw</span> c &#125;;</span><br><span class="line">    <span class="keyword">switch</span> (<span class="built_in">this</span>.status) &#123;</span><br><span class="line">        <span class="keyword">case</span> PENDING: <span class="comment">// PENDING 状态下 向下回调函数结合添加callback</span></span><br><span class="line">            <span class="built_in">this</span>.resolvedCallBacks.push(f);</span><br><span class="line">            <span class="built_in">this</span>.rejectedCallBacks.push(r);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> RESOLVED:</span><br><span class="line">            <span class="built_in">this</span>.value = f(<span class="built_in">this</span>.value); <span class="comment">// 将回调函数的返回值赋值给实例的 value ，满足链式调用then方法时传递value</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> REJECTED:</span><br><span class="line">            <span class="built_in">this</span>.value = r(<span class="built_in">this</span>.value); <span class="comment">// 将回调函数的返回值赋值给实例的 value ，满足链式调用then方法时传递value</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 满足链式调用then，返回MyPromise实例对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此呢，我们自定的MyPromise方法就写完了 ，接下里就是测试环节</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// new 一个Promise进行测试</span></span><br><span class="line">MyPromise.resolve(<span class="string">&#x27;success&#x27;</span>).then(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e);</span><br><span class="line">    <span class="keyword">return</span> e + <span class="number">1</span>;</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> MyPromise(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        resolve(<span class="number">1</span>)</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;)</span><br><span class="line">    .then(<span class="function">(<span class="params">res2</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res2);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;).then(<span class="function">(<span class="params">res3</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res3);</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>下面是测试的结果。</p><p><img src= "/count-goblin/img/loading.gif" data-lazy-src="C:\Users\Arthur\AppData\Roaming\Typora\typora-user-images\image-20200504154123745.png" alt="image-20200504154123745"></p><p>下面附上完整代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPromise</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">fn</span>)</span> &#123;</span><br><span class="line">        <span class="comment">// 定义Promise的三种状态</span></span><br><span class="line">        <span class="built_in">this</span>.statusObj = &#123;</span><br><span class="line">            PENDING: <span class="string">&#x27;PENDING&#x27;</span>,</span><br><span class="line">            RESOLVED: <span class="string">&#x27;RESOLVED&#x27;</span>,</span><br><span class="line">            REJECTED: <span class="string">&#x27;REJECTED&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.value = <span class="literal">null</span>;<span class="comment">// 定义传递给then的value</span></span><br><span class="line">        <span class="built_in">this</span>.status = <span class="built_in">this</span>.statusObj.PENDING; <span class="comment">// 设置当前Promise的状态</span></span><br><span class="line">        <span class="built_in">this</span>.resolvedCallBacks = []; <span class="comment">// 定义Promise成功状态的回调函数集合</span></span><br><span class="line">        <span class="built_in">this</span>.rejectedCallBacks = []; <span class="comment">// 定义Promise失败状态的回调函数集合</span></span><br><span class="line">        MyPromise.that = <span class="built_in">this</span>; <span class="comment">// 为静态方法定义其内部可以使用的指向实例的that</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 执行new Promise() 内传入的方法</span></span><br><span class="line">            fn(MyPromise.resolve, MyPromise.reject);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            MyPromise.reject(<span class="built_in">this</span>.value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 静态resolve方法，MyPromise实例不可访问;</span></span><br><span class="line"><span class="comment">     * 支持类MyPromise访问，例：MyPromise.resolve(&#x27;success&#x27;).then(e=&gt;e)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>value </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="title">resolve</span>(<span class="params">value</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> that = MyPromise.that; <span class="comment">// 由于静态方法内的this访问的是类还不是实例，所以使用这种办法访问对象实例</span></span><br><span class="line">        <span class="keyword">const</span> f = that <span class="keyword">instanceof</span> MyPromise; <span class="comment">// 确认是否是MyPromise实例访问resolve</span></span><br><span class="line">        <span class="comment">// MyPromise 实例访问resolve,如果访问成功 状态改变、值改变</span></span><br><span class="line">        <span class="keyword">if</span> (f &amp;&amp; that.status === that.statusObj.PENDING) &#123;</span><br><span class="line">            that.status = that.statusObj.RESOLVED;</span><br><span class="line">            that.value = value;</span><br><span class="line">            that.resolvedCallBacks.map(<span class="function"><span class="params">cb</span> =&gt;</span> that.value = cb(that.value));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// MyPromise 类访问resolve</span></span><br><span class="line">        <span class="keyword">if</span> (!f) &#123;</span><br><span class="line">            <span class="keyword">const</span> obj = <span class="keyword">new</span> MyPromise();</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Object</span>.assign(obj, &#123;</span><br><span class="line">                status: obj.statusObj.RESOLVED,</span><br><span class="line">                value</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 静态resolve方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>value </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="title">reject</span>(<span class="params">value</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> that = MyPromise.that;</span><br><span class="line">        <span class="keyword">const</span> f = that <span class="keyword">instanceof</span> MyPromise;</span><br><span class="line">        <span class="keyword">if</span> (f &amp;&amp; that.status === that.statusObj.REJECTED) &#123;</span><br><span class="line">            that.status = that.statusObj.REJECTED;</span><br><span class="line">            that.value = value;</span><br><span class="line">            that.rejectedCallBacks.map(<span class="function"><span class="params">cb</span> =&gt;</span> that.value = cb(that.value));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!f) &#123;</span><br><span class="line">            <span class="keyword">const</span> obj = <span class="keyword">new</span> MyPromise();</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Object</span>.assign(obj, &#123;</span><br><span class="line">                status: that.statusObj.REJECTED,</span><br><span class="line">                value</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * MyPromise 原型上的then方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>onFulfilled </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>onRejected </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="title">then</span>(<span class="params">onFulfilled, onRejected</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; PENDING, RESOLVED, REJECTED &#125; = <span class="built_in">this</span>.statusObj;</span><br><span class="line">        <span class="keyword">const</span> f = <span class="keyword">typeof</span> onFulfilled == <span class="string">&#x27;function&#x27;</span> ? onFulfilled : <span class="function"><span class="params">c</span> =&gt;</span> c</span><br><span class="line">        <span class="keyword">const</span> r = <span class="keyword">typeof</span> onRejected == <span class="string">&#x27;function&#x27;</span> ? onRejected : <span class="function"><span class="params">c</span> =&gt;</span> &#123; <span class="keyword">throw</span> c &#125;;</span><br><span class="line">        <span class="keyword">switch</span> (<span class="built_in">this</span>.status) &#123;</span><br><span class="line">            <span class="keyword">case</span> PENDING: <span class="comment">// PENDING 状态下 向下回调函数结合添加callback</span></span><br><span class="line">                <span class="built_in">this</span>.resolvedCallBacks.push(f);</span><br><span class="line">                <span class="built_in">this</span>.rejectedCallBacks.push(r);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> RESOLVED:</span><br><span class="line">                <span class="built_in">this</span>.value = f(<span class="built_in">this</span>.value); <span class="comment">// 将回调函数的返回值赋值给实例的 value ，满足链式调用then方法时传递value</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> REJECTED:</span><br><span class="line">                <span class="built_in">this</span>.value = r(<span class="built_in">this</span>.value); <span class="comment">// 将回调函数的返回值赋值给实例的 value ，满足链式调用then方法时传递value</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 满足链式调用then，返回MyPromise实例对象</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// new 一个Promise进行测试</span></span><br><span class="line">MyPromise.resolve(<span class="string">&#x27;success&#x27;</span>).then(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e);</span><br><span class="line">    <span class="keyword">return</span> e + <span class="number">1</span>;</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> MyPromise(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        resolve(<span class="number">1</span>)</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;)</span><br><span class="line">    .then(<span class="function">(<span class="params">res2</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res2);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;).then(<span class="function">(<span class="params">res3</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res3);</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript数据迭代方法</title>
      <link href="/count-goblin/2021/01/27/javaScript%E6%95%B0%E6%8D%AE%E8%BF%AD%E4%BB%A3%E6%96%B9%E6%B3%95/"/>
      <url>/count-goblin/2021/01/27/javaScript%E6%95%B0%E6%8D%AE%E8%BF%AD%E4%BB%A3%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\count-goblin\assets\css\APlayer.min.css"><script src="\count-goblin\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>今天花一天时间折腾Spring Boot+vue.js+axios文件，还好最算是弄成功了，在这里做个详细的笔记！</p><h2 id="javaScript数据迭代方法"><a href="#javaScript数据迭代方法" class="headerlink" title="javaScript数据迭代方法"></a>javaScript数据迭代方法</h2><blockquote><p>前言：JavaScript数据的迭代方法如果可以被被我们灵活的使用，可以达到出其不意的效果！</p></blockquote><blockquote><p>ES5为数组定义了5个迭代的方法。</p><ul><li><p>every()：对数组中的每一项运行给定函数，如果该函数对每一项都返回 true，则返回 true。</p></li><li><p>filter()：对数组中的每一项运行给定函数，返回该函数会返回 true 的项组成的数组。 </p></li><li><p>forEach()：对数组中的每一项运行给定函数。这个方法没有返回值。 </p></li><li><p>map()：对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组。 </p></li><li><p>some()：对数组中的每一项运行给定函数，如果该函数对任一项返回 true，则返回 true。</p></li></ul><p>每个方法都接收两个参数：</p><p>1、要在每一项上运行的函数</p><p>2、运行该函数的作用域对象–影响this的值(可选)。</p><p>运行的函数会接受三个参数：1)<strong>数组项的值</strong> 2)<strong>该项在数组中的位置（下标）</strong>3)<strong>数组对象本身。</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arrTemp = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br></pre></td></tr></table></figure><h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach ( )"></a>forEach ( )</h3><p><strong>对数组的每一项运行给定函数。该方法没有返回值</strong> 。用法其实和for循环一样</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> resulte = arrTemp.forEach(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(item)&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="some-和every"><a href="#some-和every" class="headerlink" title="some ( )和every ( )"></a>some ( )和every ( )</h3><blockquote><p>**every()**和 **some()**，它们都用于查询数组中的项是否满足某个条件。 对 every()来说，传入的函数必须对每一项都返回 true，这个方法才返回 true；否则，它就返回 false。而 some()方法则是只要传入的函数对数组中的某一项返回 true，就会返回 true，理解时，可以借助逻辑与或的关系</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arrTemp  = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> everyResult = arrTemp.every(<span class="function"><span class="keyword">function</span> (<span class="params">item, index, array</span>) </span>&#123; </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> (item &gt; <span class="number">2</span>); <span class="comment">// 每一项都大于2才会返回true</span></span><br><span class="line">    </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">alert(everyResult);    <span class="comment">// false </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> someResult = arrTemp.some(<span class="function"><span class="keyword">function</span> (<span class="params">item, index, array</span>) </span>&#123; </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> (item &gt; <span class="number">2</span>); <span class="comment">// 只要有一项大于2就会返回true</span></span><br><span class="line">    </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">alert(someResult);     <span class="comment">// true </span></span><br></pre></td></tr></table></figure><h3 id="filter-—过滤"><a href="#filter-—过滤" class="headerlink" title="filter ( )—过滤"></a>filter ( )—过滤</h3><blockquote><p>**filter()**函数，它利用指定的函数确定是否在返回的数组中包含某一项。例如，要 返回一个所有数值都大于 2的数组，可以使用以下代码。 </p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arrTemp = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> filterResult = arrTemp.filter(<span class="function"><span class="keyword">function</span> (<span class="params">item, index, array</span>) </span>&#123; </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> (item &gt; <span class="number">2</span>); </span><br><span class="line">    </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">alert(filterResult);  <span class="comment">//[3,4]</span></span><br></pre></td></tr></table></figure><p>再写一个其他的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> totalUserList=[</span><br><span class="line">    &#123;<span class="attr">postId</span>:<span class="string">&#x27;xxxxxxx&#x27;</span>,<span class="attr">postName</span>:<span class="string">&#x27;yyyyyyy&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">postId</span>:<span class="string">&#x27;ccccccc&#x27;</span>,<span class="attr">postName</span>:<span class="string">&#x27;ddddddd&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">postId</span>:<span class="string">&#x27;bbbbbbb&#x27;</span>,<span class="attr">postName</span>:<span class="string">&#x27;aaaaaaa&#x27;</span>&#125;</span><br><span class="line">]</span><br><span class="line"><span class="function"><span class="title">filterUserList</span>(<span class="params">type</span>)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> list = totalUserList.filter(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">        </span><br><span class="line">       <span class="keyword">return</span> item.postId === type</span><br><span class="line">        </span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 返回的 list 中，都是postId和totalUserList中一样的数据</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="map"><a href="#map" class="headerlink" title="map ( )"></a>map ( )</h3><blockquote><p>**map( )**也返回一个数组，而这个数组的每一项都是在原始数组中的对应项上运行传入函数的结果。 例如，可以给数组中的每一项乘以 2，然后返回这些乘积组成的数组，如下所示。 </p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arrTemp = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mapResult = arrTemp.map(<span class="function"><span class="keyword">function</span> (<span class="params">item, index, array</span>) </span>&#123; </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> item * <span class="number">2</span>; </span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">alert(mapResult);  <span class="comment">//[2,4,6,8] </span></span><br></pre></td></tr></table></figure><p>同样，map（）也可以用作循环：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">let</span> list = data.Service.Body.companyBriefInfoList || [];</span><br><span class="line">list = list.map(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> item.custName + <span class="string">&#x27;-&#x27;</span> + item.custNo;</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure><p><strong>重点：文章 内容 摘自《JavaScript高级程序设计》</strong></p>]]></content>
      
      
      <categories>
          
          <category> 数据操作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9种常见的前端跨域解决方案</title>
      <link href="/count-goblin/2021/01/21/9%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%9A%84%E5%89%8D%E7%AB%AF%E8%B7%A8%E5%9F%9F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%EF%BC%88%E8%AF%A6%E8%A7%A3%EF%BC%89/"/>
      <url>/count-goblin/2021/01/21/9%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%9A%84%E5%89%8D%E7%AB%AF%E8%B7%A8%E5%9F%9F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%EF%BC%88%E8%AF%A6%E8%A7%A3%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\count-goblin\assets\css\APlayer.min.css"><script src="\count-goblin\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、什么是跨域？"><a href="#一、什么是跨域？" class="headerlink" title="一、什么是跨域？"></a>一、什么是跨域？</h2><p>  在前端领域中，跨域是指浏览器允许向服务器发送跨域请求，从而克服Ajax只能同源使用的限制。</p><h3 id="什么是同源策略？"><a href="#什么是同源策略？" class="headerlink" title="什么是同源策略？"></a>什么是同源策略？</h3><p>  同源策略是一种约定，由Netscape公司1995年引入浏览器，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，浏览器很容易受到XSS、CSFR等攻击。所谓同源是指”协议+域名+端口”三者相同，即便两个不同的域名指向同一个ip地址，也非同源。</p><p>  同源策略限制以下几种行为：</p><ul><li>Cookie、LocalStorage 和 IndexDB 无法读取</li><li>DOM和JS对象无法获得</li><li>AJAX 请求不能发送</li></ul><h2 id="二、常见的跨域场景"><a href="#二、常见的跨域场景" class="headerlink" title="二、常见的跨域场景"></a>二、常见的跨域场景</h2><p><img src= "/count-goblin/img/loading.gif" data-lazy-src="https://pic1.zhimg.com/v2-4ed5f3802f7c278c8dad72b08128a72c_b.png" alt="img"></p><h2 id="三、9种跨域解决方案"><a href="#三、9种跨域解决方案" class="headerlink" title="三、9种跨域解决方案"></a>三、9种跨域解决方案</h2><h3 id="1、JSONP跨域"><a href="#1、JSONP跨域" class="headerlink" title="1、JSONP跨域"></a>1、JSONP跨域</h3><p>  jsonp的原理就是利用<script>标签没有跨域限制，通过<script>标签src属性，发送带有callback参数的GET请求，服务端将接口返回数据拼凑到callback函数中，返回给浏览器，浏览器解析执行，从而前端拿到callback函数返回的数据。 1）原生JS实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">   <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">   script.type = <span class="string">&#x27;text/javascript&#x27;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 传参一个回调函数名给后端，方便后端返回时执行这个在前端定义的回调函数</span></span><br><span class="line">   script.src = <span class="string">&#x27;http://www.domain2.com:8080/login?user=admin&amp;callback=handleCallback&#x27;</span>;</span><br><span class="line">   <span class="built_in">document</span>.head.appendChild(script);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 回调执行函数</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">handleCallback</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">       alert(<span class="built_in">JSON</span>.stringify(res));</span><br><span class="line">   &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>服务端返回如下（返回时即执行全局函数）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">handleCallback(&#123;<span class="string">&quot;success&quot;</span>: <span class="literal">true</span>, <span class="string">&quot;user&quot;</span>: <span class="string">&quot;admin&quot;</span>&#125;)</span><br></pre></td></tr></table></figure><p>2）jquery Ajax实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url: <span class="string">&#x27;http://www.domain2.com:8080/login&#x27;</span>,</span><br><span class="line">    type: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    dataType: <span class="string">&#x27;jsonp&#x27;</span>,  <span class="comment">// 请求方式为jsonp</span></span><br><span class="line">    jsonpCallback: <span class="string">&quot;handleCallback&quot;</span>,  <span class="comment">// 自定义回调函数名</span></span><br><span class="line">    data: &#123;&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>3）Vue axios实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.$http = axios;</span><br><span class="line"><span class="built_in">this</span>.$http.jsonp(<span class="string">&#x27;http://www.domain2.com:8080/login&#x27;</span>, &#123;</span><br><span class="line">    params: &#123;&#125;,</span><br><span class="line">    jsonp: <span class="string">&#x27;handleCallback&#x27;</span></span><br><span class="line">&#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res); </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>后端node.js代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> querystring = <span class="built_in">require</span>(<span class="string">&#x27;querystring&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> server = http.createServer();</span><br><span class="line"></span><br><span class="line">server.on(<span class="string">&#x27;request&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> params = querystring.parse(req.url.split(<span class="string">&#x27;?&#x27;</span>)[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">var</span> fn = params.callback;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// jsonp返回设置</span></span><br><span class="line">    res.writeHead(<span class="number">200</span>, &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/javascript&#x27;</span> &#125;);javascript</span><br><span class="line">    res.write(fn + <span class="string">&#x27;(&#x27;</span> + <span class="built_in">JSON</span>.stringify(params) + <span class="string">&#x27;)&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    res.end();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(<span class="string">&#x27;8080&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;Server is running at port 8080...&#x27;</span>);</span><br></pre></td></tr></table></figure><blockquote><p>jsonp的缺点：只能发送get一种请求。</p></blockquote><h3 id="2、跨域资源共享（CORS）"><a href="#2、跨域资源共享（CORS）" class="headerlink" title="2、跨域资源共享（CORS）"></a>2、跨域资源共享（CORS）</h3><p>  CORS是一个W3C标准，全称是”跨域资源共享”（Cross-origin resource sharing）。 它允许浏览器向跨源服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制。 CORS需要浏览器和服务器同时支持。目前，所有浏览器都支持该功能，IE浏览器不能低于IE10。   浏览器将CORS跨域请求分为简单请求和非简单请求。   只要同时满足一下两个条件，就属于简单请求 (1)使用下列方法之一：</p><ul><li>head</li><li>get</li><li>post</li></ul><p>(2)请求的Heder是</p><ul><li>Accept</li><li>Accept-Language</li><li>Content-Language</li><li>Content-Type: 只限于三个值：application/x-www-form-urlencoded、multipart/form-data、text/plain</li></ul><p>不同时满足上面的两个条件，就属于非简单请求。浏览器对这两种的处理，是不一样的。</p><h3 id="简单请求"><a href="#简单请求" class="headerlink" title="简单请求"></a>简单请求</h3><p>  对于简单请求，浏览器直接发出CORS请求。具体来说，就是在头信息之中，增加一个Origin字段。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">GET</span> <span class="string">/cors</span> <span class="string">HTTP/1.1</span></span><br><span class="line"><span class="attr">Origin:</span> <span class="string">http://api.bob.com</span></span><br><span class="line"><span class="attr">Host:</span> <span class="string">api.alice.com</span></span><br><span class="line"><span class="attr">Accept-Language:</span> <span class="string">en-US</span></span><br><span class="line"><span class="attr">Connection:</span> <span class="string">keep-alive</span></span><br><span class="line"><span class="attr">User-Agent:</span> <span class="string">Mozilla/5.0...</span></span><br></pre></td></tr></table></figure><p>  上面的头信息中，Origin字段用来说明，本次请求来自哪个源（协议 + 域名 + 端口）。服务器根据这个值，决定是否同意这次请求。</p><h3 id="CORS请求设置的响应头字段，都以-Access-Control-开头"><a href="#CORS请求设置的响应头字段，都以-Access-Control-开头" class="headerlink" title="CORS请求设置的响应头字段，都以 Access-Control-开头:"></a>CORS请求设置的响应头字段，都以 Access-Control-开头:</h3><p>1）Access-Control-Allow-Origin：必选   它的值要么是请求时Origin字段的值，要么是一个*，表示接受任意域名的请求。 2）Access-Control-Allow-Credentials：可选   它的值是一个布尔值，表示是否允许发送Cookie。默认情况下，Cookie不包括在CORS请求之中。设为true，即表示服务器明确许可，Cookie可以包含在请求中，一起发给服务器。这个值也只能设为true，如果服务器不要浏览器发送Cookie，删除该字段即可。 3）Access-Control-Expose-Headers：可选   CORS请求时，XMLHttpRequest对象的getResponseHeader()方法只能拿到6个基本字段：Cache-Control、Content-Language、Content-Type、Expires、Last-Modified、Pragma。如果想拿到其他字段，就必须在Access-Control-Expose-Headers里面指定。上面的例子指定，getResponseHeader(‘FooBar’)可以返回FooBar字段的值。</p><h3 id="非简单请求"><a href="#非简单请求" class="headerlink" title="非简单请求"></a>非简单请求</h3><p>  非简单请求是那种对服务器有特殊要求的请求，比如请求方法是PUT或DELETE，或者Content-Type字段的类型是application/json。非简单请求的CORS请求，会在正式通信之前，增加一次HTTP查询请求，称为”预检”请求（preflight）。</p><h3 id="预检请求"><a href="#预检请求" class="headerlink" title="预检请求"></a>预检请求</h3><p>  预检”请求用的请求方法是OPTIONS，表示这个请求是用来询问的。请求头信息里面，关键字段是Origin，表示请求来自哪个源。除了Origin字段，”预检”请求的头信息包括两个特殊字段。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">OPTIONS</span> <span class="string">/cors</span> <span class="string">HTTP/1.1</span></span><br><span class="line"><span class="attr">Origin:</span> <span class="string">http://api.bob.com</span></span><br><span class="line"><span class="attr">Access-Control-Request-Method:</span> <span class="string">PUT</span></span><br><span class="line"><span class="attr">Access-Control-Request-Headers:</span> <span class="string">X-Custom-Header</span></span><br><span class="line"><span class="attr">Host:</span> <span class="string">api.alice.com</span></span><br><span class="line"><span class="attr">Accept-Language:</span> <span class="string">en-US</span></span><br><span class="line"><span class="attr">Connection:</span> <span class="string">keep-alive</span></span><br><span class="line"><span class="attr">User-Agent:</span> <span class="string">Mozilla/5.0..</span></span><br></pre></td></tr></table></figure><p>1）Access-Control-Request-Method：必选   用来列出浏览器的CORS请求会用到哪些HTTP方法，上例是PUT。 2）Access-Control-Request-Headers：可选   该字段是一个逗号分隔的字符串，指定浏览器CORS请求会额外发送的头信息字段，上例是X-Custom-Header。</p><h3 id="预检请求的回应"><a href="#预检请求的回应" class="headerlink" title="预检请求的回应"></a>预检请求的回应</h3><p>  服务器收到”预检”请求以后，检查了Origin、Access-Control-Request-Method和Access-Control-Request-Headers字段以后，确认允许跨源请求，就可以做出回应。   HTTP回应中，除了关键的是Access-Control-Allow-Origin字段，其他CORS相关字段如下： 1）Access-Control-Allow-Methods：必选   它的值是逗号分隔的一个字符串，表明服务器支持的所有跨域请求的方法。注意，返回的是所有支持的方法，而不单是浏览器请求的那个方法。这是为了避免多次”预检”请求。 2）Access-Control-Allow-Headers   如果浏览器请求包括Access-Control-Request-Headers字段，则Access-Control-Allow-Headers字段是必需的。它也是一个逗号分隔的字符串，表明服务器支持的所有头信息字段，不限于浏览器在”预检”中请求的字段。 3）Access-Control-Allow-Credentials：可选   该字段与简单请求时的含义相同。 4）Access-Control-Max-Age：可选   用来指定本次预检请求的有效期，单位为秒。</p><h3 id="CORS跨域示例"><a href="#CORS跨域示例" class="headerlink" title="CORS跨域示例"></a>CORS跨域示例</h3><p>1）前端设置：</p><ul><li>原生ajax：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest(); <span class="comment">// IE8/9需用window.XDomainRequest兼容</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 前端设置是否带cookie</span></span><br><span class="line">xhr.withCredentials = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">xhr.open(<span class="string">&#x27;post&#x27;</span>, <span class="string">&#x27;http://www.domain2.com:8080/login&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.setRequestHeader(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>);</span><br><span class="line">xhr.send(<span class="string">&#x27;user=admin&#x27;</span>);</span><br><span class="line"></span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span> &amp;&amp; xhr.status == <span class="number">200</span>) &#123;</span><br><span class="line">        alert(xhr.responseText);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>jquery ajax：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    ...</span><br><span class="line">   xhrFields: &#123;</span><br><span class="line">       withCredentials: <span class="literal">true</span>    <span class="comment">// 前端设置是否带cookie</span></span><br><span class="line">   &#125;,</span><br><span class="line">   crossDomain: <span class="literal">true</span>,   <span class="comment">// 会让请求头中包含跨域的额外信息，但不会含cookie</span></span><br><span class="line">    ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>2）服务端设置：</p><ul><li>nodejs代码</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> server = http.createServer();</span><br><span class="line"><span class="keyword">var</span> qs = <span class="built_in">require</span>(<span class="string">&#x27;querystring&#x27;</span>);</span><br><span class="line"></span><br><span class="line">server.on(<span class="string">&#x27;request&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> postData = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数据块接收中</span></span><br><span class="line">    req.addListener(<span class="string">&#x27;data&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>) </span>&#123;</span><br><span class="line">        postData += chunk;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数据接收完毕</span></span><br><span class="line">    req.addListener(<span class="string">&#x27;end&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        postData = qs.parse(postData);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 跨域后台设置</span></span><br><span class="line">        res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">            <span class="string">&#x27;Access-Control-Allow-Credentials&#x27;</span>: <span class="string">&#x27;true&#x27;</span>,     <span class="comment">// 后端允许发送Cookie</span></span><br><span class="line">            <span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>: <span class="string">&#x27;http://www.domain1.com&#x27;</span>,    <span class="comment">// 允许访问的域（协议+域名+端口）</span></span><br><span class="line">            <span class="comment">/* </span></span><br><span class="line"><span class="comment">             * 此处设置的cookie还是domain2的而非domain1，因为后端也不能跨域写cookie(nginx反向代理可以实现)，</span></span><br><span class="line"><span class="comment">             * 但只要domain2中写入一次cookie认证，后面的跨域接口都能从domain2中获取cookie，从而实现所有的接口都能跨域访问</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="string">&#x27;Set-Cookie&#x27;</span>: <span class="string">&#x27;l=a123456;Path=/;Domain=www.domain2.com;HttpOnly&#x27;</span>  <span class="comment">// HttpOnly的作用是让js无法读取cookie</span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        res.write(<span class="built_in">JSON</span>.stringify(postData));</span><br><span class="line">        res.end();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(<span class="string">&#x27;8080&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;Server is running at port 8080...&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="3、nginx代理跨域"><a href="#3、nginx代理跨域" class="headerlink" title="3、nginx代理跨域"></a>3、nginx代理跨域</h3><p>  nginx代理跨域，实质和CORS跨域原理一样，通过配置文件设置请求响应头Access-Control-Allow-Origin…等字段。</p><h3 id="1）nginx配置解决iconfont跨域"><a href="#1）nginx配置解决iconfont跨域" class="headerlink" title="1）nginx配置解决iconfont跨域"></a>1）nginx配置解决iconfont跨域</h3><p>  浏览器跨域访问js、css、img等常规静态资源被同源策略许可，但iconfont字体文件(eot|otf|ttf|woff|svg)例外，此时可在nginx的静态资源服务器中加入以下配置。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">  <span class="attribute">add_header</span> Access-Control-Allow-Origin *;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2）nginx反向代理接口跨域"><a href="#2）nginx反向代理接口跨域" class="headerlink" title="2）nginx反向代理接口跨域"></a>2）nginx反向代理接口跨域</h3><blockquote><p>跨域问题：同源策略仅是针对浏览器的安全策略。服务器端调用HTTP接口只是使用HTTP协议，不需要同源策略，也就不存在跨域问题。</p></blockquote><p>实现思路：通过Nginx配置一个代理服务器域名与domain1相同，端口不同）做跳板机，反向代理访问domain2接口，并且可以顺便修改cookie中domain信息，方便当前域cookie写入，实现跨域访问。 nginx具体配置：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#proxy服务器</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">81</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  www.domain1.com;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span>   http://www.domain2.com:8080;  <span class="comment">#反向代理</span></span><br><span class="line">        <span class="attribute">proxy_cookie_domain</span> www.domain2.com www.domain1.com; <span class="comment">#修改cookie里域名</span></span><br><span class="line">        <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 当用webpack-dev-server等中间件代理接口访问nignx时，此时无浏览器参与，故没有同源限制，下面的跨域配置可不启用</span></span><br><span class="line">        <span class="attribute">add_header</span> Access-Control-Allow-Origin http://www.domain1.com;  <span class="comment">#当前端只跨域不带cookie时，可为*</span></span><br><span class="line">        <span class="attribute">add_header</span> Access-Control-Allow-Credentials <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、nodejs中间件代理跨域"><a href="#4、nodejs中间件代理跨域" class="headerlink" title="4、nodejs中间件代理跨域"></a>4、nodejs中间件代理跨域</h3><p>  node中间件实现跨域代理，原理大致与nginx相同，都是通过启一个代理服务器，实现数据的转发，也可以通过设置cookieDomainRewrite参数修改响应头中cookie中域名，实现当前域的cookie写入，方便接口登录认证。 1）非vue框架的跨域   使用node + express + http-proxy-middleware搭建一个proxy服务器。</p><ul><li>前端代码：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前端开关：浏览器是否读写cookie</span></span><br><span class="line">xhr.withCredentials = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问http-proxy-middleware代理服务器</span></span><br><span class="line">xhr.open(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;http://www.domain1.com:3000/login?user=admin&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.send();</span><br></pre></td></tr></table></figure><ul><li>中间件服务器代码：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> proxy = <span class="built_in">require</span>(<span class="string">&#x27;http-proxy-middleware&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line">app.use(<span class="string">&#x27;/&#x27;</span>, proxy(&#123;</span><br><span class="line">    <span class="comment">// 代理跨域目标接口</span></span><br><span class="line">    target: <span class="string">&#x27;http://www.domain2.com:8080&#x27;</span>,</span><br><span class="line">    changeOrigin: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改响应头信息，实现跨域并允许带cookie</span></span><br><span class="line">    onProxyRes: <span class="function"><span class="keyword">function</span>(<span class="params">proxyRes, req, res</span>) </span>&#123;</span><br><span class="line">        res.header(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;http://www.domain1.com&#x27;</span>);</span><br><span class="line">        res.header(<span class="string">&#x27;Access-Control-Allow-Credentials&#x27;</span>, <span class="string">&#x27;true&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改响应信息中的cookie域名</span></span><br><span class="line">    cookieDomainRewrite: <span class="string">&#x27;www.domain1.com&#x27;</span>  <span class="comment">// 可以为false，表示不修改</span></span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;Proxy server is listen at port 3000...&#x27;</span>);</span><br></pre></td></tr></table></figure><p>2）vue框架的跨域   node + vue + webpack + webpack-dev-server搭建的项目，跨域请求接口，直接修改webpack.config.js配置。开发环境下，vue渲染服务和接口代理服务都是webpack-dev-server同一个，所以页面与代理接口之间不再跨域。 webpack.config.js部分配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: &#123;&#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;&#125;,</span><br><span class="line">    ...</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        historyApiFallback: <span class="literal">true</span>,</span><br><span class="line">        proxy: [&#123;</span><br><span class="line">            context: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">            target: <span class="string">&#x27;http://www.domain2.com:8080&#x27;</span>,  <span class="comment">// 代理跨域目标接口</span></span><br><span class="line">            changeOrigin: <span class="literal">true</span>,</span><br><span class="line">            secure: <span class="literal">false</span>,  <span class="comment">// 当代理某些https服务报错时用</span></span><br><span class="line">            cookieDomainRewrite: <span class="string">&#x27;www.domain1.com&#x27;</span>  <span class="comment">// 可以为false，表示不修改</span></span><br><span class="line">        &#125;],</span><br><span class="line">        noInfo: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、document-domain-iframe跨域"><a href="#5、document-domain-iframe跨域" class="headerlink" title="5、document.domain + iframe跨域"></a>5、document.domain + iframe跨域</h3><p>  此方案仅限主域相同，子域不同的跨域应用场景。实现原理：两个页面都通过js强制设置document.domain为基础主域，就实现了同域。 1）父窗口：(<a href="http://www.domain.com/a.html">http://www.domain.com/a.html</a>)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe id=<span class="string">&quot;iframe&quot;</span> src=<span class="string">&quot;http://child.domain.com/b.html&quot;</span>&gt;&lt;/iframe&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="built_in">document</span>.domain = <span class="string">&#x27;domain.com&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> user = <span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>1）子窗口：(<a href="http://child.domain.com/a.html">http://child.domain.com/a.html</a>)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="built_in">document</span>.domain = <span class="string">&#x27;domain.com&#x27;</span>;</span><br><span class="line">    <span class="comment">// 获取父窗口中变量</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;get js data from parent ---&gt; &#x27;</span> + <span class="built_in">window</span>.parent.user);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="6、location-hash-iframe跨域"><a href="#6、location-hash-iframe跨域" class="headerlink" title="6、location.hash + iframe跨域"></a>6、location.hash + iframe跨域</h3><p>  实现原理： a欲与b跨域相互通信，通过中间页c来实现。 三个页面，不同域之间利用iframe的location.hash传值，相同域之间直接js访问来通信。   具体实现：A域：a.html -&gt; B域：b.html -&gt; A域：c.html，a与b不同域只能通过hash值单向通信，b与c也不同域也只能单向通信，但c与a同域，所以c可通过parent.parent访问a页面所有对象。 1）a.html：(<a href="http://www.domain1.com/a.html">http://www.domain1.com/a.html</a>)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe id=<span class="string">&quot;iframe&quot;</span> src=<span class="string">&quot;http://www.domain2.com/b.html&quot;</span> style=<span class="string">&quot;display:none;&quot;</span>&gt;&lt;/iframe&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> iframe = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;iframe&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向b.html传hash值</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        iframe.src = iframe.src + <span class="string">&#x27;#user=admin&#x27;</span>;</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 开放给同域c.html的回调方法</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">onCallback</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">&#x27;data from c.html ---&gt; &#x27;</span> + res);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>2）b.html：(<a href="http://www.domain2.com/b.html">http://www.domain2.com/b.html</a>)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe id=<span class="string">&quot;iframe&quot;</span> src=<span class="string">&quot;http://www.domain1.com/c.html&quot;</span> style=<span class="string">&quot;display:none;&quot;</span>&gt;&lt;/iframe&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> iframe = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;iframe&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听a.html传来的hash值，再传给c.html</span></span><br><span class="line">    <span class="built_in">window</span>.onhashchange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        iframe.src = iframe.src + location.hash;</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>3）c.html：(<a href="http://www.domain1.com/c.html">http://www.domain1.com/c.html</a>)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 监听b.html传来的hash值</span></span><br><span class="line">    <span class="built_in">window</span>.onhashchange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 再通过操作同域a.html的js回调，将结果传回</span></span><br><span class="line">        <span class="built_in">window</span>.parent.parent.onCallback(<span class="string">&#x27;hello: &#x27;</span> + location.hash.replace(<span class="string">&#x27;#user=&#x27;</span>, <span class="string">&#x27;&#x27;</span>));</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="7、window-name-iframe跨域"><a href="#7、window-name-iframe跨域" class="headerlink" title="7、window.name + iframe跨域"></a>7、window.name + iframe跨域</h3><p>  window.name属性的独特之处：name值在不同的页面（甚至不同域名）加载后依旧存在，并且可以支持非常长的 name 值（2MB）。 1）a.html：(<a href="http://www.domain1.com/a.html">http://www.domain1.com/a.html</a>)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> proxy = <span class="function"><span class="keyword">function</span>(<span class="params">url, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> state = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> iframe = <span class="built_in">document</span>.createElement(<span class="string">&#x27;iframe&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加载跨域页面</span></span><br><span class="line">    iframe.src = url;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// onload事件会触发2次，第1次加载跨域页，并留存数据于window.name</span></span><br><span class="line">    iframe.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (state === <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 第2次onload(同域proxy页)成功后，读取同域window.name中数据</span></span><br><span class="line">            callback(iframe.contentWindow.name);</span><br><span class="line">            destoryFrame();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (state === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 第1次onload(跨域页)成功后，切换到同域代理页面</span></span><br><span class="line">            iframe.contentWindow.location = <span class="string">&#x27;http://www.domain1.com/proxy.html&#x27;</span>;</span><br><span class="line">            state = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(iframe);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取数据以后销毁这个iframe，释放内存；这也保证了安全（不被其他域frame js访问）</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">destoryFrame</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        iframe.contentWindow.document.write(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">        iframe.contentWindow.close();</span><br><span class="line">        <span class="built_in">document</span>.body.removeChild(iframe);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求跨域b页面数据</span></span><br><span class="line">proxy(<span class="string">&#x27;http://www.domain2.com/b.html&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    alert(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>2）proxy.html：(<a href="http://www.domain1.com/proxy.html">http://www.domain1.com/proxy.html</a>)   中间代理页，与a.html同域，内容为空即可。</p><p>3）b.html：(<a href="http://www.domain2.com/b.html">http://www.domain2.com/b.html</a>)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    window.name &#x3D; &#39;This is domain2 data!&#39;;</span><br><span class="line">&lt;&#x2F;script&gt;javascript</span><br></pre></td></tr></table></figure><p>  通过iframe的src属性由外域转向本地域，跨域数据即由iframe的window.name从外域传递到本地域。这个就巧妙地绕过了浏览器的跨域访问限制，但同时它又是安全操作。</p><h3 id="8、postMessage跨域"><a href="#8、postMessage跨域" class="headerlink" title="8、postMessage跨域"></a>8、postMessage跨域</h3><p>  postMessage是HTML5 XMLHttpRequest Level 2中的API，且是为数不多可以跨域操作的window属性之一，它可用于解决以下方面的问题：</p><ul><li>页面和其打开的新窗口的数据传递</li><li>多窗口之间消息传递</li><li>页面与嵌套的iframe消息传递</li><li>上面三个场景的跨域数据传递</li></ul><p>用法：postMessage(data,origin)方法接受两个参数：</p><ul><li>data： html5规范支持任意基本类型或可复制的对象，但部分浏览器只支持字符串，所以传参时最好用JSON.stringify()序列化。</li><li>origin： 协议+主机+端口号，也可以设置为”*”，表示可以传递给任意窗口，如果要指定和当前窗口同源的话设置为”/“。</li></ul><p>1）a.html：(<a href="http://www.domain1.com/a.html">http://www.domain1.com/a.html</a>)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe id=<span class="string">&quot;iframe&quot;</span> src=<span class="string">&quot;http://www.domain2.com/b.html&quot;</span> style=<span class="string">&quot;display:none;&quot;</span>&gt;&lt;/iframe&gt;</span><br><span class="line">&lt;script&gt;       </span><br><span class="line">    <span class="keyword">var</span> iframe = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;iframe&#x27;</span>);</span><br><span class="line">    iframe.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> data = &#123;</span><br><span class="line">            name: <span class="string">&#x27;aym&#x27;</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 向domain2传送跨域数据</span></span><br><span class="line">        iframe.contentWindow.postMessage(<span class="built_in">JSON</span>.stringify(data), <span class="string">&#x27;http://www.domain2.com&#x27;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接受domain2返回数据</span></span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;message&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">&#x27;data from domain2 ---&gt; &#x27;</span> + e.data);</span><br><span class="line">    &#125;, <span class="literal">false</span>);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>2）b.html：(<a href="http://www.domain2.com/b.html">http://www.domain2.com/b.html</a>)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 接收domain1的数据</span></span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;message&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">&#x27;data from domain1 ---&gt; &#x27;</span> + e.data);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> data = <span class="built_in">JSON</span>.parse(e.data);</span><br><span class="line">        <span class="keyword">if</span> (data) &#123;</span><br><span class="line">            data.number = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 处理后再发回domain1</span></span><br><span class="line">            <span class="built_in">window</span>.parent.postMessage(<span class="built_in">JSON</span>.stringify(data), <span class="string">&#x27;http://www.domain1.com&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="literal">false</span>);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="9、WebSocket协议跨域"><a href="#9、WebSocket协议跨域" class="headerlink" title="9、WebSocket协议跨域"></a>9、WebSocket协议跨域</h3><p>  WebSocket protocol是HTML5一种新的协议。它实现了浏览器与服务器全双工通信，同时允许跨域通讯，是server push技术的一种很好的实现。 原生WebSocket API使用起来不太方便，我们使用Socket.io，它很好地封装了webSocket接口，提供了更简单、灵活的接口，也对不支持webSocket的浏览器提供了向下兼容。 1）前端代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;user input：&lt;input type=<span class="string">&quot;text&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;https://cdn.bootcss.com/socket.io/2.2.0/socket.io.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">var</span> socket = io(<span class="string">&#x27;http://www.domain2.com:8080&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接成功处理</span></span><br><span class="line">socket.on(<span class="string">&#x27;connect&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 监听服务端消息</span></span><br><span class="line">    socket.on(<span class="string">&#x27;message&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;data from server: ---&gt; &#x27;</span> + msg); </span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听服务端关闭</span></span><br><span class="line">    socket.on(<span class="string">&#x27;disconnect&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Server socket has closed.&#x27;</span>); </span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;input&#x27;</span>)[<span class="number">0</span>].onblur = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    socket.send(<span class="built_in">this</span>.value);</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>2）Nodejs socket后台：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> socket = <span class="built_in">require</span>(<span class="string">&#x27;socket.io&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启http服务</span></span><br><span class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">        <span class="string">&#x27;Content-type&#x27;</span>: <span class="string">&#x27;text/html&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line">    res.end();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(<span class="string">&#x27;8080&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;Server is running at port 8080...&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听socket连接</span></span><br><span class="line">socket.listen(server).on(<span class="string">&#x27;connection&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">client</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 接收信息</span></span><br><span class="line">    client.on(<span class="string">&#x27;message&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>) </span>&#123;</span><br><span class="line">        client.send(<span class="string">&#x27;hello：&#x27;</span> + msg);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;data from client: ---&gt; &#x27;</span> + msg);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 断开处理</span></span><br><span class="line">    client.on(<span class="string">&#x27;disconnect&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Client socket has closed.&#x27;</span>); </span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>  以上就是9种常见的跨域解决方案，jsonp（只支持get请求，支持老的IE浏览器）适合加载不同域名的js、css，img等静态资源；CORS（支持所有类型的HTTP请求，但浏览器IE10以下不支持）适合做ajax各种跨域请求；Nginx代理跨域和nodejs中间件跨域原理都相似，都是搭建一个服务器，直接在服务器端请求HTTP接口，这适合前后端分离的前端项目调后端接口。document.domain+iframe适合主域名相同，子域名不同的跨域请求。postMessage、websocket都是HTML5新特性，兼容性不是很好，只适用于主流浏览器和IE10+。   这么多的跨域方案，没有最好，只有最合适的，根据具体的使用场景选择跨域方案。希望这篇博文能带给大家一点帮助~~</p>]]></content>
      
      
      <categories>
          
          <category> 跨域 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 跨域 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何应对面试官的手写Promise</title>
      <link href="/count-goblin/2021/01/21/%E5%A6%82%E4%BD%95%E5%BA%94%E5%AF%B9%E9%9D%A2%E8%AF%95%E5%AE%98%E7%9A%84%E6%89%8B%E5%86%99Promise/"/>
      <url>/count-goblin/2021/01/21/%E5%A6%82%E4%BD%95%E5%BA%94%E5%AF%B9%E9%9D%A2%E8%AF%95%E5%AE%98%E7%9A%84%E6%89%8B%E5%86%99Promise/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\count-goblin\assets\css\APlayer.min.css"><script src="\count-goblin\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><strong>Promise是处理异步编码的一个解决方案，在Promise出现以前，异步代码的编写都是通过回调函数来处理的，回调函数本身没有任何问题，只是当多次异步回调有逻辑关系时就会变得复杂：</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line">fs.readFile(<span class="string">&#x27;1.doc&#x27;</span>, <span class="function">(<span class="params">err,res</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.readFile(<span class="string">&#x27;2.doc&#x27;</span>, <span class="function">(<span class="params">err,res</span>) =&gt;</span> &#123;</span><br><span class="line">        fs.readFile(<span class="string">&#x27;3.doc&#x27;</span>, <span class="function">(<span class="params">err,res</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 可能还有后续代码...</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p> 不过Promise的横空出世就有效的解决了这一问题，也就是回调地狱问题； 而手写Promise也是最近几年面试很容易考到的问题，下面收集了简易版的Promise和合乎<a href="https://promisesaplus.com/">Promises/A+规范</a>的Promise，仅供参考！</p></blockquote><h3 id="一、简易版"><a href="#一、简易版" class="headerlink" title="一、简易版"></a><strong>一、简易版</strong></h3><h3 id="1、首先定义constructor"><a href="#1、首先定义constructor" class="headerlink" title="1、首先定义constructor"></a><strong>1、首先定义constructor</strong></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">fn</span>)</span> &#123;</span><br><span class="line">        <span class="comment">// 定义Promise的三种状态</span></span><br><span class="line">        <span class="built_in">this</span>.statusObj = &#123;</span><br><span class="line">            PENDING: <span class="string">&#x27;PENDING&#x27;</span>,</span><br><span class="line">            RESOLVED: <span class="string">&#x27;RESOLVED&#x27;</span>,</span><br><span class="line">            REJECTED: <span class="string">&#x27;REJECTED&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.value = <span class="literal">null</span>;<span class="comment">// 定义传递给then的value</span></span><br><span class="line">        <span class="built_in">this</span>.status = <span class="built_in">this</span>.statusObj.PENDING; <span class="comment">// 设置当前Promise的状态</span></span><br><span class="line">        <span class="built_in">this</span>.resolvedCallBacks = []; <span class="comment">// 定义Promise成功状态的回调函数集合</span></span><br><span class="line">        <span class="built_in">this</span>.rejectedCallBacks = []; <span class="comment">// 定义Promise失败状态的回调函数集合</span></span><br><span class="line">        MyPromise.that = <span class="built_in">this</span>; <span class="comment">// 为静态方法定义其内部可以使用的指向实例的that</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 执行new Promise() 内传入的方法</span></span><br><span class="line">            fn(MyPromise.resolve, MyPromise.reject);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            MyPromise.reject(<span class="built_in">this</span>.value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="2、完善resolve、reject、then方法"><a href="#2、完善resolve、reject、then方法" class="headerlink" title="2、完善resolve、reject、then方法"></a><strong>2、完善resolve、reject、then方法</strong></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 静态resolve方法，MyPromise实例不可访问;</span></span><br><span class="line"><span class="comment"> * 支持类MyPromise访问，例：MyPromise.resolve(&#x27;success&#x27;).then(e=&gt;e)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>value </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="function"><span class="title">resolve</span>(<span class="params">value</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> that = MyPromise.that; <span class="comment">// 由于静态方法内的this访问的是类还不是实例，所以使用这种办法访问对象实例</span></span><br><span class="line">    <span class="keyword">const</span> f = that <span class="keyword">instanceof</span> MyPromise; <span class="comment">// 确认是否是MyPromise实例访问resolve</span></span><br><span class="line">    <span class="comment">// MyPromise 实例访问resolve,如果访问成功 状态改变、值改变</span></span><br><span class="line">    <span class="keyword">if</span> (f &amp;&amp; that.status === that.statusObj.PENDING) &#123;</span><br><span class="line">        that.status = that.statusObj.RESOLVED;</span><br><span class="line">        that.value = value;</span><br><span class="line">        that.resolvedCallBacks.map(<span class="function"><span class="params">cb</span> =&gt;</span> that.value = cb(that.value));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// MyPromise 类访问resolve</span></span><br><span class="line">    <span class="keyword">if</span> (!f) &#123;</span><br><span class="line">        <span class="keyword">const</span> obj = <span class="keyword">new</span> MyPromise();</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Object</span>.assign(obj, &#123;</span><br><span class="line">            status: obj.statusObj.RESOLVED,</span><br><span class="line">            value</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 那么<strong>resolve</strong>方法就和resolve方法差不多</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 静态resolve方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>value </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="function"><span class="title">reject</span>(<span class="params">value</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> that = MyPromise.that;</span><br><span class="line">    <span class="keyword">const</span> f = that <span class="keyword">instanceof</span> MyPromise;</span><br><span class="line">    <span class="keyword">if</span> (f &amp;&amp; that.status === that.statusObj.REJECTED) &#123;</span><br><span class="line">        that.status = that.statusObj.REJECTED;</span><br><span class="line">        that.value = value;</span><br><span class="line">        that.rejectedCallBacks.map(<span class="function"><span class="params">cb</span> =&gt;</span> that.value = cb(that.value));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!f) &#123;</span><br><span class="line">        <span class="keyword">const</span> obj = <span class="keyword">new</span> MyPromise();</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Object</span>.assign(obj, &#123;</span><br><span class="line">            status: that.statusObj.REJECTED,</span><br><span class="line">            value</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后是<strong>then</strong>方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * MyPromise 原型上的then方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>onFulfilled </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>onRejected </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="title">then</span>(<span class="params">onFulfilled, onRejected</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; PENDING, RESOLVED, REJECTED &#125; = <span class="built_in">this</span>.statusObj;</span><br><span class="line">    <span class="keyword">const</span> f = <span class="keyword">typeof</span> onFulfilled == <span class="string">&#x27;function&#x27;</span> ? onFulfilled : <span class="function"><span class="params">c</span> =&gt;</span> c</span><br><span class="line">    <span class="keyword">const</span> r = <span class="keyword">typeof</span> onRejected == <span class="string">&#x27;function&#x27;</span> ? onRejected : <span class="function"><span class="params">c</span> =&gt;</span> &#123; <span class="keyword">throw</span> c &#125;;</span><br><span class="line">    <span class="keyword">switch</span> (<span class="built_in">this</span>.status) &#123;</span><br><span class="line">        <span class="keyword">case</span> PENDING: <span class="comment">// PENDING 状态下 向下回调函数结合添加callback</span></span><br><span class="line">            <span class="built_in">this</span>.resolvedCallBacks.push(f);</span><br><span class="line">            <span class="built_in">this</span>.rejectedCallBacks.push(r);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> RESOLVED:</span><br><span class="line">            <span class="built_in">this</span>.value = f(<span class="built_in">this</span>.value); <span class="comment">// 将回调函数的返回值赋值给实例的 value ，满足链式调用then方法时传递value</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> REJECTED:</span><br><span class="line">            <span class="built_in">this</span>.value = r(<span class="built_in">this</span>.value); <span class="comment">// 将回调函数的返回值赋值给实例的 value ，满足链式调用then方法时传递value</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 满足链式调用then，返回MyPromise实例对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此呢，我们自定的MyPromise方法就写完了 ，接下里就是测试环节</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// new 一个Promise进行测试</span></span><br><span class="line">MyPromise.resolve(<span class="string">&#x27;success&#x27;</span>).then(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e);</span><br><span class="line">    <span class="keyword">return</span> e + <span class="number">1</span>;</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> MyPromise(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        resolve(<span class="number">1</span>)</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;)</span><br><span class="line">    .then(<span class="function">(<span class="params">res2</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res2);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;).then(<span class="function">(<span class="params">res3</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res3);</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>下面是测试的结果。</p><p><img src= "/count-goblin/img/loading.gif" data-lazy-src="https://pic1.zhimg.com/v2-d031456425c824e3f50142a793be8dc4_b.png" alt="img"></p><p>下面附上完整的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPromise</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">fn</span>)</span> &#123;</span><br><span class="line">        <span class="comment">// 定义Promise的三种状态</span></span><br><span class="line">        <span class="built_in">this</span>.statusObj = &#123;</span><br><span class="line">            PENDING: <span class="string">&#x27;PENDING&#x27;</span>,</span><br><span class="line"></span><br><span class="line">            RESOLVED: <span class="string">&#x27;RESOLVED&#x27;</span>,</span><br><span class="line">            REJECTED: <span class="string">&#x27;REJECTED&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.value = <span class="literal">null</span>;<span class="comment">// 定义传递给then的value</span></span><br><span class="line">        <span class="built_in">this</span>.status = <span class="built_in">this</span>.statusObj.PENDING; <span class="comment">// 设置当前Promise的状态</span></span><br><span class="line">        <span class="built_in">this</span>.resolvedCallBacks = []; <span class="comment">// 定义Promise成功状态的回调函数集合</span></span><br><span class="line">        <span class="built_in">this</span>.rejectedCallBacks = []; <span class="comment">// 定义Promise失败状态的回调函数集合</span></span><br><span class="line">        MyPromise.that = <span class="built_in">this</span>; <span class="comment">// 为静态方法定义其内部可以使用的指向实例的that</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 执行new Promise() 内传入的方法</span></span><br><span class="line">            fn(MyPromise.resolve, MyPromise.reject);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            MyPromise.reject(<span class="built_in">this</span>.value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 静态resolve方法，MyPromise实例不可访问;</span></span><br><span class="line"><span class="comment">     * 支持类MyPromise访问，例：MyPromise.resolve(&#x27;success&#x27;).then(e=&gt;e)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>value </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="title">resolve</span>(<span class="params">value</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> that = MyPromise.that; <span class="comment">// 由于静态方法内的this访问的是类还不是实例，所以使用这种办法访问对象实例</span></span><br><span class="line">        <span class="keyword">const</span> f = that <span class="keyword">instanceof</span> MyPromise; <span class="comment">// 确认是否是MyPromise实例访问resolve</span></span><br><span class="line">        <span class="comment">// MyPromise 实例访问resolve,如果访问成功 状态改变、值改变</span></span><br><span class="line">        <span class="keyword">if</span> (f &amp;&amp; that.status === that.statusObj.PENDING) &#123;</span><br><span class="line">            that.status = that.statusObj.RESOLVED;</span><br><span class="line">            that.value = value;</span><br><span class="line">            that.resolvedCallBacks.map(<span class="function"><span class="params">cb</span> =&gt;</span> that.value = cb(that.value));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// MyPromise 类访问resolve</span></span><br><span class="line">        <span class="keyword">if</span> (!f) &#123;</span><br><span class="line">            <span class="keyword">const</span> obj = <span class="keyword">new</span> MyPromise();</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Object</span>.assign(obj, &#123;</span><br><span class="line">                status: obj.statusObj.RESOLVED,</span><br><span class="line">                value</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 静态resolve方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>value </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="title">reject</span>(<span class="params">value</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> that = MyPromise.that;</span><br><span class="line">        <span class="keyword">const</span> f = that <span class="keyword">instanceof</span> MyPromise;</span><br><span class="line">        <span class="keyword">if</span> (f &amp;&amp; that.status === that.statusObj.REJECTED) &#123;</span><br><span class="line">            that.status = that.statusObj.REJECTED;</span><br><span class="line">            that.value = value;</span><br><span class="line">            that.rejectedCallBacks.map(<span class="function"><span class="params">cb</span> =&gt;</span> that.value = cb(that.value));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!f) &#123;</span><br><span class="line">            <span class="keyword">const</span> obj = <span class="keyword">new</span> MyPromise();</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Object</span>.assign(obj, &#123;</span><br><span class="line">                status: that.statusObj.REJECTED,</span><br><span class="line">                value</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * MyPromise 原型上的then方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>onFulfilled </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>onRejected </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="title">then</span>(<span class="params">onFulfilled, onRejected</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; PENDING, RESOLVED, REJECTED &#125; = <span class="built_in">this</span>.statusObj;</span><br><span class="line">        <span class="keyword">const</span> f = <span class="keyword">typeof</span> onFulfilled == <span class="string">&#x27;function&#x27;</span> ? onFulfilled : <span class="function"><span class="params">c</span> =&gt;</span> c</span><br><span class="line">        <span class="keyword">const</span> r = <span class="keyword">typeof</span> onRejected == <span class="string">&#x27;function&#x27;</span> ? onRejected : <span class="function"><span class="params">c</span> =&gt;</span> &#123; <span class="keyword">throw</span> c &#125;;</span><br><span class="line">        <span class="keyword">switch</span> (<span class="built_in">this</span>.status) &#123;</span><br><span class="line">            <span class="keyword">case</span> PENDING: <span class="comment">// PENDING 状态下 向下回调函数结合添加callback</span></span><br><span class="line">                <span class="built_in">this</span>.resolvedCallBacks.push(f);</span><br><span class="line">                <span class="built_in">this</span>.rejectedCallBacks.push(r);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> RESOLVED:</span><br><span class="line">                <span class="built_in">this</span>.value = f(<span class="built_in">this</span>.value); <span class="comment">// 将回调函数的返回值赋值给实例的 value ，满足链式调用then方法时传递value</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> REJECTED:</span><br><span class="line">                <span class="built_in">this</span>.value = r(<span class="built_in">this</span>.value); <span class="comment">// 将回调函数的返回值赋值给实例的 value ，满足链式调用then方法时传递value</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 满足链式调用then，返回MyPromise实例对象</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// new 一个Promise进行测试</span></span><br><span class="line">MyPromise.resolve(<span class="string">&#x27;success&#x27;</span>).then(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e);</span><br><span class="line">    <span class="keyword">return</span> e + <span class="number">1</span>;</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> MyPromise(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        resolve(<span class="number">1</span>)</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;)</span><br><span class="line">    .then(<span class="function">(<span class="params">res2</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res2);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;).then(<span class="function">(<span class="params">res3</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res3);</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>那么合乎Promises/A+规范的Promise后续收集到了再添加进去吧。。。</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在HTML中使用JavaScript</title>
      <link href="/count-goblin/2021/01/21/%E5%9C%A8HTML%E4%B8%AD%E4%BD%BF%E7%94%A8JavaScript/"/>
      <url>/count-goblin/2021/01/21/%E5%9C%A8HTML%E4%B8%AD%E4%BD%BF%E7%94%A8JavaScript/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\count-goblin\assets\css\APlayer.min.css"><script src="\count-goblin\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="在HTML中使用JavaScript"><a href="#在HTML中使用JavaScript" class="headerlink" title="在HTML中使用JavaScript"></a><strong>在HTML中使用JavaScript</strong></h2><p>在HTML中使用JavaScript的方法我们使用最多的有两种：<strong>嵌套在HTML内、引入外部文件</strong></p><h3 id="嵌套在HTML"><a href="#嵌套在HTML" class="headerlink" title="嵌套在HTML"></a><strong>嵌套在HTML</strong></h3><p> 在嵌套时，我们主要是借助**<script>**元素实现，像这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;Demo&lt;/title&gt;</span><br><span class="line">            &lt;script&gt;</span><br><span class="line">                <span class="function"><span class="keyword">function</span> <span class="title">name</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">                    sayBey(<span class="string">&#x27;Bey&#x27;</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">            &lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        ...内容</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong>在<script>中定义了6个属性，其中有个属性已被废除（language）</strong></p><ul><li><strong>async</strong>: 可选，只是用与外部脚本文件，目的是告诉浏览器立即下载文件，但不会立即执行，知道网页内容完全解释完后再去执行脚本，但是如果存在多个脚本的时候，不会保证脚本被执行的顺序</li><li><strong>defer</strong>: 可选，只是用与外部脚本文件，目的是告诉浏览器立即下载文件，但不会立即执行，直到网页内容完全解释完后再去执行脚本，和async不一样的是，它保证脚本执行顺序，从上到下</li><li><strong>src</strong>: 表示需要执行的<strong>外部脚本</strong>的路径</li><li><strong>type:</strong> 必选属性，表示编码使用的脚本语言的内容类型（MIME类型），实际上，服务器在传送文件时使用的类型通常是<strong>application/javascript</strong>,但是这个type值很可能会被忽略，所以我在现在一直使用<strong>type=”text/javascript”</strong>,或者<strong>type=”text/ecmascript”</strong></li><li><strong>charset</strong>: 指定src指定文件的代码的字符集</li></ul><p><strong>注意</strong></p><p>1、直接使用 <script>元素嵌套在页面内是，元素内的代码中不可以再次出现**</script>**的字符转，像这样：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Demo2<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="keyword">function</span> <span class="title">showScript</span>(<span class="params">params</span>) </span>&#123;</span></span><br><span class="line">                    showScript(&#x27;<span class="tag">&lt;/<span class="name">script</span>&gt;</span>&#x27;)</span><br><span class="line">                    &#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        ...内容</span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 如果代码中这样写的话，页面在解释showScript函数时，检测到</script>时就以为已经完全加载了脚本了，但实际并不是！淡然也有办法解决他，就是使用转义符：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Demo3<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="keyword">function</span> <span class="title">showScript</span>(<span class="params">params</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    showScript(<span class="string">&#x27;&lt;\/script&gt;&#x27;</span>)</span></span><br><span class="line">                    &#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        ...内容</span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、元素<script>的使用位置</p><p> 我们传统的使用方法就是在<head>内使用，但是还有一种使用方法，就是卸载<body>内——-</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Demo3<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        ...内容</span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">showScript</span>(<span class="params">params</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                showScript(<span class="string">&#x27;&lt;\/script&gt;&#x27;</span>)</span></span><br><span class="line">                &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 像上面写的话有个好处就是，页面不会因为未完全加载脚本而出现空白页面，也就给用户一种页面响应变快的感觉，也算是优化了！</p><h3 id="引入外部文件"><a href="#引入外部文件" class="headerlink" title="引入外部文件"></a><strong>引入外部文件</strong></h3><p> 在页面内引入外部的脚本文件也是我们经常使用的方法，写法也很多讲究</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Demo4<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;demo4.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">defer</span>=<span class="string">&quot;defer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;demo5.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">defer</span>=<span class="string">&quot;defer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        ...内容</span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 上面这种写法，注意用到了<strong>defer</strong>属性，也就是延迟执行，页面会立即加载这两个脚本，但不会立即执行，等到解析到</html>后，才会按照顺序，先执行demo4.js然后执行 demo5.js。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Demo4<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;demo4.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">async</span>=<span class="string">&quot;async&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;demo5.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">async</span>=<span class="string">&quot;async&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        ...内容</span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 当<script>标签内出现async时，加载的机制和defer差不多，执行在执行两个脚本的时候，并不保证demo4.js会在demo5.js之前执行。</p><h3 id="的出现"><a href="#的出现" class="headerlink" title="的出现"></a><strong><noscript>的出现</strong></h3><p> 我们不能保证全部的浏览器都会支持脚本语言或者浏览器是否禁用了脚本，那<noscript>元素的出现就是为了在这种情况友好的化解这个“尴尬”：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Demo5<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;demo6.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">async</span>=<span class="string">&quot;async&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;demo7.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">async</span>=<span class="string">&quot;async&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        ...内容</span><br><span class="line">        <span class="tag">&lt;<span class="name">noscript</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>需要开启脚本支持<span class="tag">&lt;/<span class="name">p</span>&gt;</span> // 其他的提示性语言</span><br><span class="line">        <span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 以上写法就会在页面不支持或者已经禁用脚本的情况下告诉用户页面未能达到预期效果的原因。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><p> 其实使用脚本的方法也没有硬性的约束，还是看具体的场景，不过使用外部脚本文件的开发者一般会注意到以下几点优势：</p><ul><li><strong>可维护</strong></li><li><strong>可缓存</strong></li><li><strong>适应未来</strong></li></ul><p>说下这个缓存，就是说，有些情况下，可能会有多个页面使用同一个脚本文件，此时只需一个页面加载下脚本，其他的页面就不用加载脚本了。</p>]]></content>
      
      
      <categories>
          
          <category> html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript的组成</title>
      <link href="/count-goblin/2021/01/21/JavaScript%E7%9A%84%E7%BB%84%E6%88%90/"/>
      <url>/count-goblin/2021/01/21/JavaScript%E7%9A%84%E7%BB%84%E6%88%90/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\count-goblin\assets\css\APlayer.min.css"><script src="\count-goblin\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>JavaScript的诞生</strong></p><p>​      在早期，人们在客户端发起一个简单的表单后，服务器的响应时间由于网速的缓慢，有时候会达到二三十秒，但最终可能由于一个表单校验的问题返回失败！为了解决这一问题，当时 Netscape 公司的Brendan Eich 就开始操办这件事，没过多久就开发出一种脚本语言并取名 LiveScript，为了如期的发布这门脚本语言，Netscape与Sun公司联盟开发，并赶着Java的热度，把 LiveScript改名为 JavaScript 发布了出去。（JavaScript 1.0版本）后续为了规定JavaScript的语法和特性，ECMA（欧洲计算机制造商协会）以JavaScript1.1为蓝本，指定39号技术委员为（TC39）</p><p>[TC39]    由Netscape、Sun、微软、Broland和一些关注脚本语言的程序员组成</p><p>去负责标准化一种通用、跨平台、供应商中立的脚本语法和语义。最终定义了一种名为ECMAScript的标准。</p><h3 id="JavaScript的组成"><a href="#JavaScript的组成" class="headerlink" title="JavaScript的组成"></a><strong>JavaScript的组成</strong></h3><p>JavaScript有三部分组成，ECMAScript、DOM、BOM；</p><p>1、DOM，是针对XML但是经过扩展用于HTML的一个API，他讲整个网页映射为一个多层节点结构，HTML页面有不同类型的节点组成，每个节点也包含了不同类型的数据。比如以下的页面，我们分解下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;p-panel&gt;</span><br><span class="line">   &lt;p-header&gt;头部&lt;/p-header&gt;</span><br><span class="line">     &lt;p-dataTable [value]=<span class="string">&quot;&quot;</span> &gt;</span><br><span class="line">       &lt;p-column field=<span class="string">&quot;***&quot;</span>&gt;&lt;/p-column&gt;</span><br><span class="line">     &lt;/p-dataTable&gt;</span><br><span class="line"> &lt;/p-panel&gt;</span><br></pre></td></tr></table></figure><p>这个简单的页面就会被分解为一个树，也就是我们常说的DOM树：</p><p><img src= "/count-goblin/img/loading.gif" data-lazy-src="https://pic1.zhimg.com/v2-22daf2f760d7b9e43f4baaf5a32f5ba4_b.png" alt="img"></p><p>DOM树</p><p>2、BOM，扩展：</p><ul><li>弹出新浏览器敞口的功能</li><li>移动</li><li>关闭、缩放浏览器窗口的功能</li><li>提供浏览器详细信息navigator对象</li><li>加载页面详细信息的location对象、显示分辨率详细信息（screen）</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><ul><li>ECMAScript：JavaScript核心部门，提供了JavaScript标准</li><li>DOM（文档对象模型）：提供操作和访问网页内容的接口和方法</li><li>BOM（浏览器对象模型）：提供与浏览器交互的接口和方法</li></ul>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot配置devtools实现项目热部署</title>
      <link href="/count-goblin/2021/01/15/Spring-Boot%E9%85%8D%E7%BD%AEdevtools%E5%AE%9E%E7%8E%B0%E9%A1%B9%E7%9B%AE%E7%83%AD%E9%83%A8%E7%BD%B2/"/>
      <url>/count-goblin/2021/01/15/Spring-Boot%E9%85%8D%E7%BD%AEdevtools%E5%AE%9E%E7%8E%B0%E9%A1%B9%E7%9B%AE%E7%83%AD%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\count-goblin\assets\css\APlayer.min.css"><script src="\count-goblin\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>我们知道，spring-boot-devtools是spring提供的快速的启动Spring Boot应用，可以为我们节省大量的时间。</p><h2 id="配置如下"><a href="#配置如下" class="headerlink" title="配置如下"></a>配置如下</h2><h3 id="首先是在pom-xml文件中添加如下依赖和插件"><a href="#首先是在pom-xml文件中添加如下依赖和插件" class="headerlink" title="首先是在pom.xml文件中添加如下依赖和插件"></a>首先是在pom.xml文件中添加如下依赖和插件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="在application-properties中添加"><a href="#在application-properties中添加" class="headerlink" title="在application.properties中添加"></a>在application.properties中添加</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.devtools.restart.enabled</span>: <span class="string">true</span></span><br><span class="line"><span class="comment">#设置重启的目录</span></span><br><span class="line"><span class="comment">#spring.devtools.restart.additional-paths: src/main/java</span></span><br><span class="line"><span class="comment">#classpath目录下的WEB-INF文件夹内容修改不重启</span></span><br><span class="line"><span class="meta">spring.devtools.restart.exclude</span>: <span class="string">WEB-INF/**</span></span><br></pre></td></tr></table></figure><h3 id="如果是IDEA还需要再配置一下，具体如下："><a href="#如果是IDEA还需要再配置一下，具体如下：" class="headerlink" title="如果是IDEA还需要再配置一下，具体如下："></a>如果是IDEA还需要再配置一下，具体如下：</h3><p>​    1.File-&gt;Settings-&gt;Buide、execution-&gt;Compiler,选中Build Project automatically，这样当我们修改了Java类后，IDEA就会自动编译了。</p><p><img src= "/count-goblin/img/loading.gif" data-lazy-src="https://upload-images.jianshu.io/upload_images/6979245-32295f77b21f89be.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="QQ截图20190313175052.png"></p><p>​    2.使用快捷键Ctrl+Shift+Alt+/,选择弹框中的Registry,勾上 Compiler autoMake allow when app running<img src= "/count-goblin/img/loading.gif" data-lazy-src="https://upload-images.jianshu.io/upload_images/6979245-8e9c2903b8e8e281.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="QQ截图20190313175627.png"></p><p>此时修改java类就不用自己动手再次编译了，应用会重启，相应的页面也会刷新</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot集成kaptcha实现表单图片验证</title>
      <link href="/count-goblin/2021/01/15/Spring-Boot%E9%9B%86%E6%88%90kaptcha%E5%AE%9E%E7%8E%B0%E8%A1%A8%E5%8D%95%E5%9B%BE%E7%89%87%E9%AA%8C%E8%AF%81/"/>
      <url>/count-goblin/2021/01/15/Spring-Boot%E9%9B%86%E6%88%90kaptcha%E5%AE%9E%E7%8E%B0%E8%A1%A8%E5%8D%95%E5%9B%BE%E7%89%87%E9%AA%8C%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\count-goblin\assets\css\APlayer.min.css"><script src="\count-goblin\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>​    Kaptcha是一个基于SimpleCaptcha的验证码开源项目,Kaptcha的使用比较方便，只需添加jar包依赖之后简单地配置就可以使用了。</p><h2 id="kaptcha"><a href="#kaptcha" class="headerlink" title="kaptcha"></a>kaptcha</h2><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><p>​    如果你使用maven来统一管理jar包，则在工程的pom.xml中添加dependency</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.code.kaptcha<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kaptcha<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    如果是非maven管理的项目，则直接在官网下载kaptcha的jar包，然后添加到项目lib库中，下载地址：</p><p><a href="http://code.google.com/p/kaptcha/downloads/list">Kaptcha</a> </p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ul><li>   后台生成验证码图片，将图片传到前台。</li><li>   后台在session中保存验证码内容。 </li><li>   前台输入验证码后传到后台在后台取出session中保存的验证码进行校验。</li></ul><p>注意，验证码的明文是不能传送到前端的。前端内容都是透明的，不安全。验证码是用来防机器人并不是单单防人。如果把验证码明文传到前端很容易就会被破解。</p><h3 id="图片验证码的配置类KaptchaConfig"><a href="#图片验证码的配置类KaptchaConfig" class="headerlink" title="图片验证码的配置类KaptchaConfig"></a>图片验证码的配置类KaptchaConfig</h3><p>定义图片的信息，包括边框，颜色等等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> com.google.code.kaptcha.impl.DefaultKaptcha;</span><br><span class="line"><span class="keyword">import</span> com.google.code.kaptcha.util.Config;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: component</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: ***</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 这是图片验证的配置类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2019/4/5 10:51</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KaptchaConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DefaultKaptcha <span class="title">getDefaultKaptcha</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        com.google.code.kaptcha.impl.DefaultKaptcha defaultKaptcha = <span class="keyword">new</span> com.google.code.kaptcha.impl.DefaultKaptcha();</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">// 图片边框</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.border&quot;</span>, <span class="string">&quot;yes&quot;</span>);</span><br><span class="line">        <span class="comment">// 边框颜色</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.border.color&quot;</span>, <span class="string">&quot;105,179,90&quot;</span>);</span><br><span class="line">        <span class="comment">// 字体颜色</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.textproducer.font.color&quot;</span>, <span class="string">&quot;red&quot;</span>);</span><br><span class="line">        <span class="comment">// 图片宽</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.image.width&quot;</span>, <span class="string">&quot;110&quot;</span>);</span><br><span class="line">        <span class="comment">// 图片高</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.image.height&quot;</span>, <span class="string">&quot;40&quot;</span>);</span><br><span class="line">        <span class="comment">// 字体大小</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.textproducer.font.size&quot;</span>, <span class="string">&quot;30&quot;</span>);</span><br><span class="line">        <span class="comment">// session key</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.session.key&quot;</span>, <span class="string">&quot;code&quot;</span>);</span><br><span class="line">        <span class="comment">// 验证码长度</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.textproducer.char.length&quot;</span>, <span class="string">&quot;4&quot;</span>);</span><br><span class="line">        <span class="comment">// 字体</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.textproducer.font.names&quot;</span>, <span class="string">&quot;宋体,楷体,微软雅黑&quot;</span>);</span><br><span class="line">        Config config = <span class="keyword">new</span> Config(properties);</span><br><span class="line">        defaultKaptcha.setConfig(config);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> defaultKaptcha;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="KaptchaController类实现图片的生成与校验"><a href="#KaptchaController类实现图片的生成与校验" class="headerlink" title="KaptchaController类实现图片的生成与校验"></a>KaptchaController类实现图片的生成与校验</h3><p>首先一定要注入验证码工具 DefaultKaptcha</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">    DefaultKaptcha defaultKaptcha;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletOutputStream;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"><span class="keyword">import</span> com.google.code.kaptcha.impl.DefaultKaptcha;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: component</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: ***</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: Kaptcha控制</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2019/4/5 10:54</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KaptchaController</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1、验证码工具</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DefaultKaptcha defaultKaptcha;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 2、生成验证码</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> httpServletRequest</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> httpServletResponse</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/defaultKaptcha&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">defaultKaptcha</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] captchaChallengeAsJpeg = <span class="keyword">null</span>;</span><br><span class="line">        ByteArrayOutputStream jpegOutputStream = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 生产验证码字符串并保存到session中</span></span><br><span class="line">            String createText = defaultKaptcha.createText();</span><br><span class="line">            httpServletRequest.getSession().setAttribute(<span class="string">&quot;rightCode&quot;</span>, createText);</span><br><span class="line">            <span class="comment">// 使用生产的验证码字符串返回一个BufferedImage对象并转为byte写入到byte数组中</span></span><br><span class="line">            BufferedImage challenge = defaultKaptcha.createImage(createText);</span><br><span class="line">            ImageIO.write(challenge, <span class="string">&quot;jpg&quot;</span>, jpegOutputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line">            httpServletResponse.sendError(HttpServletResponse.SC_NOT_FOUND);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义response输出类型为image/jpeg类型，使用response输出流输出图片的byte数组</span></span><br><span class="line">        captchaChallengeAsJpeg = jpegOutputStream.toByteArray();</span><br><span class="line">        httpServletResponse.setHeader(<span class="string">&quot;Cache-Control&quot;</span>, <span class="string">&quot;no-store&quot;</span>);</span><br><span class="line">        httpServletResponse.setHeader(<span class="string">&quot;Pragma&quot;</span>, <span class="string">&quot;no-cache&quot;</span>);</span><br><span class="line">        httpServletResponse.setDateHeader(<span class="string">&quot;Expires&quot;</span>, <span class="number">0</span>);</span><br><span class="line">        httpServletResponse.setContentType(<span class="string">&quot;image/jpeg&quot;</span>);</span><br><span class="line">        ServletOutputStream responseOutputStream = httpServletResponse.getOutputStream();</span><br><span class="line">        responseOutputStream.write(captchaChallengeAsJpeg);</span><br><span class="line">        responseOutputStream.flush();</span><br><span class="line">        responseOutputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 3、校对验证码</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> httpServletRequest</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> httpServletResponse</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/imgvrifyControllerDefaultKaptcha&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">imgvrifyControllerDefaultKaptcha</span><span class="params">(HttpServletRequest httpServletRequest,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                         HttpServletResponse httpServletResponse)</span> </span>&#123;</span><br><span class="line">        ModelAndView andView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        String rightCode = (String) httpServletRequest.getSession().getAttribute(<span class="string">&quot;rightCode&quot;</span>);</span><br><span class="line">        String ClientCode = httpServletRequest.getParameter(<span class="string">&quot;ClientCode&quot;</span>);</span><br><span class="line"><span class="comment">//        rightCode是生成码，ClientCode是表单提交码</span></span><br><span class="line">        System.out.println(<span class="string">&quot;rightCode:&quot;</span> + rightCode + <span class="string">&quot; ———— ClientCode:&quot;</span> + ClientCode);</span><br><span class="line">        <span class="keyword">if</span> (!rightCode.equals(ClientCode)) &#123;</span><br><span class="line">            andView.addObject(<span class="string">&quot;info&quot;</span>, <span class="string">&quot;验证码错误&quot;</span>);</span><br><span class="line">            andView.setViewName(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            andView.addObject(<span class="string">&quot;info&quot;</span>, <span class="string">&quot;登录成功&quot;</span>);</span><br><span class="line">            andView.setViewName(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> andView;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/toIndex&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="前端页面Login-html"><a href="#前端页面Login-html" class="headerlink" title="前端页面Login.html"></a>前端页面Login.html</h3><p>简单的一个表单就可以，此处需要注意几点：</p><ol><li><p>onclick=”this.src=’defaultKaptcha?d=’+new Date()*1” //每次点击图片是刷新图片，重新生成图片</p></li><li><p>src=”defaultKaptcha” // 访问controller中的验证方法</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;info&#125;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;imgvrifyControllerDefaultKaptcha&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span>      </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;vrifyCode&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;验证码&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;this.src=&#x27;defaultKaptcha?d=&#x27;+new Date()*1&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">src</span>=<span class="string">&quot;defaultKaptcha&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="实现的效果"><a href="#实现的效果" class="headerlink" title="实现的效果"></a>实现的效果</h3><p><img src= "/count-goblin/img/loading.gif" data-lazy-src="C:\Users\Administrator\Desktop\a.png" alt="a"></p>]]></content>
      
      
      <categories>
          
          <category> 表单验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kaptcha </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot+vue.js+axios文件上传</title>
      <link href="/count-goblin/2021/01/15/Spring-Boot+vue.js+axios%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
      <url>/count-goblin/2021/01/15/Spring-Boot+vue.js+axios%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\count-goblin\assets\css\APlayer.min.css"><script src="\count-goblin\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>今天花一天时间折腾Spring Boot+vue.js+axios文件，还好最算是弄成功了，在这里做个详细的笔记！</p><h2 id="Spring-Boot-vue-js-axios文件上传"><a href="#Spring-Boot-vue-js-axios文件上传" class="headerlink" title="Spring Boot+vue.js+axios文件上传"></a>Spring Boot+vue.js+axios文件上传</h2><p>###先看看表结构</p><p>​    本次实现思路是这样的，两张表，文件表和产品表，上传时，在产品表中存文件表的ID即可，文件表中存文件的名称、路径等信息。表结构如下：</p><p><strong><em>产品表</em></strong>：product</p><table><thead><tr><th></th><th>Field</th><th>Type</th><th>Comment</th></tr></thead><tbody><tr><td>KEY</td><td>id</td><td>int(11)  NOT NULL</td><td>构件ID</td></tr><tr><td></td><td>name</td><td>varchar(255)  NULL</td><td>构件名</td></tr><tr><td>FK</td><td>docid</td><td>int(11) NULL</td><td>外键指向文件ID</td></tr></tbody></table><p><strong><em>文件表</em></strong>：product_doc</p><table><thead><tr><th></th><th>Field</th><th>Type</th><th>Comment</th></tr></thead><tbody><tr><td>KEy</td><td>id</td><td>int(11) NOT NULL</td><td>文件ID</td></tr><tr><td></td><td>name</td><td>char(255) NULL</td><td>文件名</td></tr><tr><td></td><td>folder</td><td>char(255) NULL</td><td>文件路径</td></tr><tr><td></td><td>size</td><td>float NULL</td><td>文件大小</td></tr></tbody></table><h3 id="前端界面"><a href="#前端界面" class="headerlink" title="前端界面"></a>前端界面</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--@author: An_Zhongqi--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:fragment</span>=<span class="string">&quot;html&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> time = <span class="keyword">new</span> <span class="built_in">Date</span>();</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> nowTime = time.toLocaleString();</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> data4Vue = &#123;</span></span><br><span class="line">                /**</span><br><span class="line">                 * file表示要上传的附件</span><br><span class="line">                 */</span><br><span class="line"><span class="javascript">                uri: <span class="string">&#x27;topublish&#x27;</span>,</span></span><br><span class="line">                result: [],</span><br><span class="line">                component: &#123;</span><br><span class="line">                    id: 0,</span><br><span class="line"><span class="javascript">                    name: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="javascript">                    category: &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">0</span>&#125;,</span></span><br><span class="line">                &#125;,</span><br><span class="line">                categorys: [],</span><br><span class="line"><span class="javascript">                categoryy: &#123;<span class="attr">id</span>: <span class="number">0</span>, <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>&#125;,</span></span><br><span class="line"><span class="javascript">                file:<span class="literal">null</span>,</span></span><br><span class="line">            &#125;;</span><br><span class="line"><span class="javascript">            <span class="comment">//ViewModel</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> vue = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">                el: <span class="string">&#x27;#workingArea&#x27;</span>,</span></span><br><span class="line">                data: data4Vue,</span><br><span class="line"><span class="javascript">                mounted: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line">                    linkDefaultActions();</span><br><span class="line">                &#125;,</span><br><span class="line">                methods: &#123;</span><br><span class="line"><span class="javascript">                    publish: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="comment">// 特殊字符校验</span></span></span><br><span class="line"><span class="javascript">                        <span class="keyword">var</span> regEn = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&quot;[`~!@#$^&amp;*()=|&#123;&#125;&#x27;:;&#x27;,\\[\\].&lt;&gt;/?~！@#￥……&amp;*（）——|&#123;&#125;【】‘；：”“&#x27;。，、？]&quot;</span>);</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">if</span> (<span class="number">0</span> == <span class="built_in">this</span>.component.name.length) &#123;</span></span><br><span class="line"><span class="javascript">                            $(<span class="string">&quot;span.errorMessage&quot;</span>).html(<span class="string">&quot;请输入构件名称&quot;</span>);</span></span><br><span class="line"><span class="javascript">                            $(<span class="string">&quot;div.registerErrorMessageDiv&quot;</span>).css(<span class="string">&quot;visibility&quot;</span>, <span class="string">&quot;visible&quot;</span>);</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">return</span>;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                       </span><br><span class="line"><span class="javascript">                        <span class="comment">//axios.js 上传文件要用 formData 这种方式</span></span></span><br><span class="line"><span class="javascript">                        <span class="keyword">var</span> formData = <span class="keyword">new</span> FormData();</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">var</span> url = <span class="built_in">this</span>.uri;</span></span><br><span class="line"><span class="javascript">                        formData.append(<span class="string">&quot;doc&quot;</span>, <span class="built_in">this</span>.file);</span></span><br><span class="line"><span class="javascript">                        formData.append(<span class="string">&quot;name&quot;</span>, <span class="built_in">this</span>.component.name);</span></span><br><span class="line"><span class="javascript">                        axios.post(url, formData).then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                            <span class="comment">// 然后还原数据,使得输入部分回到上传前的状态</span></span></span><br><span class="line"><span class="javascript">                            <span class="keyword">var</span> a=$(<span class="string">&quot;#categoryDoc&quot;</span>).val(<span class="string">&#x27;&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                            <span class="built_in">console</span>.log(a)</span></span><br><span class="line"><span class="javascript">                            vue.file = <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">                            $(<span class="string">&quot;#singlePic&quot;</span>).val(<span class="string">&#x27;&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                            vue.singleFile = <span class="literal">null</span>;</span></span><br><span class="line">                            vue.component= &#123;</span><br><span class="line">                                id: 0,</span><br><span class="line"><span class="javascript">                                    name: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                                    category: &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">0</span>&#125;</span></span><br><span class="line">                            &#125;;</span><br><span class="line"><span class="javascript">                            <span class="keyword">var</span> result = response.data;</span></span><br><span class="line"><span class="javascript">                            <span class="built_in">console</span>.log(response.data.code);</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">if</span> (result.code == <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="javascript">                                location.href = <span class="string">&quot;publishSuccess&quot;</span>;</span></span><br><span class="line">                            &#125;</span><br><span class="line"><span class="javascript">                            <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                                $(<span class="string">&quot;span.errorMessage&quot;</span>).html(result.message);</span></span><br><span class="line"><span class="javascript">                                $(<span class="string">&quot;div.registerErrorMessageDiv&quot;</span>).css(<span class="string">&quot;visibility&quot;</span>, <span class="string">&quot;visible&quot;</span>);</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line"></span><br><span class="line">                    &#125;,</span><br><span class="line">                    /**</span><br><span class="line">                     * 当上传控件选中某个本地文件的时候，这个文件对象就会保存在data4Vue.file 上</span><br><span class="line">                     * @param event</span><br><span class="line">                     */</span><br><span class="line"><span class="javascript">                    getFile: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">this</span>.file = event.target.files[<span class="number">0</span>];</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>发布新构件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel panel-primary&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-heading&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;panel-title&quot;</span>&gt;</span>发布构件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot; height: 35px;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;registerErrorMessageDiv&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;alert alert-danger&quot;</span> <span class="attr">role</span>=<span class="string">&quot;alert&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;close&quot;</span> <span class="attr">data-dismiss</span>=<span class="string">&quot;alert&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;Close&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;errorMessage&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width: 70%;float: left&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-horizontal&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-5 control-label&quot;</span>&gt;</span>构件名称<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-5&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;component.name&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">placeholder</span>=<span class="string">&quot;请输入构件名称&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">               </span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-5 control-label&quot;</span>&gt;</span>上传文件<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-5 custom-file&quot;</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--accept=&quot;application/msword&quot;限制文件类型为doc--&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;categoryDoc&quot;</span> <span class="attr">accept</span>=<span class="string">&quot;application/msword&quot;</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;doc&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;getFile($event)&quot;</span> <span class="attr">th:placeholder</span>=<span class="string">&quot;选择相关文件&quot;</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;help-block&quot;</span>&gt;</span>上传相关文件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                </span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-offset-7 col-sm-5&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;publish&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">value</span>=<span class="string">&quot;发布&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="实体类（Product-java）"><a href="#实体类（Product-java）" class="headerlink" title="实体类（Product.java）"></a>实体类（Product.java）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jeemia.component.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonFormat;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonIgnoreProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.annotations.Document;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: component</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: An_Zhongqi</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;product&quot;)</span></span><br><span class="line"><span class="meta">@JsonIgnoreProperties(&#123;&quot;handler&quot;, &quot;hibernateLazyInitializer&quot;&#125;)</span></span><br><span class="line"><span class="meta">@Document(indexName = &quot;component&quot;, type = &quot;product&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;id&quot;)</span></span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ManyToOne</span></span><br><span class="line">    <span class="meta">@JoinColumn(name = &quot;cid&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Category category;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ManyToOne</span></span><br><span class="line">    <span class="meta">@JoinColumn(name = &quot;uid&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主键关联，指向文档表的主键ID</span></span><br><span class="line"><span class="comment">     * CascadeType.ALL-&gt;ALL 级联/添加/更新/删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OneToOne(cascade = CascadeType.ALL)</span></span><br><span class="line">    <span class="meta">@JoinColumn(name = &quot;docid&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> ProductDoc productDoc;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果既没有指明 关联到哪个Column,又没有明确要用<span class="doctag">@Transient</span>忽略，那么就会自动关联到表对应的同名字段</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transient</span></span><br><span class="line">    <span class="keyword">private</span> ProductImage firstProductImage;</span><br><span class="line">    <span class="meta">@Transient</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;ProductImage&gt; productSingleImages;</span><br><span class="line">    <span class="meta">@Transient</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;ProductImage&gt; productDetailImages;</span><br><span class="line">    <span class="meta">@Transient</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> reviewCount;</span><br><span class="line">    <span class="meta">@Transient</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> saleCount;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Category <span class="title">getCategory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> category;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCategory</span><span class="params">(Category category)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.category = category;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.user = user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> ProductDoc <span class="title">getProductDoc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> productDoc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProductDoc</span><span class="params">(ProductDoc productDoc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.productDoc = productDoc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实体类（ProductDoc）"><a href="#实体类（ProductDoc）" class="headerlink" title="实体类（ProductDoc）"></a>实体类（ProductDoc）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jeemia.component.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonBackReference;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonIgnoreProperties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.*;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span>: An_Zhongqi</span></span><br><span class="line"><span class="comment">* <span class="doctag">@description</span>: 构件的附属文件</span></span><br><span class="line"><span class="comment">* <span class="doctag">@create</span>: 2019/4/24 15:11</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;product_doc&quot;)</span></span><br><span class="line"><span class="meta">@JsonIgnoreProperties(&#123; &quot;handler&quot;,&quot;hibernateLazyInitializer&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductDoc</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Float size;</span><br><span class="line">    <span class="comment">//文件路径</span></span><br><span class="line">    <span class="keyword">private</span> String folder;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Float <span class="title">getSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSize</span><span class="params">(Float size)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.size = size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFolder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> folder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFolder</span><span class="params">(String folder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.folder = folder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure><h3 id="Service-ProductService-java"><a href="#Service-ProductService-java" class="headerlink" title="Service(ProductService.java)"></a>Service(ProductService.java)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jeemia.component.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.jeemia.component.dao.ProductDAO;</span><br><span class="line"><span class="keyword">import</span> com.jeemia.component.pojo.Category;</span><br><span class="line"><span class="keyword">import</span> com.jeemia.component.pojo.Product;</span><br><span class="line"><span class="keyword">import</span> com.jeemia.component.util.Page4Navigator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.Page;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.PageRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.Pageable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.Sort;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.beans.PropertyDescriptor;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: component</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: An_Zhongqi</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ProductDAO productDAO;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    CategoryService categoryService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ProductImageService productImageService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    OrderItemService orderItemService;</span><br><span class="line">    <span class="meta">@Autowired</span> ReviewService reviewService;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *添加数据</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Product bean)</span> </span>&#123;</span><br><span class="line">        productDAO.save(bean);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Product id)</span> </span>&#123;</span><br><span class="line">        productDAO.delete(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updata</span><span class="params">(Product bean)</span> </span>&#123;</span><br><span class="line">        productDAO.save(bean);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">get</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> productDAO.findById(id).orElse(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Page4Navigator&lt;Product&gt; <span class="title">list</span><span class="params">(<span class="keyword">int</span> cid, <span class="keyword">int</span> start, <span class="keyword">int</span> size, <span class="keyword">int</span> navigatePages)</span> </span>&#123;</span><br><span class="line">        Category category = categoryService.get(cid);</span><br><span class="line">        Sort sort = <span class="keyword">new</span> Sort(Sort.Direction.DESC, <span class="string">&quot;id&quot;</span>);</span><br><span class="line">        Pageable pageable = <span class="keyword">new</span> PageRequest(start, size, sort);</span><br><span class="line">        Page&lt;Product&gt; pageFromJPA = productDAO.findByCategory(category, pageable);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Page4Navigator&lt;&gt;(pageFromJPA, navigatePages);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure><h3 id="Controller"><a href="#Controller" class="headerlink" title="Controller()"></a>Controller()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发布</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> product</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> productDoc</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> doc</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> model</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/topublish&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">publish</span><span class="params">(Product product, ProductDoc productDoc, ProductImage productImage, HttpSession session,</span></span></span><br><span class="line"><span class="function"><span class="params">                          MultipartFile doc, Model model, HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        User user = (User) session.getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        String filename = doc.getOriginalFilename();</span><br><span class="line">        Long size1 = doc.getSize() / <span class="number">1024</span>;</span><br><span class="line">        Float size = (<span class="keyword">float</span>) size1;</span><br><span class="line">        File fileFolder = <span class="keyword">new</span> File(request.getServletContext().getRealPath(<span class="string">&quot;file/product&quot;</span>));</span><br><span class="line">        String pictureFolder = iamgeFolder.toString();</span><br><span class="line">        String folder = fileFolder.toString();</span><br><span class="line">        </span><br><span class="line">        product.setUser(user);</span><br><span class="line">        product.setProductDoc(productDoc);</span><br><span class="line">        product.setProductImage(productImage);</span><br><span class="line">        product.setCreateDate(<span class="keyword">new</span> Date());</span><br><span class="line">        productService.add(product);</span><br><span class="line">    </span><br><span class="line">        saveOrUpdateDocFile(product, doc, request, model);</span><br><span class="line">        productDoc.setName(filename);</span><br><span class="line">        productDoc.setSize(size);</span><br><span class="line">        productDoc.setFolder(folder);</span><br><span class="line">        productDosService.add(productDoc);</span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> doc</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> model   存放文件名，以备显示</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveOrUpdateDocFile</span><span class="params">(Product bean, MultipartFile doc, HttpServletRequest request, Model model)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//文件存放路径</span></span><br><span class="line">        File fileFolder = <span class="keyword">new</span> File(request.getServletContext().getRealPath(<span class="string">&quot;file/product&quot;</span>));</span><br><span class="line">    <span class="comment">//获取上传的文件名</span></span><br><span class="line">        String Filename = doc.getOriginalFilename();</span><br><span class="line">        File filename = <span class="keyword">new</span> File(fileFolder, Filename);</span><br><span class="line">        <span class="comment">//文件路径不存在时创建</span></span><br><span class="line">        <span class="keyword">if</span> (!filename.getParentFile().exists()) &#123;</span><br><span class="line">            filename.getParentFile().mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//保存文件</span></span><br><span class="line">        doc.transferTo(filename);</span><br><span class="line">        <span class="comment">//把文件名放在model里，以便后续显示用</span></span><br><span class="line">        model.addAttribute(<span class="string">&quot;Filename&quot;</span>, Filename);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件上传 axios文件上传 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序员要记住这句话</title>
      <link href="/count-goblin/2021/01/15/%E7%A8%8B%E5%BA%8F%E5%91%98%E8%A6%81%E8%AE%B0%E4%BD%8F%E8%BF%99%E5%8F%A5%E8%AF%9D/"/>
      <url>/count-goblin/2021/01/15/%E7%A8%8B%E5%BA%8F%E5%91%98%E8%A6%81%E8%AE%B0%E4%BD%8F%E8%BF%99%E5%8F%A5%E8%AF%9D/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\count-goblin\assets\css\APlayer.min.css"><script src="\count-goblin\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="给自己的鼓励"><a href="#给自己的鼓励" class="headerlink" title="给自己的鼓励"></a>给自己的鼓励</h2><p>​    当一个代码的工匠回首往事时，不因虚度年华而悔恨，也不因碌碌无为而羞愧， 这样，当他老的时候， 可以很自豪告诉世人，我曾经将代码注入生命去打造互联网的浪潮之巅， 那是个很疯狂的时代，我在一波波的浪潮上留下了或重如泰山或轻如鸿毛的几笔。</p>]]></content>
      
      
      <categories>
          
          <category> 激励 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 激励 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
