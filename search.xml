<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Rxjs 异步编程数据流</title>
      <link href="/count-goblin/2021/01/28/Rxjs%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E6%95%B0%E6%8D%AE%E6%B5%81/"/>
      <url>/count-goblin/2021/01/28/Rxjs%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E6%95%B0%E6%8D%AE%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\count-goblin\assets\css\APlayer.min.css"><script src="\count-goblin\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>Rxjs是针对异步数据流编程的工具，或者是响应式扩展编程，我们学习过Angular的小伙伴都知道，在angular中引入Rxjs的目的就是为了异步的可控和简化</p></blockquote><h3 id="首先先看看我们组件如何从服务中获取数据"><a href="#首先先看看我们组件如何从服务中获取数据" class="headerlink" title="首先先看看我们组件如何从服务中获取数据"></a>首先先看看我们组件如何从服务中获取数据</h3><p>开始之前，我们先定义一个asynchronousProgramming的服务，供组件调用；</p><h3 id="1、同步获取"><a href="#1、同步获取" class="headerlink" title="1、同步获取"></a>1、同步获取</h3><p>首先在服务中定义一个方法，过一秒返回一个数据，然后在组件中直接调用，看看是否能不能获取到数据；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一步</span></span><br><span class="line"><span class="function"><span class="title">getDate</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 第二步</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 第四步</span></span><br><span class="line">      <span class="keyword">const</span> userName = <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line">    &#125;, <span class="number">1500</span>);</span><br><span class="line">    <span class="comment">// 第三步 ，执行到此处时，后面没有程序可以执行，直接跳出，所以外界获取时会报undefined</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>在组件中调用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 1、同步 直接获取数据，无法获取，显示undefined</span><br><span class="line">const data1 &#x3D; this.asynchronousProgramming.getDate();</span><br><span class="line">console.log(data1);</span><br></pre></td></tr></table></figure><p><img src= "/count-goblin/img/loading.gif" data-lazy-src="https://pic4.zhimg.com/v2-03e4d37efe653fca73b7c33ceec7471b_b.png" alt="img"></p><p>同步方法获取数据</p><h3 id="2、回调获取"><a href="#2、回调获取" class="headerlink" title="2、回调获取"></a>2、回调获取</h3><p>回调获取就是直接在同步获取的基础上，增加一个回调方法即可；操作方便也比较简单</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 通过回调解决</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="title">getDataByCallBack</span>(<span class="params">res</span>)</span> &#123; <span class="comment">// res就是回调方法</span></span><br><span class="line">   <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">     <span class="keyword">const</span> userName = <span class="string">&#x27;张三--通过回调获取&#x27;</span>;</span><br><span class="line">     res(userName);</span><br><span class="line">   &#125;, <span class="number">1500</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>在组件中调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2、通过回调函数获取</span></span><br><span class="line">   <span class="built_in">this</span>.asynchronousProgramming.getDataByCallBack(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(res);</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure><p><img src= "/count-goblin/img/loading.gif" data-lazy-src="https://pic3.zhimg.com/v2-f6349ef9cebe8fcd4fb7a9ddad1a4fe6_b.png" alt="img"></p><p>回调方法回去数据</p><h3 id="3、异步方法（Promise）"><a href="#3、异步方法（Promise）" class="headerlink" title="3、异步方法（Promise）"></a>3、异步方法（Promise）</h3><p>那Promise我们在平时的开发中或多或少也会使用到；</p><p>在服务中定义：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过异步解决</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="title">getDataByAsyn</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> userName = <span class="string">&#x27;张三--通过异步获取--promise&#x27;</span>;</span><br><span class="line">      resolve(userName);</span><br><span class="line">    &#125;, <span class="number">1500</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在组建中调用<strong>getDataByAsyn</strong>方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3、通过异步方法--promise获取</span></span><br><span class="line">   <span class="built_in">this</span>.asynchronousProgramming.getDataByAsyn().then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(res);</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure><p><img src= "/count-goblin/img/loading.gif" data-lazy-src="https://pic2.zhimg.com/v2-eb19bd12c8aae56b63352e22080f80f9_b.png" alt="img"></p><p>Promise获取数据</p><h3 id="4、异步方法（Rxjs）"><a href="#4、异步方法（Rxjs）" class="headerlink" title="4、异步方法（Rxjs）"></a>4、异步方法（Rxjs）</h3><p>那这部分就是这边文章的主角了，首先在服务中引入rxjs的Observable对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123;Observable, pipe&#125; from &#39;rxjs&#39;;</span><br></pre></td></tr></table></figure><p>然后定义一个Rxjs获取数据的方法，协防和Promise真的是太像了，但是它比Promise的功能更强大，强大之处后面陆续说道：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   *  通过rxjs异步获取</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="title">getDateByRxjs</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Observable(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> userName = <span class="string">&#x27;张三--通过异步获取--Rxjs&#x27;</span>;</span><br><span class="line">        res.next(userName);</span><br><span class="line">      &#125;, <span class="number">1500</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>在组件中调用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 4、通过异步方法-rxjs获取</span></span><br><span class="line">    <span class="keyword">const</span> data3 = <span class="built_in">this</span>.asynchronousProgramming.getDateByRxjs();</span><br><span class="line">    data3.subscribe(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123; <span class="comment">// 订阅</span></span><br><span class="line">      <span class="built_in">console</span>.log(res);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>大家可能也注意到了，在Promise中我们是你通过.then()获取异步数据，而在Rxjs中，我们是通过返回的Observable对象（data3）的subscribe来订阅数据，看看结果：</p><p><img src= "/count-goblin/img/loading.gif" data-lazy-src="https://pic2.zhimg.com/v2-0201751cbd3490d027ae0c9552b4aab1_b.png" alt="img"></p><p>Rxjs获取异步数据</p><p>前面也说了Rxjs逼Promise强大，那么强在哪里？下面我们写几个例子看看：</p><p>西面我们来实现这样的一个功能，就是每个一秒，打印一次，主要是根据定时器*<em>setInterval**</em>来实现，先看看Promise能不能实现：*</p><p><strong>（1）、Promise实现</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  通过rxjs异步获取</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="title">getDateByPromiseAdd</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> num = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      num++;</span><br><span class="line">      <span class="keyword">const</span> count = <span class="string">&#x27;次数&#x27;</span> + num;</span><br><span class="line">      resolve(count);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在组件中调用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过Promise来实现累加</span></span><br><span class="line">   <span class="built_in">this</span>.asynchronousProgramming.getDateByPromiseAdd().then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(res);</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure><p><img src= "/count-goblin/img/loading.gif" data-lazy-src="https://pic1.zhimg.com/v2-7a05f2f768f6df7fac76197037065f4c_b.png" alt="img"></p><p>从上图可以看出，值打印了一次，说明，Promise无法实现累加的操作；</p><p><strong>（2）、Rxjs实现</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 应用rxjs中的管道对数据进行处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="title">getDateByRxjsHandle</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> num = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Observable(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      num++;</span><br><span class="line">      <span class="keyword">const</span> userName = <span class="string">&#x27;张三--通过异步获取--Rxjs--累加器&#x27;</span> + num;</span><br><span class="line">      res.next(userName);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">    <span class="comment">// 过10秒后取消订阅</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      res.unsubscribe();</span><br><span class="line">    &#125;, <span class="number">10000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在组件中调用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 5、通过异步方法-rxjs获取--累加</span></span><br><span class="line">    <span class="keyword">const</span> data4 = <span class="built_in">this</span>.asynchronousProgramming.getDateByRxjsHandle();</span><br><span class="line">    data4.subscribe(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(res);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>看下结果：</p><p><img src= "/count-goblin/img/loading.gif" data-lazy-src="https://pic3.zhimg.com/v2-a10707347fcf7338bfeaf076445735b2_b.gif" alt="img"></p><p>大家可能注意到了，为什么值打印了十次，原因也就是我在十秒后取消了订阅，所以就不再打印了： 实现代码是：</p><p><img src= "/count-goblin/img/loading.gif" data-lazy-src="https://pic1.zhimg.com/v2-c68ff45a34a8298b7d744f0772a3e6bc_b.png" alt="img"></p><p>取消订阅</p><p>其实在Rxjs中也有很多方法来处理修饰数据，比如我们会用到管道之类的；</p><p>就针对累加器，对于返回的数据进行一下操作；下面就集合处理下： 1、返回偶数</p><p>2、返回的偶数乘以他本身</p><p>3、在第二部操作的基础上只拿去三个结果</p><p>4、将拿去的3个结果封装成数组</p><p>下面就用代码来实现以上四个操作：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 6、通过rxjs管道修饰结果</span></span><br><span class="line">    <span class="keyword">const</span> data5 = <span class="built_in">this</span>.asynchronousProgramming.getDataByRxjsPipe();</span><br><span class="line">    data5.pipe(</span><br><span class="line">      <span class="comment">// 返回偶数 2,4,6,8,10.......</span></span><br><span class="line">      filter(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (data % <span class="number">2</span> === <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;),</span><br><span class="line">      <span class="comment">// 返回结果乘以他自己 4,16,36,64.....</span></span><br><span class="line">      map(<span class="function"><span class="params">value</span> =&gt;</span> value * value),</span><br><span class="line">      <span class="comment">// 只返回三个结果 4,16,36</span></span><br><span class="line">      take(<span class="number">3</span>),</span><br><span class="line">      <span class="comment">// 将结果封装为数组 [4,16,36]</span></span><br><span class="line">      toArray()</span><br><span class="line">    )</span><br><span class="line">      .subscribe(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res);</span><br><span class="line">      &#125;);</span><br></pre></td></tr></table></figure><p><img src= "/count-goblin/img/loading.gif" data-lazy-src="https://pic2.zhimg.com/v2-4d7f7bf570f12dad1bb9ebff4267fa4d_b.png" alt="img"></p><p>打印结果和我们预期是一样的；</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rxjs javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「前端」JavaScript中函数的定义方法</title>
      <link href="/count-goblin/2021/01/27/%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89/"/>
      <url>/count-goblin/2021/01/27/%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\count-goblin\assets\css\APlayer.min.css"><script src="\count-goblin\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="「前端」JavaScript中函数的定义方法"><a href="#「前端」JavaScript中函数的定义方法" class="headerlink" title="「前端」JavaScript中函数的定义方法"></a>「前端」JavaScript中函数的定义方法</h1><p>函数时我们在日常开发过程中经常使用的工具，它的定义方法大概就是两种：函数声明和函数表达式</p><p>[TOC]</p><h2 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h2><h3 id="函数表达式"><a href="#函数表达式" class="headerlink" title="函数表达式"></a>函数表达式</h3><p>函数表达式是 JavaScript 中的一个既强大又容易令人困惑的特性。函数表达式有几种不同的语法形式。下面是最常见的一 种形式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> functionName = <span class="function"><span class="keyword">function</span>(<span class="params">arg0, arg1, arg2</span>)</span>&#123;</span><br><span class="line"> <span class="comment">//函数体</span></span><br><span class="line">&#125;; </span><br></pre></td></tr></table></figure><p>举个栗子：</p><p>示例1：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;<span class="keyword">return</span> a * b&#125;;<span class="comment">// 返回入参之积</span></span><br></pre></td></tr></table></figure><p>示例2：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  *  防止SQL注入,校验查询条件输入字段不能包含sql关键字</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">var</span> antiSql = <span class="function"><span class="keyword">function</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">const</span> reg = <span class="regexp">/select|update|delete|exec|count|&#x27;|&quot;|=|;|&gt;|&lt;|%/i</span>;</span><br><span class="line">   <span class="keyword">if</span> (str) &#123;</span><br><span class="line">     <span class="keyword">if</span> (reg.test(str)) &#123;  <span class="comment">// 存在输入sql关键字的情况，根据情况判断是否进行提示并阻止查询</span></span><br><span class="line">       <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><blockquote><p>这种形式看起来好像是常规的变量赋值语句，即创建一个函数并将它赋值给变量 <strong><em>functionName</em></strong>。 这种情况下创建的函数叫做匿名函数（anonymous function），因为 function 关键字后面没有标识符。 （匿名函数有时候也叫**<em>拉姆达函数**</em>。）匿名函数的 name 属性是空字符串。</p></blockquote><p>函数表达式与其他表达式一样，在使用前必须先赋值。以下代码会导致错误。</p><p>示例3：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">getNowDate(); <span class="comment">// 报错，因为此时函数还不存在</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 转换日期格式:yyyyMMdd</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> getNowDate = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> value = <span class="keyword">new</span> <span class="built_in">Date</span>(); <span class="comment">// 获取当前时间</span></span><br><span class="line">  <span class="keyword">const</span> year = value.getFullYear(); <span class="comment">// 获取当前年</span></span><br><span class="line">  <span class="keyword">const</span> mouth = (value.getMonth() + <span class="number">1</span>) &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + (value.getMonth() + <span class="number">1</span>) : (value.getMonth() + <span class="number">1</span>); <span class="comment">// 获取当前月份</span></span><br><span class="line">  <span class="keyword">const</span> date = value.getDate() &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + value.getDate() : value.getDate(); <span class="comment">// 获取当前日</span></span><br><span class="line">  <span class="keyword">return</span> (year + <span class="string">&#x27;&#x27;</span> + mouth + <span class="string">&#x27;&#x27;</span> + date); <span class="comment">// 返回yyyy MM dd格式日期</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="自调用函数"><a href="#自调用函数" class="headerlink" title="自调用函数"></a>自调用函数</h4><p>函数表达式可以 “自调用”。自调用表达式会自动调用。如果表达式后面紧跟 () ，则会自动调用。不能自调用声明的函数。</p><p>通过添加括号，来说明它是一个函数表达式：</p><p>示例:4：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="string">&quot;Hello!!&quot;</span>;      <span class="comment">// 我将调用自己</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><hr><h3 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h3><blockquote><p>首先是 function 关键字，然后是函数的名字，这就是指定函数名的方式。Firefox、Safari、Chrome 和 Opera 都给函数定义了一个非标准的 name 属性，通过这个属性可以访问到给函数指定的名字。这个 属性的值永远等于跟在 function 关键字后面的标识符；</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//只在 Firefox、Safari、Chrome 和 Opera 有效</span></span><br><span class="line">alert(functionName.name); <span class="comment">//&quot;functionName&quot; </span></span><br></pre></td></tr></table></figure><p>函数定义栗子：</p><p>示例5：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 业务类别 返回变成下拉框的值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">listToLabelvalue</span>(<span class="params">data: any = [], label, value</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">const</span> tempArr = [];</span><br><span class="line">   <span class="keyword">if</span> (data) &#123;</span><br><span class="line">     data.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">       <span class="keyword">const</span> tempObj = &#123;</span><br><span class="line">         <span class="string">&#x27;value&#x27;</span>: item[value],</span><br><span class="line">         <span class="string">&#x27;label&#x27;</span>: item[label]</span><br><span class="line">       &#125;;</span><br><span class="line">       tempArr.push(tempObj);</span><br><span class="line">     &#125;);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> tempArr;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>示例6：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *删除session指定值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>  <span class="title">clearSession</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> session = <span class="built_in">window</span>.sessionStorage;</span><br><span class="line">    session.removeItem(key); <span class="comment">// 删除session指定值</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><blockquote><p>关于函数声明，它的一个重要特征就是**<em>函数声明提升（function declaration hoisting）**</em>，意思是在执行代码之前会先读取函数声明。这就意味着可以把函数声明放在调用它的语句后面。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sayHi(); <span class="comment">// 不会报错</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> alert(<span class="string">&quot;Hi!&quot;</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>函数提升也是区别函数声明和函数表达式的重要标准，理解这一点，再看一个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代码运行结果并不是你想设计的</span></span><br><span class="line"><span class="keyword">if</span>(condition)&#123;</span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> alert(<span class="string">&quot;Hi!&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> alert(<span class="string">&quot;Yo!&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><blockquote><p>表面上看，以上代码表示在 condition 为 true 时，使用一个 <strong><em>sayHi()</em></strong>的定义；否则，就使用另 一个定义。实际上，这在  <strong>*ECMAScript  *</strong>中属于无效语法，JavaScript 引擎会尝试修正错误，将其转换为合 理的状态。但问题是浏览器尝试修正错误的做法并不一致。大多数浏览器会返回第二个声明，忽略  <strong>*condition *</strong>；Firefox 会在 <strong>* condition  *</strong>为 true 时返回第一个声明。因此这种使用方式很危险，不应该 出现在你的代码中。不过，如果是使用函数表达式，那就没有什么问题了</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可以这样做</span></span><br><span class="line"><span class="keyword">var</span> sayHi;</span><br><span class="line"><span class="keyword">if</span>(condition)&#123;</span><br><span class="line"> sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> alert(<span class="string">&quot;Hi!&quot;</span>);</span><br><span class="line"> &#125;;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"> sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> alert(<span class="string">&quot;Yo!&quot;</span>);</span><br><span class="line"> &#125;;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><hr><p>JavaScript中，函数可以作为一个值，也可以参与表达式：</p><p>示例7：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = myFunction(<span class="number">4</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>示例8：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = myFunction(<span class="number">4</span>, <span class="number">3</span>) * <span class="number">2</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「前端」手写Promise</title>
      <link href="/count-goblin/2021/01/27/%E6%89%8B%E5%86%99Promise/"/>
      <url>/count-goblin/2021/01/27/%E6%89%8B%E5%86%99Promise/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\count-goblin\assets\css\APlayer.min.css"><script src="\count-goblin\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="一、引言"><a href="#一、引言" class="headerlink" title="一、引言"></a>一、引言</h3><blockquote><p>Promise是处理异步编码的一个解决方案，在Promise出现以前，异步代码的编写都是通过回调函数来处理的，回调函数本身没有任何问题，只是当多次异步回调有逻辑关系时就会变得复杂：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line">fs.readFile(<span class="string">&#x27;1.doc&#x27;</span>, <span class="function">(<span class="params">err,res</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.readFile(<span class="string">&#x27;2.doc&#x27;</span>, <span class="function">(<span class="params">err,res</span>) =&gt;</span> &#123;</span><br><span class="line">        fs.readFile(<span class="string">&#x27;3.doc&#x27;</span>, <span class="function">(<span class="params">err,res</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 可能还有后续代码...</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>​    不过Promise的横空出世就有效的解决了这一问题，也就是回调地狱问题；</p><p>​    而手写Promise也是最近几年面试很容易考到的问题，下面收集了简易版的Promise和合乎<a href="https://promisesaplus.com/">Promises/A+规范</a>的Promise，仅供参考！</p><h3 id="二、简易版"><a href="#二、简易版" class="headerlink" title="二、简易版"></a>二、简易版</h3><h4 id="1、首先定义constructor"><a href="#1、首先定义constructor" class="headerlink" title="1、首先定义constructor"></a>1、首先定义constructor</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">fn</span>)</span> &#123;</span><br><span class="line">        <span class="comment">// 定义Promise的三种状态</span></span><br><span class="line">        <span class="built_in">this</span>.statusObj = &#123;</span><br><span class="line">            PENDING: <span class="string">&#x27;PENDING&#x27;</span>,</span><br><span class="line">            RESOLVED: <span class="string">&#x27;RESOLVED&#x27;</span>,</span><br><span class="line">            REJECTED: <span class="string">&#x27;REJECTED&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.value = <span class="literal">null</span>;<span class="comment">// 定义传递给then的value</span></span><br><span class="line">        <span class="built_in">this</span>.status = <span class="built_in">this</span>.statusObj.PENDING; <span class="comment">// 设置当前Promise的状态</span></span><br><span class="line">        <span class="built_in">this</span>.resolvedCallBacks = []; <span class="comment">// 定义Promise成功状态的回调函数集合</span></span><br><span class="line">        <span class="built_in">this</span>.rejectedCallBacks = []; <span class="comment">// 定义Promise失败状态的回调函数集合</span></span><br><span class="line">        MyPromise.that = <span class="built_in">this</span>; <span class="comment">// 为静态方法定义其内部可以使用的指向实例的that</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 执行new Promise() 内传入的方法</span></span><br><span class="line">            fn(MyPromise.resolve, MyPromise.reject);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            MyPromise.reject(<span class="built_in">this</span>.value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="2、完善resolve、reject、then方法"><a href="#2、完善resolve、reject、then方法" class="headerlink" title="2、完善resolve、reject、then方法"></a>2、完善resolve、reject、then方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 静态resolve方法，MyPromise实例不可访问;</span></span><br><span class="line"><span class="comment"> * 支持类MyPromise访问，例：MyPromise.resolve(&#x27;success&#x27;).then(e=&gt;e)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>value </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="function"><span class="title">resolve</span>(<span class="params">value</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> that = MyPromise.that; <span class="comment">// 由于静态方法内的this访问的是类还不是实例，所以使用这种办法访问对象实例</span></span><br><span class="line">    <span class="keyword">const</span> f = that <span class="keyword">instanceof</span> MyPromise; <span class="comment">// 确认是否是MyPromise实例访问resolve</span></span><br><span class="line">    <span class="comment">// MyPromise 实例访问resolve,如果访问成功 状态改变、值改变</span></span><br><span class="line">    <span class="keyword">if</span> (f &amp;&amp; that.status === that.statusObj.PENDING) &#123;</span><br><span class="line">        that.status = that.statusObj.RESOLVED;</span><br><span class="line">        that.value = value;</span><br><span class="line">        that.resolvedCallBacks.map(<span class="function"><span class="params">cb</span> =&gt;</span> that.value = cb(that.value));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// MyPromise 类访问resolve</span></span><br><span class="line">    <span class="keyword">if</span> (!f) &#123;</span><br><span class="line">        <span class="keyword">const</span> obj = <span class="keyword">new</span> MyPromise();</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Object</span>.assign(obj, &#123;</span><br><span class="line">            status: obj.statusObj.RESOLVED,</span><br><span class="line">            value</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    那么resolve方法就和resolve方法差不多</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 静态resolve方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>value </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="function"><span class="title">reject</span>(<span class="params">value</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> that = MyPromise.that;</span><br><span class="line">    <span class="keyword">const</span> f = that <span class="keyword">instanceof</span> MyPromise;</span><br><span class="line">    <span class="keyword">if</span> (f &amp;&amp; that.status === that.statusObj.REJECTED) &#123;</span><br><span class="line">        that.status = that.statusObj.REJECTED;</span><br><span class="line">        that.value = value;</span><br><span class="line">        that.rejectedCallBacks.map(<span class="function"><span class="params">cb</span> =&gt;</span> that.value = cb(that.value));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!f) &#123;</span><br><span class="line">        <span class="keyword">const</span> obj = <span class="keyword">new</span> MyPromise();</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Object</span>.assign(obj, &#123;</span><br><span class="line">            status: that.statusObj.REJECTED,</span><br><span class="line">            value</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后是then方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * MyPromise 原型上的then方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>onFulfilled </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>onRejected </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="title">then</span>(<span class="params">onFulfilled, onRejected</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; PENDING, RESOLVED, REJECTED &#125; = <span class="built_in">this</span>.statusObj;</span><br><span class="line">    <span class="keyword">const</span> f = <span class="keyword">typeof</span> onFulfilled == <span class="string">&#x27;function&#x27;</span> ? onFulfilled : <span class="function"><span class="params">c</span> =&gt;</span> c</span><br><span class="line">    <span class="keyword">const</span> r = <span class="keyword">typeof</span> onRejected == <span class="string">&#x27;function&#x27;</span> ? onRejected : <span class="function"><span class="params">c</span> =&gt;</span> &#123; <span class="keyword">throw</span> c &#125;;</span><br><span class="line">    <span class="keyword">switch</span> (<span class="built_in">this</span>.status) &#123;</span><br><span class="line">        <span class="keyword">case</span> PENDING: <span class="comment">// PENDING 状态下 向下回调函数结合添加callback</span></span><br><span class="line">            <span class="built_in">this</span>.resolvedCallBacks.push(f);</span><br><span class="line">            <span class="built_in">this</span>.rejectedCallBacks.push(r);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> RESOLVED:</span><br><span class="line">            <span class="built_in">this</span>.value = f(<span class="built_in">this</span>.value); <span class="comment">// 将回调函数的返回值赋值给实例的 value ，满足链式调用then方法时传递value</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> REJECTED:</span><br><span class="line">            <span class="built_in">this</span>.value = r(<span class="built_in">this</span>.value); <span class="comment">// 将回调函数的返回值赋值给实例的 value ，满足链式调用then方法时传递value</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 满足链式调用then，返回MyPromise实例对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此呢，我们自定的MyPromise方法就写完了 ，接下里就是测试环节</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// new 一个Promise进行测试</span></span><br><span class="line">MyPromise.resolve(<span class="string">&#x27;success&#x27;</span>).then(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e);</span><br><span class="line">    <span class="keyword">return</span> e + <span class="number">1</span>;</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> MyPromise(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        resolve(<span class="number">1</span>)</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;)</span><br><span class="line">    .then(<span class="function">(<span class="params">res2</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res2);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;).then(<span class="function">(<span class="params">res3</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res3);</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>下面是测试的结果。</p><p><img src= "/count-goblin/img/loading.gif" data-lazy-src="C:\Users\Arthur\AppData\Roaming\Typora\typora-user-images\image-20200504154123745.png" alt="image-20200504154123745"></p><p>下面附上完整代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPromise</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">fn</span>)</span> &#123;</span><br><span class="line">        <span class="comment">// 定义Promise的三种状态</span></span><br><span class="line">        <span class="built_in">this</span>.statusObj = &#123;</span><br><span class="line">            PENDING: <span class="string">&#x27;PENDING&#x27;</span>,</span><br><span class="line">            RESOLVED: <span class="string">&#x27;RESOLVED&#x27;</span>,</span><br><span class="line">            REJECTED: <span class="string">&#x27;REJECTED&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.value = <span class="literal">null</span>;<span class="comment">// 定义传递给then的value</span></span><br><span class="line">        <span class="built_in">this</span>.status = <span class="built_in">this</span>.statusObj.PENDING; <span class="comment">// 设置当前Promise的状态</span></span><br><span class="line">        <span class="built_in">this</span>.resolvedCallBacks = []; <span class="comment">// 定义Promise成功状态的回调函数集合</span></span><br><span class="line">        <span class="built_in">this</span>.rejectedCallBacks = []; <span class="comment">// 定义Promise失败状态的回调函数集合</span></span><br><span class="line">        MyPromise.that = <span class="built_in">this</span>; <span class="comment">// 为静态方法定义其内部可以使用的指向实例的that</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 执行new Promise() 内传入的方法</span></span><br><span class="line">            fn(MyPromise.resolve, MyPromise.reject);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            MyPromise.reject(<span class="built_in">this</span>.value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 静态resolve方法，MyPromise实例不可访问;</span></span><br><span class="line"><span class="comment">     * 支持类MyPromise访问，例：MyPromise.resolve(&#x27;success&#x27;).then(e=&gt;e)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>value </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="title">resolve</span>(<span class="params">value</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> that = MyPromise.that; <span class="comment">// 由于静态方法内的this访问的是类还不是实例，所以使用这种办法访问对象实例</span></span><br><span class="line">        <span class="keyword">const</span> f = that <span class="keyword">instanceof</span> MyPromise; <span class="comment">// 确认是否是MyPromise实例访问resolve</span></span><br><span class="line">        <span class="comment">// MyPromise 实例访问resolve,如果访问成功 状态改变、值改变</span></span><br><span class="line">        <span class="keyword">if</span> (f &amp;&amp; that.status === that.statusObj.PENDING) &#123;</span><br><span class="line">            that.status = that.statusObj.RESOLVED;</span><br><span class="line">            that.value = value;</span><br><span class="line">            that.resolvedCallBacks.map(<span class="function"><span class="params">cb</span> =&gt;</span> that.value = cb(that.value));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// MyPromise 类访问resolve</span></span><br><span class="line">        <span class="keyword">if</span> (!f) &#123;</span><br><span class="line">            <span class="keyword">const</span> obj = <span class="keyword">new</span> MyPromise();</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Object</span>.assign(obj, &#123;</span><br><span class="line">                status: obj.statusObj.RESOLVED,</span><br><span class="line">                value</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 静态resolve方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>value </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="title">reject</span>(<span class="params">value</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> that = MyPromise.that;</span><br><span class="line">        <span class="keyword">const</span> f = that <span class="keyword">instanceof</span> MyPromise;</span><br><span class="line">        <span class="keyword">if</span> (f &amp;&amp; that.status === that.statusObj.REJECTED) &#123;</span><br><span class="line">            that.status = that.statusObj.REJECTED;</span><br><span class="line">            that.value = value;</span><br><span class="line">            that.rejectedCallBacks.map(<span class="function"><span class="params">cb</span> =&gt;</span> that.value = cb(that.value));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!f) &#123;</span><br><span class="line">            <span class="keyword">const</span> obj = <span class="keyword">new</span> MyPromise();</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Object</span>.assign(obj, &#123;</span><br><span class="line">                status: that.statusObj.REJECTED,</span><br><span class="line">                value</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * MyPromise 原型上的then方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>onFulfilled </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>onRejected </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="title">then</span>(<span class="params">onFulfilled, onRejected</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; PENDING, RESOLVED, REJECTED &#125; = <span class="built_in">this</span>.statusObj;</span><br><span class="line">        <span class="keyword">const</span> f = <span class="keyword">typeof</span> onFulfilled == <span class="string">&#x27;function&#x27;</span> ? onFulfilled : <span class="function"><span class="params">c</span> =&gt;</span> c</span><br><span class="line">        <span class="keyword">const</span> r = <span class="keyword">typeof</span> onRejected == <span class="string">&#x27;function&#x27;</span> ? onRejected : <span class="function"><span class="params">c</span> =&gt;</span> &#123; <span class="keyword">throw</span> c &#125;;</span><br><span class="line">        <span class="keyword">switch</span> (<span class="built_in">this</span>.status) &#123;</span><br><span class="line">            <span class="keyword">case</span> PENDING: <span class="comment">// PENDING 状态下 向下回调函数结合添加callback</span></span><br><span class="line">                <span class="built_in">this</span>.resolvedCallBacks.push(f);</span><br><span class="line">                <span class="built_in">this</span>.rejectedCallBacks.push(r);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> RESOLVED:</span><br><span class="line">                <span class="built_in">this</span>.value = f(<span class="built_in">this</span>.value); <span class="comment">// 将回调函数的返回值赋值给实例的 value ，满足链式调用then方法时传递value</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> REJECTED:</span><br><span class="line">                <span class="built_in">this</span>.value = r(<span class="built_in">this</span>.value); <span class="comment">// 将回调函数的返回值赋值给实例的 value ，满足链式调用then方法时传递value</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 满足链式调用then，返回MyPromise实例对象</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// new 一个Promise进行测试</span></span><br><span class="line">MyPromise.resolve(<span class="string">&#x27;success&#x27;</span>).then(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e);</span><br><span class="line">    <span class="keyword">return</span> e + <span class="number">1</span>;</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> MyPromise(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        resolve(<span class="number">1</span>)</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;)</span><br><span class="line">    .then(<span class="function">(<span class="params">res2</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res2);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;).then(<span class="function">(<span class="params">res3</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res3);</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript数据迭代方法</title>
      <link href="/count-goblin/2021/01/27/javaScript%E6%95%B0%E6%8D%AE%E8%BF%AD%E4%BB%A3%E6%96%B9%E6%B3%95/"/>
      <url>/count-goblin/2021/01/27/javaScript%E6%95%B0%E6%8D%AE%E8%BF%AD%E4%BB%A3%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\count-goblin\assets\css\APlayer.min.css"><script src="\count-goblin\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>今天花一天时间折腾Spring Boot+vue.js+axios文件，还好最算是弄成功了，在这里做个详细的笔记！</p><h2 id="javaScript数据迭代方法"><a href="#javaScript数据迭代方法" class="headerlink" title="javaScript数据迭代方法"></a>javaScript数据迭代方法</h2><blockquote><p>前言：JavaScript数据的迭代方法如果可以被被我们灵活的使用，可以达到出其不意的效果！</p></blockquote><blockquote><p>ES5为数组定义了5个迭代的方法。</p><ul><li><p>every()：对数组中的每一项运行给定函数，如果该函数对每一项都返回 true，则返回 true。</p></li><li><p>filter()：对数组中的每一项运行给定函数，返回该函数会返回 true 的项组成的数组。 </p></li><li><p>forEach()：对数组中的每一项运行给定函数。这个方法没有返回值。 </p></li><li><p>map()：对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组。 </p></li><li><p>some()：对数组中的每一项运行给定函数，如果该函数对任一项返回 true，则返回 true。</p></li></ul><p>每个方法都接收两个参数：</p><p>1、要在每一项上运行的函数</p><p>2、运行该函数的作用域对象–影响this的值(可选)。</p><p>运行的函数会接受三个参数：1)<strong>数组项的值</strong> 2)<strong>该项在数组中的位置（下标）</strong>3)<strong>数组对象本身。</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arrTemp = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br></pre></td></tr></table></figure><h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach ( )"></a>forEach ( )</h3><p><strong>对数组的每一项运行给定函数。该方法没有返回值</strong> 。用法其实和for循环一样</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> resulte = arrTemp.forEach(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(item)&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="some-和every"><a href="#some-和every" class="headerlink" title="some ( )和every ( )"></a>some ( )和every ( )</h3><blockquote><p>**every()**和 **some()**，它们都用于查询数组中的项是否满足某个条件。 对 every()来说，传入的函数必须对每一项都返回 true，这个方法才返回 true；否则，它就返回 false。而 some()方法则是只要传入的函数对数组中的某一项返回 true，就会返回 true，理解时，可以借助逻辑与或的关系</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arrTemp  = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> everyResult = arrTemp.every(<span class="function"><span class="keyword">function</span> (<span class="params">item, index, array</span>) </span>&#123; </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> (item &gt; <span class="number">2</span>); <span class="comment">// 每一项都大于2才会返回true</span></span><br><span class="line">    </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">alert(everyResult);    <span class="comment">// false </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> someResult = arrTemp.some(<span class="function"><span class="keyword">function</span> (<span class="params">item, index, array</span>) </span>&#123; </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> (item &gt; <span class="number">2</span>); <span class="comment">// 只要有一项大于2就会返回true</span></span><br><span class="line">    </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">alert(someResult);     <span class="comment">// true </span></span><br></pre></td></tr></table></figure><h3 id="filter-—过滤"><a href="#filter-—过滤" class="headerlink" title="filter ( )—过滤"></a>filter ( )—过滤</h3><blockquote><p>**filter()**函数，它利用指定的函数确定是否在返回的数组中包含某一项。例如，要 返回一个所有数值都大于 2的数组，可以使用以下代码。 </p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arrTemp = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> filterResult = arrTemp.filter(<span class="function"><span class="keyword">function</span> (<span class="params">item, index, array</span>) </span>&#123; </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> (item &gt; <span class="number">2</span>); </span><br><span class="line">    </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">alert(filterResult);  <span class="comment">//[3,4]</span></span><br></pre></td></tr></table></figure><p>再写一个其他的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> totalUserList=[</span><br><span class="line">    &#123;<span class="attr">postId</span>:<span class="string">&#x27;xxxxxxx&#x27;</span>,<span class="attr">postName</span>:<span class="string">&#x27;yyyyyyy&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">postId</span>:<span class="string">&#x27;ccccccc&#x27;</span>,<span class="attr">postName</span>:<span class="string">&#x27;ddddddd&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">postId</span>:<span class="string">&#x27;bbbbbbb&#x27;</span>,<span class="attr">postName</span>:<span class="string">&#x27;aaaaaaa&#x27;</span>&#125;</span><br><span class="line">]</span><br><span class="line"><span class="function"><span class="title">filterUserList</span>(<span class="params">type</span>)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> list = totalUserList.filter(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">        </span><br><span class="line">       <span class="keyword">return</span> item.postId === type</span><br><span class="line">        </span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 返回的 list 中，都是postId和totalUserList中一样的数据</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="map"><a href="#map" class="headerlink" title="map ( )"></a>map ( )</h3><blockquote><p>**map( )**也返回一个数组，而这个数组的每一项都是在原始数组中的对应项上运行传入函数的结果。 例如，可以给数组中的每一项乘以 2，然后返回这些乘积组成的数组，如下所示。 </p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arrTemp = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mapResult = arrTemp.map(<span class="function"><span class="keyword">function</span> (<span class="params">item, index, array</span>) </span>&#123; </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> item * <span class="number">2</span>; </span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">alert(mapResult);  <span class="comment">//[2,4,6,8] </span></span><br></pre></td></tr></table></figure><p>同样，map（）也可以用作循环：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">let</span> list = data.Service.Body.companyBriefInfoList || [];</span><br><span class="line">list = list.map(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> item.custName + <span class="string">&#x27;-&#x27;</span> + item.custNo;</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure><p><strong>重点：文章 内容 摘自《JavaScript高级程序设计》</strong></p>]]></content>
      
      
      <categories>
          
          <category> 数据操作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9种常见的前端跨域解决方案</title>
      <link href="/count-goblin/2021/01/21/9%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%9A%84%E5%89%8D%E7%AB%AF%E8%B7%A8%E5%9F%9F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%EF%BC%88%E8%AF%A6%E8%A7%A3%EF%BC%89/"/>
      <url>/count-goblin/2021/01/21/9%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%9A%84%E5%89%8D%E7%AB%AF%E8%B7%A8%E5%9F%9F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%EF%BC%88%E8%AF%A6%E8%A7%A3%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\count-goblin\assets\css\APlayer.min.css"><script src="\count-goblin\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、什么是跨域？"><a href="#一、什么是跨域？" class="headerlink" title="一、什么是跨域？"></a>一、什么是跨域？</h2><p>  在前端领域中，跨域是指浏览器允许向服务器发送跨域请求，从而克服Ajax只能同源使用的限制。</p><h3 id="什么是同源策略？"><a href="#什么是同源策略？" class="headerlink" title="什么是同源策略？"></a>什么是同源策略？</h3><p>  同源策略是一种约定，由Netscape公司1995年引入浏览器，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，浏览器很容易受到XSS、CSFR等攻击。所谓同源是指”协议+域名+端口”三者相同，即便两个不同的域名指向同一个ip地址，也非同源。</p><p>  同源策略限制以下几种行为：</p><ul><li>Cookie、LocalStorage 和 IndexDB 无法读取</li><li>DOM和JS对象无法获得</li><li>AJAX 请求不能发送</li></ul><h2 id="二、常见的跨域场景"><a href="#二、常见的跨域场景" class="headerlink" title="二、常见的跨域场景"></a>二、常见的跨域场景</h2><p><img src= "/count-goblin/img/loading.gif" data-lazy-src="https://pic1.zhimg.com/v2-4ed5f3802f7c278c8dad72b08128a72c_b.png" alt="img"></p><h2 id="三、9种跨域解决方案"><a href="#三、9种跨域解决方案" class="headerlink" title="三、9种跨域解决方案"></a>三、9种跨域解决方案</h2><h3 id="1、JSONP跨域"><a href="#1、JSONP跨域" class="headerlink" title="1、JSONP跨域"></a>1、JSONP跨域</h3><p>  jsonp的原理就是利用<script>标签没有跨域限制，通过<script>标签src属性，发送带有callback参数的GET请求，服务端将接口返回数据拼凑到callback函数中，返回给浏览器，浏览器解析执行，从而前端拿到callback函数返回的数据。 1）原生JS实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">   <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">   script.type = <span class="string">&#x27;text/javascript&#x27;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 传参一个回调函数名给后端，方便后端返回时执行这个在前端定义的回调函数</span></span><br><span class="line">   script.src = <span class="string">&#x27;http://www.domain2.com:8080/login?user=admin&amp;callback=handleCallback&#x27;</span>;</span><br><span class="line">   <span class="built_in">document</span>.head.appendChild(script);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 回调执行函数</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">handleCallback</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">       alert(<span class="built_in">JSON</span>.stringify(res));</span><br><span class="line">   &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>服务端返回如下（返回时即执行全局函数）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">handleCallback(&#123;<span class="string">&quot;success&quot;</span>: <span class="literal">true</span>, <span class="string">&quot;user&quot;</span>: <span class="string">&quot;admin&quot;</span>&#125;)</span><br></pre></td></tr></table></figure><p>2）jquery Ajax实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url: <span class="string">&#x27;http://www.domain2.com:8080/login&#x27;</span>,</span><br><span class="line">    type: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    dataType: <span class="string">&#x27;jsonp&#x27;</span>,  <span class="comment">// 请求方式为jsonp</span></span><br><span class="line">    jsonpCallback: <span class="string">&quot;handleCallback&quot;</span>,  <span class="comment">// 自定义回调函数名</span></span><br><span class="line">    data: &#123;&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>3）Vue axios实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.$http = axios;</span><br><span class="line"><span class="built_in">this</span>.$http.jsonp(<span class="string">&#x27;http://www.domain2.com:8080/login&#x27;</span>, &#123;</span><br><span class="line">    params: &#123;&#125;,</span><br><span class="line">    jsonp: <span class="string">&#x27;handleCallback&#x27;</span></span><br><span class="line">&#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res); </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>后端node.js代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> querystring = <span class="built_in">require</span>(<span class="string">&#x27;querystring&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> server = http.createServer();</span><br><span class="line"></span><br><span class="line">server.on(<span class="string">&#x27;request&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> params = querystring.parse(req.url.split(<span class="string">&#x27;?&#x27;</span>)[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">var</span> fn = params.callback;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// jsonp返回设置</span></span><br><span class="line">    res.writeHead(<span class="number">200</span>, &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/javascript&#x27;</span> &#125;);javascript</span><br><span class="line">    res.write(fn + <span class="string">&#x27;(&#x27;</span> + <span class="built_in">JSON</span>.stringify(params) + <span class="string">&#x27;)&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    res.end();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(<span class="string">&#x27;8080&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;Server is running at port 8080...&#x27;</span>);</span><br></pre></td></tr></table></figure><blockquote><p>jsonp的缺点：只能发送get一种请求。</p></blockquote><h3 id="2、跨域资源共享（CORS）"><a href="#2、跨域资源共享（CORS）" class="headerlink" title="2、跨域资源共享（CORS）"></a>2、跨域资源共享（CORS）</h3><p>  CORS是一个W3C标准，全称是”跨域资源共享”（Cross-origin resource sharing）。 它允许浏览器向跨源服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制。 CORS需要浏览器和服务器同时支持。目前，所有浏览器都支持该功能，IE浏览器不能低于IE10。   浏览器将CORS跨域请求分为简单请求和非简单请求。   只要同时满足一下两个条件，就属于简单请求 (1)使用下列方法之一：</p><ul><li>head</li><li>get</li><li>post</li></ul><p>(2)请求的Heder是</p><ul><li>Accept</li><li>Accept-Language</li><li>Content-Language</li><li>Content-Type: 只限于三个值：application/x-www-form-urlencoded、multipart/form-data、text/plain</li></ul><p>不同时满足上面的两个条件，就属于非简单请求。浏览器对这两种的处理，是不一样的。</p><h3 id="简单请求"><a href="#简单请求" class="headerlink" title="简单请求"></a>简单请求</h3><p>  对于简单请求，浏览器直接发出CORS请求。具体来说，就是在头信息之中，增加一个Origin字段。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">GET</span> <span class="string">/cors</span> <span class="string">HTTP/1.1</span></span><br><span class="line"><span class="attr">Origin:</span> <span class="string">http://api.bob.com</span></span><br><span class="line"><span class="attr">Host:</span> <span class="string">api.alice.com</span></span><br><span class="line"><span class="attr">Accept-Language:</span> <span class="string">en-US</span></span><br><span class="line"><span class="attr">Connection:</span> <span class="string">keep-alive</span></span><br><span class="line"><span class="attr">User-Agent:</span> <span class="string">Mozilla/5.0...</span></span><br></pre></td></tr></table></figure><p>  上面的头信息中，Origin字段用来说明，本次请求来自哪个源（协议 + 域名 + 端口）。服务器根据这个值，决定是否同意这次请求。</p><h3 id="CORS请求设置的响应头字段，都以-Access-Control-开头"><a href="#CORS请求设置的响应头字段，都以-Access-Control-开头" class="headerlink" title="CORS请求设置的响应头字段，都以 Access-Control-开头:"></a>CORS请求设置的响应头字段，都以 Access-Control-开头:</h3><p>1）Access-Control-Allow-Origin：必选   它的值要么是请求时Origin字段的值，要么是一个*，表示接受任意域名的请求。 2）Access-Control-Allow-Credentials：可选   它的值是一个布尔值，表示是否允许发送Cookie。默认情况下，Cookie不包括在CORS请求之中。设为true，即表示服务器明确许可，Cookie可以包含在请求中，一起发给服务器。这个值也只能设为true，如果服务器不要浏览器发送Cookie，删除该字段即可。 3）Access-Control-Expose-Headers：可选   CORS请求时，XMLHttpRequest对象的getResponseHeader()方法只能拿到6个基本字段：Cache-Control、Content-Language、Content-Type、Expires、Last-Modified、Pragma。如果想拿到其他字段，就必须在Access-Control-Expose-Headers里面指定。上面的例子指定，getResponseHeader(‘FooBar’)可以返回FooBar字段的值。</p><h3 id="非简单请求"><a href="#非简单请求" class="headerlink" title="非简单请求"></a>非简单请求</h3><p>  非简单请求是那种对服务器有特殊要求的请求，比如请求方法是PUT或DELETE，或者Content-Type字段的类型是application/json。非简单请求的CORS请求，会在正式通信之前，增加一次HTTP查询请求，称为”预检”请求（preflight）。</p><h3 id="预检请求"><a href="#预检请求" class="headerlink" title="预检请求"></a>预检请求</h3><p>  预检”请求用的请求方法是OPTIONS，表示这个请求是用来询问的。请求头信息里面，关键字段是Origin，表示请求来自哪个源。除了Origin字段，”预检”请求的头信息包括两个特殊字段。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">OPTIONS</span> <span class="string">/cors</span> <span class="string">HTTP/1.1</span></span><br><span class="line"><span class="attr">Origin:</span> <span class="string">http://api.bob.com</span></span><br><span class="line"><span class="attr">Access-Control-Request-Method:</span> <span class="string">PUT</span></span><br><span class="line"><span class="attr">Access-Control-Request-Headers:</span> <span class="string">X-Custom-Header</span></span><br><span class="line"><span class="attr">Host:</span> <span class="string">api.alice.com</span></span><br><span class="line"><span class="attr">Accept-Language:</span> <span class="string">en-US</span></span><br><span class="line"><span class="attr">Connection:</span> <span class="string">keep-alive</span></span><br><span class="line"><span class="attr">User-Agent:</span> <span class="string">Mozilla/5.0..</span></span><br></pre></td></tr></table></figure><p>1）Access-Control-Request-Method：必选   用来列出浏览器的CORS请求会用到哪些HTTP方法，上例是PUT。 2）Access-Control-Request-Headers：可选   该字段是一个逗号分隔的字符串，指定浏览器CORS请求会额外发送的头信息字段，上例是X-Custom-Header。</p><h3 id="预检请求的回应"><a href="#预检请求的回应" class="headerlink" title="预检请求的回应"></a>预检请求的回应</h3><p>  服务器收到”预检”请求以后，检查了Origin、Access-Control-Request-Method和Access-Control-Request-Headers字段以后，确认允许跨源请求，就可以做出回应。   HTTP回应中，除了关键的是Access-Control-Allow-Origin字段，其他CORS相关字段如下： 1）Access-Control-Allow-Methods：必选   它的值是逗号分隔的一个字符串，表明服务器支持的所有跨域请求的方法。注意，返回的是所有支持的方法，而不单是浏览器请求的那个方法。这是为了避免多次”预检”请求。 2）Access-Control-Allow-Headers   如果浏览器请求包括Access-Control-Request-Headers字段，则Access-Control-Allow-Headers字段是必需的。它也是一个逗号分隔的字符串，表明服务器支持的所有头信息字段，不限于浏览器在”预检”中请求的字段。 3）Access-Control-Allow-Credentials：可选   该字段与简单请求时的含义相同。 4）Access-Control-Max-Age：可选   用来指定本次预检请求的有效期，单位为秒。</p><h3 id="CORS跨域示例"><a href="#CORS跨域示例" class="headerlink" title="CORS跨域示例"></a>CORS跨域示例</h3><p>1）前端设置：</p><ul><li>原生ajax：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest(); <span class="comment">// IE8/9需用window.XDomainRequest兼容</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 前端设置是否带cookie</span></span><br><span class="line">xhr.withCredentials = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">xhr.open(<span class="string">&#x27;post&#x27;</span>, <span class="string">&#x27;http://www.domain2.com:8080/login&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.setRequestHeader(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>);</span><br><span class="line">xhr.send(<span class="string">&#x27;user=admin&#x27;</span>);</span><br><span class="line"></span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span> &amp;&amp; xhr.status == <span class="number">200</span>) &#123;</span><br><span class="line">        alert(xhr.responseText);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>jquery ajax：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    ...</span><br><span class="line">   xhrFields: &#123;</span><br><span class="line">       withCredentials: <span class="literal">true</span>    <span class="comment">// 前端设置是否带cookie</span></span><br><span class="line">   &#125;,</span><br><span class="line">   crossDomain: <span class="literal">true</span>,   <span class="comment">// 会让请求头中包含跨域的额外信息，但不会含cookie</span></span><br><span class="line">    ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>2）服务端设置：</p><ul><li>nodejs代码</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> server = http.createServer();</span><br><span class="line"><span class="keyword">var</span> qs = <span class="built_in">require</span>(<span class="string">&#x27;querystring&#x27;</span>);</span><br><span class="line"></span><br><span class="line">server.on(<span class="string">&#x27;request&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> postData = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数据块接收中</span></span><br><span class="line">    req.addListener(<span class="string">&#x27;data&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>) </span>&#123;</span><br><span class="line">        postData += chunk;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数据接收完毕</span></span><br><span class="line">    req.addListener(<span class="string">&#x27;end&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        postData = qs.parse(postData);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 跨域后台设置</span></span><br><span class="line">        res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">            <span class="string">&#x27;Access-Control-Allow-Credentials&#x27;</span>: <span class="string">&#x27;true&#x27;</span>,     <span class="comment">// 后端允许发送Cookie</span></span><br><span class="line">            <span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>: <span class="string">&#x27;http://www.domain1.com&#x27;</span>,    <span class="comment">// 允许访问的域（协议+域名+端口）</span></span><br><span class="line">            <span class="comment">/* </span></span><br><span class="line"><span class="comment">             * 此处设置的cookie还是domain2的而非domain1，因为后端也不能跨域写cookie(nginx反向代理可以实现)，</span></span><br><span class="line"><span class="comment">             * 但只要domain2中写入一次cookie认证，后面的跨域接口都能从domain2中获取cookie，从而实现所有的接口都能跨域访问</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="string">&#x27;Set-Cookie&#x27;</span>: <span class="string">&#x27;l=a123456;Path=/;Domain=www.domain2.com;HttpOnly&#x27;</span>  <span class="comment">// HttpOnly的作用是让js无法读取cookie</span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        res.write(<span class="built_in">JSON</span>.stringify(postData));</span><br><span class="line">        res.end();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(<span class="string">&#x27;8080&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;Server is running at port 8080...&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="3、nginx代理跨域"><a href="#3、nginx代理跨域" class="headerlink" title="3、nginx代理跨域"></a>3、nginx代理跨域</h3><p>  nginx代理跨域，实质和CORS跨域原理一样，通过配置文件设置请求响应头Access-Control-Allow-Origin…等字段。</p><h3 id="1）nginx配置解决iconfont跨域"><a href="#1）nginx配置解决iconfont跨域" class="headerlink" title="1）nginx配置解决iconfont跨域"></a>1）nginx配置解决iconfont跨域</h3><p>  浏览器跨域访问js、css、img等常规静态资源被同源策略许可，但iconfont字体文件(eot|otf|ttf|woff|svg)例外，此时可在nginx的静态资源服务器中加入以下配置。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">  <span class="attribute">add_header</span> Access-Control-Allow-Origin *;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2）nginx反向代理接口跨域"><a href="#2）nginx反向代理接口跨域" class="headerlink" title="2）nginx反向代理接口跨域"></a>2）nginx反向代理接口跨域</h3><blockquote><p>跨域问题：同源策略仅是针对浏览器的安全策略。服务器端调用HTTP接口只是使用HTTP协议，不需要同源策略，也就不存在跨域问题。</p></blockquote><p>实现思路：通过Nginx配置一个代理服务器域名与domain1相同，端口不同）做跳板机，反向代理访问domain2接口，并且可以顺便修改cookie中domain信息，方便当前域cookie写入，实现跨域访问。 nginx具体配置：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#proxy服务器</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">81</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  www.domain1.com;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span>   http://www.domain2.com:8080;  <span class="comment">#反向代理</span></span><br><span class="line">        <span class="attribute">proxy_cookie_domain</span> www.domain2.com www.domain1.com; <span class="comment">#修改cookie里域名</span></span><br><span class="line">        <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 当用webpack-dev-server等中间件代理接口访问nignx时，此时无浏览器参与，故没有同源限制，下面的跨域配置可不启用</span></span><br><span class="line">        <span class="attribute">add_header</span> Access-Control-Allow-Origin http://www.domain1.com;  <span class="comment">#当前端只跨域不带cookie时，可为*</span></span><br><span class="line">        <span class="attribute">add_header</span> Access-Control-Allow-Credentials <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、nodejs中间件代理跨域"><a href="#4、nodejs中间件代理跨域" class="headerlink" title="4、nodejs中间件代理跨域"></a>4、nodejs中间件代理跨域</h3><p>  node中间件实现跨域代理，原理大致与nginx相同，都是通过启一个代理服务器，实现数据的转发，也可以通过设置cookieDomainRewrite参数修改响应头中cookie中域名，实现当前域的cookie写入，方便接口登录认证。 1）非vue框架的跨域   使用node + express + http-proxy-middleware搭建一个proxy服务器。</p><ul><li>前端代码：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前端开关：浏览器是否读写cookie</span></span><br><span class="line">xhr.withCredentials = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问http-proxy-middleware代理服务器</span></span><br><span class="line">xhr.open(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;http://www.domain1.com:3000/login?user=admin&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.send();</span><br></pre></td></tr></table></figure><ul><li>中间件服务器代码：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> proxy = <span class="built_in">require</span>(<span class="string">&#x27;http-proxy-middleware&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line">app.use(<span class="string">&#x27;/&#x27;</span>, proxy(&#123;</span><br><span class="line">    <span class="comment">// 代理跨域目标接口</span></span><br><span class="line">    target: <span class="string">&#x27;http://www.domain2.com:8080&#x27;</span>,</span><br><span class="line">    changeOrigin: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改响应头信息，实现跨域并允许带cookie</span></span><br><span class="line">    onProxyRes: <span class="function"><span class="keyword">function</span>(<span class="params">proxyRes, req, res</span>) </span>&#123;</span><br><span class="line">        res.header(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;http://www.domain1.com&#x27;</span>);</span><br><span class="line">        res.header(<span class="string">&#x27;Access-Control-Allow-Credentials&#x27;</span>, <span class="string">&#x27;true&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改响应信息中的cookie域名</span></span><br><span class="line">    cookieDomainRewrite: <span class="string">&#x27;www.domain1.com&#x27;</span>  <span class="comment">// 可以为false，表示不修改</span></span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;Proxy server is listen at port 3000...&#x27;</span>);</span><br></pre></td></tr></table></figure><p>2）vue框架的跨域   node + vue + webpack + webpack-dev-server搭建的项目，跨域请求接口，直接修改webpack.config.js配置。开发环境下，vue渲染服务和接口代理服务都是webpack-dev-server同一个，所以页面与代理接口之间不再跨域。 webpack.config.js部分配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: &#123;&#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;&#125;,</span><br><span class="line">    ...</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        historyApiFallback: <span class="literal">true</span>,</span><br><span class="line">        proxy: [&#123;</span><br><span class="line">            context: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">            target: <span class="string">&#x27;http://www.domain2.com:8080&#x27;</span>,  <span class="comment">// 代理跨域目标接口</span></span><br><span class="line">            changeOrigin: <span class="literal">true</span>,</span><br><span class="line">            secure: <span class="literal">false</span>,  <span class="comment">// 当代理某些https服务报错时用</span></span><br><span class="line">            cookieDomainRewrite: <span class="string">&#x27;www.domain1.com&#x27;</span>  <span class="comment">// 可以为false，表示不修改</span></span><br><span class="line">        &#125;],</span><br><span class="line">        noInfo: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、document-domain-iframe跨域"><a href="#5、document-domain-iframe跨域" class="headerlink" title="5、document.domain + iframe跨域"></a>5、document.domain + iframe跨域</h3><p>  此方案仅限主域相同，子域不同的跨域应用场景。实现原理：两个页面都通过js强制设置document.domain为基础主域，就实现了同域。 1）父窗口：(<a href="http://www.domain.com/a.html">http://www.domain.com/a.html</a>)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe id=<span class="string">&quot;iframe&quot;</span> src=<span class="string">&quot;http://child.domain.com/b.html&quot;</span>&gt;&lt;/iframe&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="built_in">document</span>.domain = <span class="string">&#x27;domain.com&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> user = <span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>1）子窗口：(<a href="http://child.domain.com/a.html">http://child.domain.com/a.html</a>)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="built_in">document</span>.domain = <span class="string">&#x27;domain.com&#x27;</span>;</span><br><span class="line">    <span class="comment">// 获取父窗口中变量</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;get js data from parent ---&gt; &#x27;</span> + <span class="built_in">window</span>.parent.user);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="6、location-hash-iframe跨域"><a href="#6、location-hash-iframe跨域" class="headerlink" title="6、location.hash + iframe跨域"></a>6、location.hash + iframe跨域</h3><p>  实现原理： a欲与b跨域相互通信，通过中间页c来实现。 三个页面，不同域之间利用iframe的location.hash传值，相同域之间直接js访问来通信。   具体实现：A域：a.html -&gt; B域：b.html -&gt; A域：c.html，a与b不同域只能通过hash值单向通信，b与c也不同域也只能单向通信，但c与a同域，所以c可通过parent.parent访问a页面所有对象。 1）a.html：(<a href="http://www.domain1.com/a.html">http://www.domain1.com/a.html</a>)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe id=<span class="string">&quot;iframe&quot;</span> src=<span class="string">&quot;http://www.domain2.com/b.html&quot;</span> style=<span class="string">&quot;display:none;&quot;</span>&gt;&lt;/iframe&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> iframe = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;iframe&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向b.html传hash值</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        iframe.src = iframe.src + <span class="string">&#x27;#user=admin&#x27;</span>;</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 开放给同域c.html的回调方法</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">onCallback</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">&#x27;data from c.html ---&gt; &#x27;</span> + res);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>2）b.html：(<a href="http://www.domain2.com/b.html">http://www.domain2.com/b.html</a>)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe id=<span class="string">&quot;iframe&quot;</span> src=<span class="string">&quot;http://www.domain1.com/c.html&quot;</span> style=<span class="string">&quot;display:none;&quot;</span>&gt;&lt;/iframe&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> iframe = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;iframe&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听a.html传来的hash值，再传给c.html</span></span><br><span class="line">    <span class="built_in">window</span>.onhashchange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        iframe.src = iframe.src + location.hash;</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>3）c.html：(<a href="http://www.domain1.com/c.html">http://www.domain1.com/c.html</a>)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 监听b.html传来的hash值</span></span><br><span class="line">    <span class="built_in">window</span>.onhashchange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 再通过操作同域a.html的js回调，将结果传回</span></span><br><span class="line">        <span class="built_in">window</span>.parent.parent.onCallback(<span class="string">&#x27;hello: &#x27;</span> + location.hash.replace(<span class="string">&#x27;#user=&#x27;</span>, <span class="string">&#x27;&#x27;</span>));</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="7、window-name-iframe跨域"><a href="#7、window-name-iframe跨域" class="headerlink" title="7、window.name + iframe跨域"></a>7、window.name + iframe跨域</h3><p>  window.name属性的独特之处：name值在不同的页面（甚至不同域名）加载后依旧存在，并且可以支持非常长的 name 值（2MB）。 1）a.html：(<a href="http://www.domain1.com/a.html">http://www.domain1.com/a.html</a>)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> proxy = <span class="function"><span class="keyword">function</span>(<span class="params">url, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> state = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> iframe = <span class="built_in">document</span>.createElement(<span class="string">&#x27;iframe&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加载跨域页面</span></span><br><span class="line">    iframe.src = url;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// onload事件会触发2次，第1次加载跨域页，并留存数据于window.name</span></span><br><span class="line">    iframe.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (state === <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 第2次onload(同域proxy页)成功后，读取同域window.name中数据</span></span><br><span class="line">            callback(iframe.contentWindow.name);</span><br><span class="line">            destoryFrame();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (state === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 第1次onload(跨域页)成功后，切换到同域代理页面</span></span><br><span class="line">            iframe.contentWindow.location = <span class="string">&#x27;http://www.domain1.com/proxy.html&#x27;</span>;</span><br><span class="line">            state = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(iframe);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取数据以后销毁这个iframe，释放内存；这也保证了安全（不被其他域frame js访问）</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">destoryFrame</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        iframe.contentWindow.document.write(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">        iframe.contentWindow.close();</span><br><span class="line">        <span class="built_in">document</span>.body.removeChild(iframe);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求跨域b页面数据</span></span><br><span class="line">proxy(<span class="string">&#x27;http://www.domain2.com/b.html&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    alert(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>2）proxy.html：(<a href="http://www.domain1.com/proxy.html">http://www.domain1.com/proxy.html</a>)   中间代理页，与a.html同域，内容为空即可。</p><p>3）b.html：(<a href="http://www.domain2.com/b.html">http://www.domain2.com/b.html</a>)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    window.name &#x3D; &#39;This is domain2 data!&#39;;</span><br><span class="line">&lt;&#x2F;script&gt;javascript</span><br></pre></td></tr></table></figure><p>  通过iframe的src属性由外域转向本地域，跨域数据即由iframe的window.name从外域传递到本地域。这个就巧妙地绕过了浏览器的跨域访问限制，但同时它又是安全操作。</p><h3 id="8、postMessage跨域"><a href="#8、postMessage跨域" class="headerlink" title="8、postMessage跨域"></a>8、postMessage跨域</h3><p>  postMessage是HTML5 XMLHttpRequest Level 2中的API，且是为数不多可以跨域操作的window属性之一，它可用于解决以下方面的问题：</p><ul><li>页面和其打开的新窗口的数据传递</li><li>多窗口之间消息传递</li><li>页面与嵌套的iframe消息传递</li><li>上面三个场景的跨域数据传递</li></ul><p>用法：postMessage(data,origin)方法接受两个参数：</p><ul><li>data： html5规范支持任意基本类型或可复制的对象，但部分浏览器只支持字符串，所以传参时最好用JSON.stringify()序列化。</li><li>origin： 协议+主机+端口号，也可以设置为”*”，表示可以传递给任意窗口，如果要指定和当前窗口同源的话设置为”/“。</li></ul><p>1）a.html：(<a href="http://www.domain1.com/a.html">http://www.domain1.com/a.html</a>)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe id=<span class="string">&quot;iframe&quot;</span> src=<span class="string">&quot;http://www.domain2.com/b.html&quot;</span> style=<span class="string">&quot;display:none;&quot;</span>&gt;&lt;/iframe&gt;</span><br><span class="line">&lt;script&gt;       </span><br><span class="line">    <span class="keyword">var</span> iframe = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;iframe&#x27;</span>);</span><br><span class="line">    iframe.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> data = &#123;</span><br><span class="line">            name: <span class="string">&#x27;aym&#x27;</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 向domain2传送跨域数据</span></span><br><span class="line">        iframe.contentWindow.postMessage(<span class="built_in">JSON</span>.stringify(data), <span class="string">&#x27;http://www.domain2.com&#x27;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接受domain2返回数据</span></span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;message&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">&#x27;data from domain2 ---&gt; &#x27;</span> + e.data);</span><br><span class="line">    &#125;, <span class="literal">false</span>);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>2）b.html：(<a href="http://www.domain2.com/b.html">http://www.domain2.com/b.html</a>)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 接收domain1的数据</span></span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;message&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">&#x27;data from domain1 ---&gt; &#x27;</span> + e.data);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> data = <span class="built_in">JSON</span>.parse(e.data);</span><br><span class="line">        <span class="keyword">if</span> (data) &#123;</span><br><span class="line">            data.number = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 处理后再发回domain1</span></span><br><span class="line">            <span class="built_in">window</span>.parent.postMessage(<span class="built_in">JSON</span>.stringify(data), <span class="string">&#x27;http://www.domain1.com&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="literal">false</span>);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="9、WebSocket协议跨域"><a href="#9、WebSocket协议跨域" class="headerlink" title="9、WebSocket协议跨域"></a>9、WebSocket协议跨域</h3><p>  WebSocket protocol是HTML5一种新的协议。它实现了浏览器与服务器全双工通信，同时允许跨域通讯，是server push技术的一种很好的实现。 原生WebSocket API使用起来不太方便，我们使用Socket.io，它很好地封装了webSocket接口，提供了更简单、灵活的接口，也对不支持webSocket的浏览器提供了向下兼容。 1）前端代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;user input：&lt;input type=<span class="string">&quot;text&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;https://cdn.bootcss.com/socket.io/2.2.0/socket.io.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">var</span> socket = io(<span class="string">&#x27;http://www.domain2.com:8080&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接成功处理</span></span><br><span class="line">socket.on(<span class="string">&#x27;connect&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 监听服务端消息</span></span><br><span class="line">    socket.on(<span class="string">&#x27;message&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;data from server: ---&gt; &#x27;</span> + msg); </span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听服务端关闭</span></span><br><span class="line">    socket.on(<span class="string">&#x27;disconnect&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Server socket has closed.&#x27;</span>); </span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;input&#x27;</span>)[<span class="number">0</span>].onblur = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    socket.send(<span class="built_in">this</span>.value);</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>2）Nodejs socket后台：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> socket = <span class="built_in">require</span>(<span class="string">&#x27;socket.io&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启http服务</span></span><br><span class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">        <span class="string">&#x27;Content-type&#x27;</span>: <span class="string">&#x27;text/html&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line">    res.end();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(<span class="string">&#x27;8080&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;Server is running at port 8080...&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听socket连接</span></span><br><span class="line">socket.listen(server).on(<span class="string">&#x27;connection&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">client</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 接收信息</span></span><br><span class="line">    client.on(<span class="string">&#x27;message&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>) </span>&#123;</span><br><span class="line">        client.send(<span class="string">&#x27;hello：&#x27;</span> + msg);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;data from client: ---&gt; &#x27;</span> + msg);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 断开处理</span></span><br><span class="line">    client.on(<span class="string">&#x27;disconnect&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Client socket has closed.&#x27;</span>); </span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>  以上就是9种常见的跨域解决方案，jsonp（只支持get请求，支持老的IE浏览器）适合加载不同域名的js、css，img等静态资源；CORS（支持所有类型的HTTP请求，但浏览器IE10以下不支持）适合做ajax各种跨域请求；Nginx代理跨域和nodejs中间件跨域原理都相似，都是搭建一个服务器，直接在服务器端请求HTTP接口，这适合前后端分离的前端项目调后端接口。document.domain+iframe适合主域名相同，子域名不同的跨域请求。postMessage、websocket都是HTML5新特性，兼容性不是很好，只适用于主流浏览器和IE10+。   这么多的跨域方案，没有最好，只有最合适的，根据具体的使用场景选择跨域方案。希望这篇博文能带给大家一点帮助~~</p>]]></content>
      
      
      <categories>
          
          <category> 跨域 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 跨域 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何应对面试官的手写Promise</title>
      <link href="/count-goblin/2021/01/21/%E5%A6%82%E4%BD%95%E5%BA%94%E5%AF%B9%E9%9D%A2%E8%AF%95%E5%AE%98%E7%9A%84%E6%89%8B%E5%86%99Promise/"/>
      <url>/count-goblin/2021/01/21/%E5%A6%82%E4%BD%95%E5%BA%94%E5%AF%B9%E9%9D%A2%E8%AF%95%E5%AE%98%E7%9A%84%E6%89%8B%E5%86%99Promise/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\count-goblin\assets\css\APlayer.min.css"><script src="\count-goblin\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><strong>Promise是处理异步编码的一个解决方案，在Promise出现以前，异步代码的编写都是通过回调函数来处理的，回调函数本身没有任何问题，只是当多次异步回调有逻辑关系时就会变得复杂：</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line">fs.readFile(<span class="string">&#x27;1.doc&#x27;</span>, <span class="function">(<span class="params">err,res</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.readFile(<span class="string">&#x27;2.doc&#x27;</span>, <span class="function">(<span class="params">err,res</span>) =&gt;</span> &#123;</span><br><span class="line">        fs.readFile(<span class="string">&#x27;3.doc&#x27;</span>, <span class="function">(<span class="params">err,res</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 可能还有后续代码...</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p> 不过Promise的横空出世就有效的解决了这一问题，也就是回调地狱问题； 而手写Promise也是最近几年面试很容易考到的问题，下面收集了简易版的Promise和合乎<a href="https://promisesaplus.com/">Promises/A+规范</a>的Promise，仅供参考！</p></blockquote><h3 id="一、简易版"><a href="#一、简易版" class="headerlink" title="一、简易版"></a><strong>一、简易版</strong></h3><h3 id="1、首先定义constructor"><a href="#1、首先定义constructor" class="headerlink" title="1、首先定义constructor"></a><strong>1、首先定义constructor</strong></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">fn</span>)</span> &#123;</span><br><span class="line">        <span class="comment">// 定义Promise的三种状态</span></span><br><span class="line">        <span class="built_in">this</span>.statusObj = &#123;</span><br><span class="line">            PENDING: <span class="string">&#x27;PENDING&#x27;</span>,</span><br><span class="line">            RESOLVED: <span class="string">&#x27;RESOLVED&#x27;</span>,</span><br><span class="line">            REJECTED: <span class="string">&#x27;REJECTED&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.value = <span class="literal">null</span>;<span class="comment">// 定义传递给then的value</span></span><br><span class="line">        <span class="built_in">this</span>.status = <span class="built_in">this</span>.statusObj.PENDING; <span class="comment">// 设置当前Promise的状态</span></span><br><span class="line">        <span class="built_in">this</span>.resolvedCallBacks = []; <span class="comment">// 定义Promise成功状态的回调函数集合</span></span><br><span class="line">        <span class="built_in">this</span>.rejectedCallBacks = []; <span class="comment">// 定义Promise失败状态的回调函数集合</span></span><br><span class="line">        MyPromise.that = <span class="built_in">this</span>; <span class="comment">// 为静态方法定义其内部可以使用的指向实例的that</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 执行new Promise() 内传入的方法</span></span><br><span class="line">            fn(MyPromise.resolve, MyPromise.reject);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            MyPromise.reject(<span class="built_in">this</span>.value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="2、完善resolve、reject、then方法"><a href="#2、完善resolve、reject、then方法" class="headerlink" title="2、完善resolve、reject、then方法"></a><strong>2、完善resolve、reject、then方法</strong></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 静态resolve方法，MyPromise实例不可访问;</span></span><br><span class="line"><span class="comment"> * 支持类MyPromise访问，例：MyPromise.resolve(&#x27;success&#x27;).then(e=&gt;e)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>value </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="function"><span class="title">resolve</span>(<span class="params">value</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> that = MyPromise.that; <span class="comment">// 由于静态方法内的this访问的是类还不是实例，所以使用这种办法访问对象实例</span></span><br><span class="line">    <span class="keyword">const</span> f = that <span class="keyword">instanceof</span> MyPromise; <span class="comment">// 确认是否是MyPromise实例访问resolve</span></span><br><span class="line">    <span class="comment">// MyPromise 实例访问resolve,如果访问成功 状态改变、值改变</span></span><br><span class="line">    <span class="keyword">if</span> (f &amp;&amp; that.status === that.statusObj.PENDING) &#123;</span><br><span class="line">        that.status = that.statusObj.RESOLVED;</span><br><span class="line">        that.value = value;</span><br><span class="line">        that.resolvedCallBacks.map(<span class="function"><span class="params">cb</span> =&gt;</span> that.value = cb(that.value));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// MyPromise 类访问resolve</span></span><br><span class="line">    <span class="keyword">if</span> (!f) &#123;</span><br><span class="line">        <span class="keyword">const</span> obj = <span class="keyword">new</span> MyPromise();</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Object</span>.assign(obj, &#123;</span><br><span class="line">            status: obj.statusObj.RESOLVED,</span><br><span class="line">            value</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 那么<strong>resolve</strong>方法就和resolve方法差不多</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 静态resolve方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>value </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="function"><span class="title">reject</span>(<span class="params">value</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> that = MyPromise.that;</span><br><span class="line">    <span class="keyword">const</span> f = that <span class="keyword">instanceof</span> MyPromise;</span><br><span class="line">    <span class="keyword">if</span> (f &amp;&amp; that.status === that.statusObj.REJECTED) &#123;</span><br><span class="line">        that.status = that.statusObj.REJECTED;</span><br><span class="line">        that.value = value;</span><br><span class="line">        that.rejectedCallBacks.map(<span class="function"><span class="params">cb</span> =&gt;</span> that.value = cb(that.value));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!f) &#123;</span><br><span class="line">        <span class="keyword">const</span> obj = <span class="keyword">new</span> MyPromise();</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Object</span>.assign(obj, &#123;</span><br><span class="line">            status: that.statusObj.REJECTED,</span><br><span class="line">            value</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后是<strong>then</strong>方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * MyPromise 原型上的then方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>onFulfilled </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>onRejected </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="title">then</span>(<span class="params">onFulfilled, onRejected</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; PENDING, RESOLVED, REJECTED &#125; = <span class="built_in">this</span>.statusObj;</span><br><span class="line">    <span class="keyword">const</span> f = <span class="keyword">typeof</span> onFulfilled == <span class="string">&#x27;function&#x27;</span> ? onFulfilled : <span class="function"><span class="params">c</span> =&gt;</span> c</span><br><span class="line">    <span class="keyword">const</span> r = <span class="keyword">typeof</span> onRejected == <span class="string">&#x27;function&#x27;</span> ? onRejected : <span class="function"><span class="params">c</span> =&gt;</span> &#123; <span class="keyword">throw</span> c &#125;;</span><br><span class="line">    <span class="keyword">switch</span> (<span class="built_in">this</span>.status) &#123;</span><br><span class="line">        <span class="keyword">case</span> PENDING: <span class="comment">// PENDING 状态下 向下回调函数结合添加callback</span></span><br><span class="line">            <span class="built_in">this</span>.resolvedCallBacks.push(f);</span><br><span class="line">            <span class="built_in">this</span>.rejectedCallBacks.push(r);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> RESOLVED:</span><br><span class="line">            <span class="built_in">this</span>.value = f(<span class="built_in">this</span>.value); <span class="comment">// 将回调函数的返回值赋值给实例的 value ，满足链式调用then方法时传递value</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> REJECTED:</span><br><span class="line">            <span class="built_in">this</span>.value = r(<span class="built_in">this</span>.value); <span class="comment">// 将回调函数的返回值赋值给实例的 value ，满足链式调用then方法时传递value</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 满足链式调用then，返回MyPromise实例对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此呢，我们自定的MyPromise方法就写完了 ，接下里就是测试环节</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// new 一个Promise进行测试</span></span><br><span class="line">MyPromise.resolve(<span class="string">&#x27;success&#x27;</span>).then(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e);</span><br><span class="line">    <span class="keyword">return</span> e + <span class="number">1</span>;</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> MyPromise(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        resolve(<span class="number">1</span>)</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;)</span><br><span class="line">    .then(<span class="function">(<span class="params">res2</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res2);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;).then(<span class="function">(<span class="params">res3</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res3);</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>下面是测试的结果。</p><p><img src= "/count-goblin/img/loading.gif" data-lazy-src="https://pic1.zhimg.com/v2-d031456425c824e3f50142a793be8dc4_b.png" alt="img"></p><p>下面附上完整的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPromise</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">fn</span>)</span> &#123;</span><br><span class="line">        <span class="comment">// 定义Promise的三种状态</span></span><br><span class="line">        <span class="built_in">this</span>.statusObj = &#123;</span><br><span class="line">            PENDING: <span class="string">&#x27;PENDING&#x27;</span>,</span><br><span class="line"></span><br><span class="line">            RESOLVED: <span class="string">&#x27;RESOLVED&#x27;</span>,</span><br><span class="line">            REJECTED: <span class="string">&#x27;REJECTED&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.value = <span class="literal">null</span>;<span class="comment">// 定义传递给then的value</span></span><br><span class="line">        <span class="built_in">this</span>.status = <span class="built_in">this</span>.statusObj.PENDING; <span class="comment">// 设置当前Promise的状态</span></span><br><span class="line">        <span class="built_in">this</span>.resolvedCallBacks = []; <span class="comment">// 定义Promise成功状态的回调函数集合</span></span><br><span class="line">        <span class="built_in">this</span>.rejectedCallBacks = []; <span class="comment">// 定义Promise失败状态的回调函数集合</span></span><br><span class="line">        MyPromise.that = <span class="built_in">this</span>; <span class="comment">// 为静态方法定义其内部可以使用的指向实例的that</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 执行new Promise() 内传入的方法</span></span><br><span class="line">            fn(MyPromise.resolve, MyPromise.reject);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            MyPromise.reject(<span class="built_in">this</span>.value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 静态resolve方法，MyPromise实例不可访问;</span></span><br><span class="line"><span class="comment">     * 支持类MyPromise访问，例：MyPromise.resolve(&#x27;success&#x27;).then(e=&gt;e)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>value </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="title">resolve</span>(<span class="params">value</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> that = MyPromise.that; <span class="comment">// 由于静态方法内的this访问的是类还不是实例，所以使用这种办法访问对象实例</span></span><br><span class="line">        <span class="keyword">const</span> f = that <span class="keyword">instanceof</span> MyPromise; <span class="comment">// 确认是否是MyPromise实例访问resolve</span></span><br><span class="line">        <span class="comment">// MyPromise 实例访问resolve,如果访问成功 状态改变、值改变</span></span><br><span class="line">        <span class="keyword">if</span> (f &amp;&amp; that.status === that.statusObj.PENDING) &#123;</span><br><span class="line">            that.status = that.statusObj.RESOLVED;</span><br><span class="line">            that.value = value;</span><br><span class="line">            that.resolvedCallBacks.map(<span class="function"><span class="params">cb</span> =&gt;</span> that.value = cb(that.value));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// MyPromise 类访问resolve</span></span><br><span class="line">        <span class="keyword">if</span> (!f) &#123;</span><br><span class="line">            <span class="keyword">const</span> obj = <span class="keyword">new</span> MyPromise();</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Object</span>.assign(obj, &#123;</span><br><span class="line">                status: obj.statusObj.RESOLVED,</span><br><span class="line">                value</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 静态resolve方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>value </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="title">reject</span>(<span class="params">value</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> that = MyPromise.that;</span><br><span class="line">        <span class="keyword">const</span> f = that <span class="keyword">instanceof</span> MyPromise;</span><br><span class="line">        <span class="keyword">if</span> (f &amp;&amp; that.status === that.statusObj.REJECTED) &#123;</span><br><span class="line">            that.status = that.statusObj.REJECTED;</span><br><span class="line">            that.value = value;</span><br><span class="line">            that.rejectedCallBacks.map(<span class="function"><span class="params">cb</span> =&gt;</span> that.value = cb(that.value));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!f) &#123;</span><br><span class="line">            <span class="keyword">const</span> obj = <span class="keyword">new</span> MyPromise();</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Object</span>.assign(obj, &#123;</span><br><span class="line">                status: that.statusObj.REJECTED,</span><br><span class="line">                value</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * MyPromise 原型上的then方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>onFulfilled </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>onRejected </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="title">then</span>(<span class="params">onFulfilled, onRejected</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; PENDING, RESOLVED, REJECTED &#125; = <span class="built_in">this</span>.statusObj;</span><br><span class="line">        <span class="keyword">const</span> f = <span class="keyword">typeof</span> onFulfilled == <span class="string">&#x27;function&#x27;</span> ? onFulfilled : <span class="function"><span class="params">c</span> =&gt;</span> c</span><br><span class="line">        <span class="keyword">const</span> r = <span class="keyword">typeof</span> onRejected == <span class="string">&#x27;function&#x27;</span> ? onRejected : <span class="function"><span class="params">c</span> =&gt;</span> &#123; <span class="keyword">throw</span> c &#125;;</span><br><span class="line">        <span class="keyword">switch</span> (<span class="built_in">this</span>.status) &#123;</span><br><span class="line">            <span class="keyword">case</span> PENDING: <span class="comment">// PENDING 状态下 向下回调函数结合添加callback</span></span><br><span class="line">                <span class="built_in">this</span>.resolvedCallBacks.push(f);</span><br><span class="line">                <span class="built_in">this</span>.rejectedCallBacks.push(r);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> RESOLVED:</span><br><span class="line">                <span class="built_in">this</span>.value = f(<span class="built_in">this</span>.value); <span class="comment">// 将回调函数的返回值赋值给实例的 value ，满足链式调用then方法时传递value</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> REJECTED:</span><br><span class="line">                <span class="built_in">this</span>.value = r(<span class="built_in">this</span>.value); <span class="comment">// 将回调函数的返回值赋值给实例的 value ，满足链式调用then方法时传递value</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 满足链式调用then，返回MyPromise实例对象</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// new 一个Promise进行测试</span></span><br><span class="line">MyPromise.resolve(<span class="string">&#x27;success&#x27;</span>).then(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e);</span><br><span class="line">    <span class="keyword">return</span> e + <span class="number">1</span>;</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> MyPromise(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        resolve(<span class="number">1</span>)</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;)</span><br><span class="line">    .then(<span class="function">(<span class="params">res2</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res2);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;).then(<span class="function">(<span class="params">res3</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res3);</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>那么合乎Promises/A+规范的Promise后续收集到了再添加进去吧。。。</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在HTML中使用JavaScript</title>
      <link href="/count-goblin/2021/01/21/%E5%9C%A8HTML%E4%B8%AD%E4%BD%BF%E7%94%A8JavaScript/"/>
      <url>/count-goblin/2021/01/21/%E5%9C%A8HTML%E4%B8%AD%E4%BD%BF%E7%94%A8JavaScript/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\count-goblin\assets\css\APlayer.min.css"><script src="\count-goblin\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="在HTML中使用JavaScript"><a href="#在HTML中使用JavaScript" class="headerlink" title="在HTML中使用JavaScript"></a><strong>在HTML中使用JavaScript</strong></h2><p>在HTML中使用JavaScript的方法我们使用最多的有两种：<strong>嵌套在HTML内、引入外部文件</strong></p><h3 id="嵌套在HTML"><a href="#嵌套在HTML" class="headerlink" title="嵌套在HTML"></a><strong>嵌套在HTML</strong></h3><p> 在嵌套时，我们主要是借助**<script>**元素实现，像这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;Demo&lt;/title&gt;</span><br><span class="line">            &lt;script&gt;</span><br><span class="line">                <span class="function"><span class="keyword">function</span> <span class="title">name</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">                    sayBey(<span class="string">&#x27;Bey&#x27;</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">            &lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        ...内容</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong>在<script>中定义了6个属性，其中有个属性已被废除（language）</strong></p><ul><li><strong>async</strong>: 可选，只是用与外部脚本文件，目的是告诉浏览器立即下载文件，但不会立即执行，知道网页内容完全解释完后再去执行脚本，但是如果存在多个脚本的时候，不会保证脚本被执行的顺序</li><li><strong>defer</strong>: 可选，只是用与外部脚本文件，目的是告诉浏览器立即下载文件，但不会立即执行，直到网页内容完全解释完后再去执行脚本，和async不一样的是，它保证脚本执行顺序，从上到下</li><li><strong>src</strong>: 表示需要执行的<strong>外部脚本</strong>的路径</li><li><strong>type:</strong> 必选属性，表示编码使用的脚本语言的内容类型（MIME类型），实际上，服务器在传送文件时使用的类型通常是<strong>application/javascript</strong>,但是这个type值很可能会被忽略，所以我在现在一直使用<strong>type=”text/javascript”</strong>,或者<strong>type=”text/ecmascript”</strong></li><li><strong>charset</strong>: 指定src指定文件的代码的字符集</li></ul><p><strong>注意</strong></p><p>1、直接使用 <script>元素嵌套在页面内是，元素内的代码中不可以再次出现**</script>**的字符转，像这样：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Demo2<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="keyword">function</span> <span class="title">showScript</span>(<span class="params">params</span>) </span>&#123;</span></span><br><span class="line">                    showScript(&#x27;<span class="tag">&lt;/<span class="name">script</span>&gt;</span>&#x27;)</span><br><span class="line">                    &#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        ...内容</span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 如果代码中这样写的话，页面在解释showScript函数时，检测到</script>时就以为已经完全加载了脚本了，但实际并不是！淡然也有办法解决他，就是使用转义符：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Demo3<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="keyword">function</span> <span class="title">showScript</span>(<span class="params">params</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    showScript(<span class="string">&#x27;&lt;\/script&gt;&#x27;</span>)</span></span><br><span class="line">                    &#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        ...内容</span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、元素<script>的使用位置</p><p> 我们传统的使用方法就是在<head>内使用，但是还有一种使用方法，就是卸载<body>内——-</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Demo3<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        ...内容</span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">showScript</span>(<span class="params">params</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                showScript(<span class="string">&#x27;&lt;\/script&gt;&#x27;</span>)</span></span><br><span class="line">                &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 像上面写的话有个好处就是，页面不会因为未完全加载脚本而出现空白页面，也就给用户一种页面响应变快的感觉，也算是优化了！</p><h3 id="引入外部文件"><a href="#引入外部文件" class="headerlink" title="引入外部文件"></a><strong>引入外部文件</strong></h3><p> 在页面内引入外部的脚本文件也是我们经常使用的方法，写法也很多讲究</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Demo4<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;demo4.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">defer</span>=<span class="string">&quot;defer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;demo5.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">defer</span>=<span class="string">&quot;defer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        ...内容</span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 上面这种写法，注意用到了<strong>defer</strong>属性，也就是延迟执行，页面会立即加载这两个脚本，但不会立即执行，等到解析到</html>后，才会按照顺序，先执行demo4.js然后执行 demo5.js。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Demo4<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;demo4.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">async</span>=<span class="string">&quot;async&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;demo5.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">async</span>=<span class="string">&quot;async&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        ...内容</span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 当<script>标签内出现async时，加载的机制和defer差不多，执行在执行两个脚本的时候，并不保证demo4.js会在demo5.js之前执行。</p><h3 id="的出现"><a href="#的出现" class="headerlink" title="的出现"></a><strong><noscript>的出现</strong></h3><p> 我们不能保证全部的浏览器都会支持脚本语言或者浏览器是否禁用了脚本，那<noscript>元素的出现就是为了在这种情况友好的化解这个“尴尬”：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Demo5<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;demo6.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">async</span>=<span class="string">&quot;async&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;demo7.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">async</span>=<span class="string">&quot;async&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        ...内容</span><br><span class="line">        <span class="tag">&lt;<span class="name">noscript</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>需要开启脚本支持<span class="tag">&lt;/<span class="name">p</span>&gt;</span> // 其他的提示性语言</span><br><span class="line">        <span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 以上写法就会在页面不支持或者已经禁用脚本的情况下告诉用户页面未能达到预期效果的原因。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><p> 其实使用脚本的方法也没有硬性的约束，还是看具体的场景，不过使用外部脚本文件的开发者一般会注意到以下几点优势：</p><ul><li><strong>可维护</strong></li><li><strong>可缓存</strong></li><li><strong>适应未来</strong></li></ul><p>说下这个缓存，就是说，有些情况下，可能会有多个页面使用同一个脚本文件，此时只需一个页面加载下脚本，其他的页面就不用加载脚本了。</p>]]></content>
      
      
      <categories>
          
          <category> html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript的组成</title>
      <link href="/count-goblin/2021/01/21/JavaScript%E7%9A%84%E7%BB%84%E6%88%90/"/>
      <url>/count-goblin/2021/01/21/JavaScript%E7%9A%84%E7%BB%84%E6%88%90/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\count-goblin\assets\css\APlayer.min.css"><script src="\count-goblin\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>JavaScript的诞生</strong></p><p>​      在早期，人们在客户端发起一个简单的表单后，服务器的响应时间由于网速的缓慢，有时候会达到二三十秒，但最终可能由于一个表单校验的问题返回失败！为了解决这一问题，当时 Netscape 公司的Brendan Eich 就开始操办这件事，没过多久就开发出一种脚本语言并取名 LiveScript，为了如期的发布这门脚本语言，Netscape与Sun公司联盟开发，并赶着Java的热度，把 LiveScript改名为 JavaScript 发布了出去。（JavaScript 1.0版本）后续为了规定JavaScript的语法和特性，ECMA（欧洲计算机制造商协会）以JavaScript1.1为蓝本，指定39号技术委员为（TC39）</p><p>[TC39]    由Netscape、Sun、微软、Broland和一些关注脚本语言的程序员组成</p><p>去负责标准化一种通用、跨平台、供应商中立的脚本语法和语义。最终定义了一种名为ECMAScript的标准。</p><h3 id="JavaScript的组成"><a href="#JavaScript的组成" class="headerlink" title="JavaScript的组成"></a><strong>JavaScript的组成</strong></h3><p>JavaScript有三部分组成，ECMAScript、DOM、BOM；</p><p>1、DOM，是针对XML但是经过扩展用于HTML的一个API，他讲整个网页映射为一个多层节点结构，HTML页面有不同类型的节点组成，每个节点也包含了不同类型的数据。比如以下的页面，我们分解下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;p-panel&gt;</span><br><span class="line">   &lt;p-header&gt;头部&lt;/p-header&gt;</span><br><span class="line">     &lt;p-dataTable [value]=<span class="string">&quot;&quot;</span> &gt;</span><br><span class="line">       &lt;p-column field=<span class="string">&quot;***&quot;</span>&gt;&lt;/p-column&gt;</span><br><span class="line">     &lt;/p-dataTable&gt;</span><br><span class="line"> &lt;/p-panel&gt;</span><br></pre></td></tr></table></figure><p>这个简单的页面就会被分解为一个树，也就是我们常说的DOM树：</p><p><img src= "/count-goblin/img/loading.gif" data-lazy-src="https://pic1.zhimg.com/v2-22daf2f760d7b9e43f4baaf5a32f5ba4_b.png" alt="img"></p><p>DOM树</p><p>2、BOM，扩展：</p><ul><li>弹出新浏览器敞口的功能</li><li>移动</li><li>关闭、缩放浏览器窗口的功能</li><li>提供浏览器详细信息navigator对象</li><li>加载页面详细信息的location对象、显示分辨率详细信息（screen）</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><ul><li>ECMAScript：JavaScript核心部门，提供了JavaScript标准</li><li>DOM（文档对象模型）：提供操作和访问网页内容的接口和方法</li><li>BOM（浏览器对象模型）：提供与浏览器交互的接口和方法</li></ul>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot配置devtools实现项目热部署</title>
      <link href="/count-goblin/2021/01/15/Spring-Boot%E9%85%8D%E7%BD%AEdevtools%E5%AE%9E%E7%8E%B0%E9%A1%B9%E7%9B%AE%E7%83%AD%E9%83%A8%E7%BD%B2/"/>
      <url>/count-goblin/2021/01/15/Spring-Boot%E9%85%8D%E7%BD%AEdevtools%E5%AE%9E%E7%8E%B0%E9%A1%B9%E7%9B%AE%E7%83%AD%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\count-goblin\assets\css\APlayer.min.css"><script src="\count-goblin\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>我们知道，spring-boot-devtools是spring提供的快速的启动Spring Boot应用，可以为我们节省大量的时间。</p><h2 id="配置如下"><a href="#配置如下" class="headerlink" title="配置如下"></a>配置如下</h2><h3 id="首先是在pom-xml文件中添加如下依赖和插件"><a href="#首先是在pom-xml文件中添加如下依赖和插件" class="headerlink" title="首先是在pom.xml文件中添加如下依赖和插件"></a>首先是在pom.xml文件中添加如下依赖和插件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="在application-properties中添加"><a href="#在application-properties中添加" class="headerlink" title="在application.properties中添加"></a>在application.properties中添加</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.devtools.restart.enabled</span>: <span class="string">true</span></span><br><span class="line"><span class="comment">#设置重启的目录</span></span><br><span class="line"><span class="comment">#spring.devtools.restart.additional-paths: src/main/java</span></span><br><span class="line"><span class="comment">#classpath目录下的WEB-INF文件夹内容修改不重启</span></span><br><span class="line"><span class="meta">spring.devtools.restart.exclude</span>: <span class="string">WEB-INF/**</span></span><br></pre></td></tr></table></figure><h3 id="如果是IDEA还需要再配置一下，具体如下："><a href="#如果是IDEA还需要再配置一下，具体如下：" class="headerlink" title="如果是IDEA还需要再配置一下，具体如下："></a>如果是IDEA还需要再配置一下，具体如下：</h3><p>​    1.File-&gt;Settings-&gt;Buide、execution-&gt;Compiler,选中Build Project automatically，这样当我们修改了Java类后，IDEA就会自动编译了。</p><p><img src= "/count-goblin/img/loading.gif" data-lazy-src="https://upload-images.jianshu.io/upload_images/6979245-32295f77b21f89be.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="QQ截图20190313175052.png"></p><p>​    2.使用快捷键Ctrl+Shift+Alt+/,选择弹框中的Registry,勾上 Compiler autoMake allow when app running<img src= "/count-goblin/img/loading.gif" data-lazy-src="https://upload-images.jianshu.io/upload_images/6979245-8e9c2903b8e8e281.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="QQ截图20190313175627.png"></p><p>此时修改java类就不用自己动手再次编译了，应用会重启，相应的页面也会刷新</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot集成kaptcha实现表单图片验证</title>
      <link href="/count-goblin/2021/01/15/Spring-Boot%E9%9B%86%E6%88%90kaptcha%E5%AE%9E%E7%8E%B0%E8%A1%A8%E5%8D%95%E5%9B%BE%E7%89%87%E9%AA%8C%E8%AF%81/"/>
      <url>/count-goblin/2021/01/15/Spring-Boot%E9%9B%86%E6%88%90kaptcha%E5%AE%9E%E7%8E%B0%E8%A1%A8%E5%8D%95%E5%9B%BE%E7%89%87%E9%AA%8C%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\count-goblin\assets\css\APlayer.min.css"><script src="\count-goblin\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>​    Kaptcha是一个基于SimpleCaptcha的验证码开源项目,Kaptcha的使用比较方便，只需添加jar包依赖之后简单地配置就可以使用了。</p><h2 id="kaptcha"><a href="#kaptcha" class="headerlink" title="kaptcha"></a>kaptcha</h2><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><p>​    如果你使用maven来统一管理jar包，则在工程的pom.xml中添加dependency</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.code.kaptcha<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kaptcha<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    如果是非maven管理的项目，则直接在官网下载kaptcha的jar包，然后添加到项目lib库中，下载地址：</p><p><a href="http://code.google.com/p/kaptcha/downloads/list">Kaptcha</a> </p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ul><li>   后台生成验证码图片，将图片传到前台。</li><li>   后台在session中保存验证码内容。 </li><li>   前台输入验证码后传到后台在后台取出session中保存的验证码进行校验。</li></ul><p>注意，验证码的明文是不能传送到前端的。前端内容都是透明的，不安全。验证码是用来防机器人并不是单单防人。如果把验证码明文传到前端很容易就会被破解。</p><h3 id="图片验证码的配置类KaptchaConfig"><a href="#图片验证码的配置类KaptchaConfig" class="headerlink" title="图片验证码的配置类KaptchaConfig"></a>图片验证码的配置类KaptchaConfig</h3><p>定义图片的信息，包括边框，颜色等等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> com.google.code.kaptcha.impl.DefaultKaptcha;</span><br><span class="line"><span class="keyword">import</span> com.google.code.kaptcha.util.Config;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: component</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: ***</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 这是图片验证的配置类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2019/4/5 10:51</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KaptchaConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DefaultKaptcha <span class="title">getDefaultKaptcha</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        com.google.code.kaptcha.impl.DefaultKaptcha defaultKaptcha = <span class="keyword">new</span> com.google.code.kaptcha.impl.DefaultKaptcha();</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">// 图片边框</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.border&quot;</span>, <span class="string">&quot;yes&quot;</span>);</span><br><span class="line">        <span class="comment">// 边框颜色</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.border.color&quot;</span>, <span class="string">&quot;105,179,90&quot;</span>);</span><br><span class="line">        <span class="comment">// 字体颜色</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.textproducer.font.color&quot;</span>, <span class="string">&quot;red&quot;</span>);</span><br><span class="line">        <span class="comment">// 图片宽</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.image.width&quot;</span>, <span class="string">&quot;110&quot;</span>);</span><br><span class="line">        <span class="comment">// 图片高</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.image.height&quot;</span>, <span class="string">&quot;40&quot;</span>);</span><br><span class="line">        <span class="comment">// 字体大小</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.textproducer.font.size&quot;</span>, <span class="string">&quot;30&quot;</span>);</span><br><span class="line">        <span class="comment">// session key</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.session.key&quot;</span>, <span class="string">&quot;code&quot;</span>);</span><br><span class="line">        <span class="comment">// 验证码长度</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.textproducer.char.length&quot;</span>, <span class="string">&quot;4&quot;</span>);</span><br><span class="line">        <span class="comment">// 字体</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.textproducer.font.names&quot;</span>, <span class="string">&quot;宋体,楷体,微软雅黑&quot;</span>);</span><br><span class="line">        Config config = <span class="keyword">new</span> Config(properties);</span><br><span class="line">        defaultKaptcha.setConfig(config);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> defaultKaptcha;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="KaptchaController类实现图片的生成与校验"><a href="#KaptchaController类实现图片的生成与校验" class="headerlink" title="KaptchaController类实现图片的生成与校验"></a>KaptchaController类实现图片的生成与校验</h3><p>首先一定要注入验证码工具 DefaultKaptcha</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">    DefaultKaptcha defaultKaptcha;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletOutputStream;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"><span class="keyword">import</span> com.google.code.kaptcha.impl.DefaultKaptcha;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: component</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: ***</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: Kaptcha控制</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2019/4/5 10:54</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KaptchaController</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1、验证码工具</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DefaultKaptcha defaultKaptcha;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 2、生成验证码</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> httpServletRequest</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> httpServletResponse</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/defaultKaptcha&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">defaultKaptcha</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] captchaChallengeAsJpeg = <span class="keyword">null</span>;</span><br><span class="line">        ByteArrayOutputStream jpegOutputStream = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 生产验证码字符串并保存到session中</span></span><br><span class="line">            String createText = defaultKaptcha.createText();</span><br><span class="line">            httpServletRequest.getSession().setAttribute(<span class="string">&quot;rightCode&quot;</span>, createText);</span><br><span class="line">            <span class="comment">// 使用生产的验证码字符串返回一个BufferedImage对象并转为byte写入到byte数组中</span></span><br><span class="line">            BufferedImage challenge = defaultKaptcha.createImage(createText);</span><br><span class="line">            ImageIO.write(challenge, <span class="string">&quot;jpg&quot;</span>, jpegOutputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line">            httpServletResponse.sendError(HttpServletResponse.SC_NOT_FOUND);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义response输出类型为image/jpeg类型，使用response输出流输出图片的byte数组</span></span><br><span class="line">        captchaChallengeAsJpeg = jpegOutputStream.toByteArray();</span><br><span class="line">        httpServletResponse.setHeader(<span class="string">&quot;Cache-Control&quot;</span>, <span class="string">&quot;no-store&quot;</span>);</span><br><span class="line">        httpServletResponse.setHeader(<span class="string">&quot;Pragma&quot;</span>, <span class="string">&quot;no-cache&quot;</span>);</span><br><span class="line">        httpServletResponse.setDateHeader(<span class="string">&quot;Expires&quot;</span>, <span class="number">0</span>);</span><br><span class="line">        httpServletResponse.setContentType(<span class="string">&quot;image/jpeg&quot;</span>);</span><br><span class="line">        ServletOutputStream responseOutputStream = httpServletResponse.getOutputStream();</span><br><span class="line">        responseOutputStream.write(captchaChallengeAsJpeg);</span><br><span class="line">        responseOutputStream.flush();</span><br><span class="line">        responseOutputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 3、校对验证码</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> httpServletRequest</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> httpServletResponse</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/imgvrifyControllerDefaultKaptcha&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">imgvrifyControllerDefaultKaptcha</span><span class="params">(HttpServletRequest httpServletRequest,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                         HttpServletResponse httpServletResponse)</span> </span>&#123;</span><br><span class="line">        ModelAndView andView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        String rightCode = (String) httpServletRequest.getSession().getAttribute(<span class="string">&quot;rightCode&quot;</span>);</span><br><span class="line">        String ClientCode = httpServletRequest.getParameter(<span class="string">&quot;ClientCode&quot;</span>);</span><br><span class="line"><span class="comment">//        rightCode是生成码，ClientCode是表单提交码</span></span><br><span class="line">        System.out.println(<span class="string">&quot;rightCode:&quot;</span> + rightCode + <span class="string">&quot; ———— ClientCode:&quot;</span> + ClientCode);</span><br><span class="line">        <span class="keyword">if</span> (!rightCode.equals(ClientCode)) &#123;</span><br><span class="line">            andView.addObject(<span class="string">&quot;info&quot;</span>, <span class="string">&quot;验证码错误&quot;</span>);</span><br><span class="line">            andView.setViewName(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            andView.addObject(<span class="string">&quot;info&quot;</span>, <span class="string">&quot;登录成功&quot;</span>);</span><br><span class="line">            andView.setViewName(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> andView;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/toIndex&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="前端页面Login-html"><a href="#前端页面Login-html" class="headerlink" title="前端页面Login.html"></a>前端页面Login.html</h3><p>简单的一个表单就可以，此处需要注意几点：</p><ol><li><p>onclick=”this.src=’defaultKaptcha?d=’+new Date()*1” //每次点击图片是刷新图片，重新生成图片</p></li><li><p>src=”defaultKaptcha” // 访问controller中的验证方法</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;info&#125;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;imgvrifyControllerDefaultKaptcha&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span>      </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;vrifyCode&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;验证码&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;this.src=&#x27;defaultKaptcha?d=&#x27;+new Date()*1&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">src</span>=<span class="string">&quot;defaultKaptcha&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="实现的效果"><a href="#实现的效果" class="headerlink" title="实现的效果"></a>实现的效果</h3><p><img src= "/count-goblin/img/loading.gif" data-lazy-src="C:\Users\Administrator\Desktop\a.png" alt="a"></p>]]></content>
      
      
      <categories>
          
          <category> 表单验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kaptcha </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot+vue.js+axios文件上传</title>
      <link href="/count-goblin/2021/01/15/Spring-Boot+vue.js+axios%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
      <url>/count-goblin/2021/01/15/Spring-Boot+vue.js+axios%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\count-goblin\assets\css\APlayer.min.css"><script src="\count-goblin\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>今天花一天时间折腾Spring Boot+vue.js+axios文件，还好最算是弄成功了，在这里做个详细的笔记！</p><h2 id="Spring-Boot-vue-js-axios文件上传"><a href="#Spring-Boot-vue-js-axios文件上传" class="headerlink" title="Spring Boot+vue.js+axios文件上传"></a>Spring Boot+vue.js+axios文件上传</h2><p>###先看看表结构</p><p>​    本次实现思路是这样的，两张表，文件表和产品表，上传时，在产品表中存文件表的ID即可，文件表中存文件的名称、路径等信息。表结构如下：</p><p><strong><em>产品表</em></strong>：product</p><table><thead><tr><th></th><th>Field</th><th>Type</th><th>Comment</th></tr></thead><tbody><tr><td>KEY</td><td>id</td><td>int(11)  NOT NULL</td><td>构件ID</td></tr><tr><td></td><td>name</td><td>varchar(255)  NULL</td><td>构件名</td></tr><tr><td>FK</td><td>docid</td><td>int(11) NULL</td><td>外键指向文件ID</td></tr></tbody></table><p><strong><em>文件表</em></strong>：product_doc</p><table><thead><tr><th></th><th>Field</th><th>Type</th><th>Comment</th></tr></thead><tbody><tr><td>KEy</td><td>id</td><td>int(11) NOT NULL</td><td>文件ID</td></tr><tr><td></td><td>name</td><td>char(255) NULL</td><td>文件名</td></tr><tr><td></td><td>folder</td><td>char(255) NULL</td><td>文件路径</td></tr><tr><td></td><td>size</td><td>float NULL</td><td>文件大小</td></tr></tbody></table><h3 id="前端界面"><a href="#前端界面" class="headerlink" title="前端界面"></a>前端界面</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--@author: An_Zhongqi--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:fragment</span>=<span class="string">&quot;html&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> time = <span class="keyword">new</span> <span class="built_in">Date</span>();</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> nowTime = time.toLocaleString();</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> data4Vue = &#123;</span></span><br><span class="line">                /**</span><br><span class="line">                 * file表示要上传的附件</span><br><span class="line">                 */</span><br><span class="line"><span class="javascript">                uri: <span class="string">&#x27;topublish&#x27;</span>,</span></span><br><span class="line">                result: [],</span><br><span class="line">                component: &#123;</span><br><span class="line">                    id: 0,</span><br><span class="line"><span class="javascript">                    name: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="javascript">                    category: &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">0</span>&#125;,</span></span><br><span class="line">                &#125;,</span><br><span class="line">                categorys: [],</span><br><span class="line"><span class="javascript">                categoryy: &#123;<span class="attr">id</span>: <span class="number">0</span>, <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>&#125;,</span></span><br><span class="line"><span class="javascript">                file:<span class="literal">null</span>,</span></span><br><span class="line">            &#125;;</span><br><span class="line"><span class="javascript">            <span class="comment">//ViewModel</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> vue = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">                el: <span class="string">&#x27;#workingArea&#x27;</span>,</span></span><br><span class="line">                data: data4Vue,</span><br><span class="line"><span class="javascript">                mounted: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line">                    linkDefaultActions();</span><br><span class="line">                &#125;,</span><br><span class="line">                methods: &#123;</span><br><span class="line"><span class="javascript">                    publish: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="comment">// 特殊字符校验</span></span></span><br><span class="line"><span class="javascript">                        <span class="keyword">var</span> regEn = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&quot;[`~!@#$^&amp;*()=|&#123;&#125;&#x27;:;&#x27;,\\[\\].&lt;&gt;/?~！@#￥……&amp;*（）——|&#123;&#125;【】‘；：”“&#x27;。，、？]&quot;</span>);</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">if</span> (<span class="number">0</span> == <span class="built_in">this</span>.component.name.length) &#123;</span></span><br><span class="line"><span class="javascript">                            $(<span class="string">&quot;span.errorMessage&quot;</span>).html(<span class="string">&quot;请输入构件名称&quot;</span>);</span></span><br><span class="line"><span class="javascript">                            $(<span class="string">&quot;div.registerErrorMessageDiv&quot;</span>).css(<span class="string">&quot;visibility&quot;</span>, <span class="string">&quot;visible&quot;</span>);</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">return</span>;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                       </span><br><span class="line"><span class="javascript">                        <span class="comment">//axios.js 上传文件要用 formData 这种方式</span></span></span><br><span class="line"><span class="javascript">                        <span class="keyword">var</span> formData = <span class="keyword">new</span> FormData();</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">var</span> url = <span class="built_in">this</span>.uri;</span></span><br><span class="line"><span class="javascript">                        formData.append(<span class="string">&quot;doc&quot;</span>, <span class="built_in">this</span>.file);</span></span><br><span class="line"><span class="javascript">                        formData.append(<span class="string">&quot;name&quot;</span>, <span class="built_in">this</span>.component.name);</span></span><br><span class="line"><span class="javascript">                        axios.post(url, formData).then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                            <span class="comment">// 然后还原数据,使得输入部分回到上传前的状态</span></span></span><br><span class="line"><span class="javascript">                            <span class="keyword">var</span> a=$(<span class="string">&quot;#categoryDoc&quot;</span>).val(<span class="string">&#x27;&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                            <span class="built_in">console</span>.log(a)</span></span><br><span class="line"><span class="javascript">                            vue.file = <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">                            $(<span class="string">&quot;#singlePic&quot;</span>).val(<span class="string">&#x27;&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                            vue.singleFile = <span class="literal">null</span>;</span></span><br><span class="line">                            vue.component= &#123;</span><br><span class="line">                                id: 0,</span><br><span class="line"><span class="javascript">                                    name: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                                    category: &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">0</span>&#125;</span></span><br><span class="line">                            &#125;;</span><br><span class="line"><span class="javascript">                            <span class="keyword">var</span> result = response.data;</span></span><br><span class="line"><span class="javascript">                            <span class="built_in">console</span>.log(response.data.code);</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">if</span> (result.code == <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="javascript">                                location.href = <span class="string">&quot;publishSuccess&quot;</span>;</span></span><br><span class="line">                            &#125;</span><br><span class="line"><span class="javascript">                            <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                                $(<span class="string">&quot;span.errorMessage&quot;</span>).html(result.message);</span></span><br><span class="line"><span class="javascript">                                $(<span class="string">&quot;div.registerErrorMessageDiv&quot;</span>).css(<span class="string">&quot;visibility&quot;</span>, <span class="string">&quot;visible&quot;</span>);</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line"></span><br><span class="line">                    &#125;,</span><br><span class="line">                    /**</span><br><span class="line">                     * 当上传控件选中某个本地文件的时候，这个文件对象就会保存在data4Vue.file 上</span><br><span class="line">                     * @param event</span><br><span class="line">                     */</span><br><span class="line"><span class="javascript">                    getFile: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">this</span>.file = event.target.files[<span class="number">0</span>];</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>发布新构件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel panel-primary&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-heading&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;panel-title&quot;</span>&gt;</span>发布构件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot; height: 35px;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;registerErrorMessageDiv&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;alert alert-danger&quot;</span> <span class="attr">role</span>=<span class="string">&quot;alert&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;close&quot;</span> <span class="attr">data-dismiss</span>=<span class="string">&quot;alert&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;Close&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;errorMessage&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width: 70%;float: left&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-horizontal&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-5 control-label&quot;</span>&gt;</span>构件名称<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-5&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;component.name&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">placeholder</span>=<span class="string">&quot;请输入构件名称&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">               </span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-5 control-label&quot;</span>&gt;</span>上传文件<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-5 custom-file&quot;</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--accept=&quot;application/msword&quot;限制文件类型为doc--&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;categoryDoc&quot;</span> <span class="attr">accept</span>=<span class="string">&quot;application/msword&quot;</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;doc&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;getFile($event)&quot;</span> <span class="attr">th:placeholder</span>=<span class="string">&quot;选择相关文件&quot;</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;help-block&quot;</span>&gt;</span>上传相关文件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                </span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-offset-7 col-sm-5&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;publish&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">value</span>=<span class="string">&quot;发布&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="实体类（Product-java）"><a href="#实体类（Product-java）" class="headerlink" title="实体类（Product.java）"></a>实体类（Product.java）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jeemia.component.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonFormat;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonIgnoreProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.annotations.Document;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: component</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: An_Zhongqi</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;product&quot;)</span></span><br><span class="line"><span class="meta">@JsonIgnoreProperties(&#123;&quot;handler&quot;, &quot;hibernateLazyInitializer&quot;&#125;)</span></span><br><span class="line"><span class="meta">@Document(indexName = &quot;component&quot;, type = &quot;product&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;id&quot;)</span></span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ManyToOne</span></span><br><span class="line">    <span class="meta">@JoinColumn(name = &quot;cid&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Category category;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ManyToOne</span></span><br><span class="line">    <span class="meta">@JoinColumn(name = &quot;uid&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主键关联，指向文档表的主键ID</span></span><br><span class="line"><span class="comment">     * CascadeType.ALL-&gt;ALL 级联/添加/更新/删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OneToOne(cascade = CascadeType.ALL)</span></span><br><span class="line">    <span class="meta">@JoinColumn(name = &quot;docid&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> ProductDoc productDoc;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果既没有指明 关联到哪个Column,又没有明确要用<span class="doctag">@Transient</span>忽略，那么就会自动关联到表对应的同名字段</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transient</span></span><br><span class="line">    <span class="keyword">private</span> ProductImage firstProductImage;</span><br><span class="line">    <span class="meta">@Transient</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;ProductImage&gt; productSingleImages;</span><br><span class="line">    <span class="meta">@Transient</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;ProductImage&gt; productDetailImages;</span><br><span class="line">    <span class="meta">@Transient</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> reviewCount;</span><br><span class="line">    <span class="meta">@Transient</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> saleCount;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Category <span class="title">getCategory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> category;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCategory</span><span class="params">(Category category)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.category = category;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.user = user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> ProductDoc <span class="title">getProductDoc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> productDoc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProductDoc</span><span class="params">(ProductDoc productDoc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.productDoc = productDoc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实体类（ProductDoc）"><a href="#实体类（ProductDoc）" class="headerlink" title="实体类（ProductDoc）"></a>实体类（ProductDoc）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jeemia.component.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonBackReference;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonIgnoreProperties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.*;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span>: An_Zhongqi</span></span><br><span class="line"><span class="comment">* <span class="doctag">@description</span>: 构件的附属文件</span></span><br><span class="line"><span class="comment">* <span class="doctag">@create</span>: 2019/4/24 15:11</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;product_doc&quot;)</span></span><br><span class="line"><span class="meta">@JsonIgnoreProperties(&#123; &quot;handler&quot;,&quot;hibernateLazyInitializer&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductDoc</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Float size;</span><br><span class="line">    <span class="comment">//文件路径</span></span><br><span class="line">    <span class="keyword">private</span> String folder;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Float <span class="title">getSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSize</span><span class="params">(Float size)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.size = size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFolder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> folder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFolder</span><span class="params">(String folder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.folder = folder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure><h3 id="Service-ProductService-java"><a href="#Service-ProductService-java" class="headerlink" title="Service(ProductService.java)"></a>Service(ProductService.java)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jeemia.component.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.jeemia.component.dao.ProductDAO;</span><br><span class="line"><span class="keyword">import</span> com.jeemia.component.pojo.Category;</span><br><span class="line"><span class="keyword">import</span> com.jeemia.component.pojo.Product;</span><br><span class="line"><span class="keyword">import</span> com.jeemia.component.util.Page4Navigator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.Page;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.PageRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.Pageable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.Sort;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.beans.PropertyDescriptor;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: component</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: An_Zhongqi</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ProductDAO productDAO;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    CategoryService categoryService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ProductImageService productImageService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    OrderItemService orderItemService;</span><br><span class="line">    <span class="meta">@Autowired</span> ReviewService reviewService;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *添加数据</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Product bean)</span> </span>&#123;</span><br><span class="line">        productDAO.save(bean);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Product id)</span> </span>&#123;</span><br><span class="line">        productDAO.delete(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updata</span><span class="params">(Product bean)</span> </span>&#123;</span><br><span class="line">        productDAO.save(bean);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">get</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> productDAO.findById(id).orElse(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Page4Navigator&lt;Product&gt; <span class="title">list</span><span class="params">(<span class="keyword">int</span> cid, <span class="keyword">int</span> start, <span class="keyword">int</span> size, <span class="keyword">int</span> navigatePages)</span> </span>&#123;</span><br><span class="line">        Category category = categoryService.get(cid);</span><br><span class="line">        Sort sort = <span class="keyword">new</span> Sort(Sort.Direction.DESC, <span class="string">&quot;id&quot;</span>);</span><br><span class="line">        Pageable pageable = <span class="keyword">new</span> PageRequest(start, size, sort);</span><br><span class="line">        Page&lt;Product&gt; pageFromJPA = productDAO.findByCategory(category, pageable);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Page4Navigator&lt;&gt;(pageFromJPA, navigatePages);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure><h3 id="Controller"><a href="#Controller" class="headerlink" title="Controller()"></a>Controller()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发布</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> product</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> productDoc</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> doc</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> model</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/topublish&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">publish</span><span class="params">(Product product, ProductDoc productDoc, ProductImage productImage, HttpSession session,</span></span></span><br><span class="line"><span class="function"><span class="params">                          MultipartFile doc, Model model, HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        User user = (User) session.getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        String filename = doc.getOriginalFilename();</span><br><span class="line">        Long size1 = doc.getSize() / <span class="number">1024</span>;</span><br><span class="line">        Float size = (<span class="keyword">float</span>) size1;</span><br><span class="line">        File fileFolder = <span class="keyword">new</span> File(request.getServletContext().getRealPath(<span class="string">&quot;file/product&quot;</span>));</span><br><span class="line">        String pictureFolder = iamgeFolder.toString();</span><br><span class="line">        String folder = fileFolder.toString();</span><br><span class="line">        </span><br><span class="line">        product.setUser(user);</span><br><span class="line">        product.setProductDoc(productDoc);</span><br><span class="line">        product.setProductImage(productImage);</span><br><span class="line">        product.setCreateDate(<span class="keyword">new</span> Date());</span><br><span class="line">        productService.add(product);</span><br><span class="line">    </span><br><span class="line">        saveOrUpdateDocFile(product, doc, request, model);</span><br><span class="line">        productDoc.setName(filename);</span><br><span class="line">        productDoc.setSize(size);</span><br><span class="line">        productDoc.setFolder(folder);</span><br><span class="line">        productDosService.add(productDoc);</span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> doc</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> model   存放文件名，以备显示</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveOrUpdateDocFile</span><span class="params">(Product bean, MultipartFile doc, HttpServletRequest request, Model model)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//文件存放路径</span></span><br><span class="line">        File fileFolder = <span class="keyword">new</span> File(request.getServletContext().getRealPath(<span class="string">&quot;file/product&quot;</span>));</span><br><span class="line">    <span class="comment">//获取上传的文件名</span></span><br><span class="line">        String Filename = doc.getOriginalFilename();</span><br><span class="line">        File filename = <span class="keyword">new</span> File(fileFolder, Filename);</span><br><span class="line">        <span class="comment">//文件路径不存在时创建</span></span><br><span class="line">        <span class="keyword">if</span> (!filename.getParentFile().exists()) &#123;</span><br><span class="line">            filename.getParentFile().mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//保存文件</span></span><br><span class="line">        doc.transferTo(filename);</span><br><span class="line">        <span class="comment">//把文件名放在model里，以便后续显示用</span></span><br><span class="line">        model.addAttribute(<span class="string">&quot;Filename&quot;</span>, Filename);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件上传 axios文件上传 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序员要记住这句话</title>
      <link href="/count-goblin/2021/01/15/%E7%A8%8B%E5%BA%8F%E5%91%98%E8%A6%81%E8%AE%B0%E4%BD%8F%E8%BF%99%E5%8F%A5%E8%AF%9D/"/>
      <url>/count-goblin/2021/01/15/%E7%A8%8B%E5%BA%8F%E5%91%98%E8%A6%81%E8%AE%B0%E4%BD%8F%E8%BF%99%E5%8F%A5%E8%AF%9D/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\count-goblin\assets\css\APlayer.min.css"><script src="\count-goblin\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="给自己的鼓励"><a href="#给自己的鼓励" class="headerlink" title="给自己的鼓励"></a>给自己的鼓励</h2><p>​    当一个代码的工匠回首往事时，不因虚度年华而悔恨，也不因碌碌无为而羞愧， 这样，当他老的时候， 可以很自豪告诉世人，我曾经将代码注入生命去打造互联网的浪潮之巅， 那是个很疯狂的时代，我在一波波的浪潮上留下了或重如泰山或轻如鸿毛的几笔。</p>]]></content>
      
      
      <categories>
          
          <category> 激励 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 激励 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
